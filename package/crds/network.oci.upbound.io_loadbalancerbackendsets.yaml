---
apiVersion: apiextensions.k8s.io/v1
kind: CustomResourceDefinition
metadata:
  annotations:
    controller-gen.kubebuilder.io/version: v0.8.0
  creationTimestamp: null
  name: loadbalancerbackendsets.network.oci.upbound.io
spec:
  group: network.oci.upbound.io
  names:
    categories:
    - crossplane
    - managed
    - oci
    kind: LoadBalancerBackendSet
    listKind: LoadBalancerBackendSetList
    plural: loadbalancerbackendsets
    singular: loadbalancerbackendset
  scope: Cluster
  versions:
  - additionalPrinterColumns:
    - jsonPath: .status.conditions[?(@.type=='Ready')].status
      name: READY
      type: string
    - jsonPath: .status.conditions[?(@.type=='Synced')].status
      name: SYNCED
      type: string
    - jsonPath: .metadata.annotations.crossplane\.io/external-name
      name: EXTERNAL-NAME
      type: string
    - jsonPath: .metadata.creationTimestamp
      name: AGE
      type: date
    name: v1alpha1
    schema:
      openAPIV3Schema:
        description: LoadBalancerBackendSet is the Schema for the LoadBalancerBackendSets
          API. Provides the Backend Set resource in Oracle Cloud Infrastructure Network
          Load Balancer service
        properties:
          apiVersion:
            description: 'APIVersion defines the versioned schema of this representation
              of an object. Servers should convert recognized schemas to the latest
              internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
            type: string
          kind:
            description: 'Kind is a string value representing the REST resource this
              object represents. Servers may infer this from the endpoint the client
              submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
            type: string
          metadata:
            type: object
          spec:
            description: LoadBalancerBackendSetSpec defines the desired state of LoadBalancerBackendSet
            properties:
              deletionPolicy:
                default: Delete
                description: DeletionPolicy specifies what will happen to the underlying
                  external when this managed resource is deleted - either "Delete"
                  or "Orphan" the external resource.
                enum:
                - Orphan
                - Delete
                type: string
              forProvider:
                properties:
                  areOperationallyActiveBackendsPreferred:
                    type: boolean
                  healthChecker:
                    description: (Updatable) The health check policy configuration.
                      For more information, see Editing Health Check Policies.
                    items:
                      properties:
                        dns:
                          items:
                            properties:
                              domainName:
                                description: A user-friendly name for the backend
                                  set that must be unique and cannot be changed.
                                type: string
                              queryClass:
                                type: string
                              queryType:
                                type: string
                              rcodes:
                                items:
                                  type: string
                                type: array
                              transportProtocol:
                                description: '(Updatable) The protocol the health
                                  check must use; either HTTP or HTTPS, or UDP or
                                  TCP.  Example: HTTP'
                                type: string
                            required:
                            - domainName
                            type: object
                          type: array
                        intervalInMillis:
                          description: '(Updatable) The interval between health checks,
                            in milliseconds. The default value is 10000 (10 seconds).  Example:
                            10000'
                          type: number
                        port:
                          description: '(Updatable) The backend server port against
                            which to run the health check. If the port is not specified,
                            then the network load balancer uses the port information
                            from the Backend object. The port must be specified if
                            the backend port is 0.  Example: 8080'
                          type: number
                        protocol:
                          description: '(Updatable) The protocol the health check
                            must use; either HTTP or HTTPS, or UDP or TCP.  Example:
                            HTTP'
                          type: string
                        requestData:
                          description: (Updatable) Base64 encoded pattern to be sent
                            as UDP or TCP health check probe.
                          type: string
                        responseBodyRegex:
                          description: '(Updatable) A regular expression for parsing
                            the response body from the backend server.  Example: ^((?!false).|\s)*$'
                          type: string
                        responseData:
                          description: (Updatable) Base64 encoded pattern to be validated
                            as UDP or TCP health check probe response.
                          type: string
                        retries:
                          description: '(Updatable) The number of retries to attempt
                            before a backend server is considered "unhealthy". This
                            number also applies when recovering a server to the "healthy"
                            state. The default value is 3.  Example: 3'
                          type: number
                        returnCode:
                          description: '(Updatable) The status code a healthy backend
                            server should return. If you configure the health check
                            policy to use the HTTP protocol, then you can use common
                            HTTP status codes such as "200".  Example: 200'
                          type: number
                        timeoutInMillis:
                          description: '(Updatable) The maximum time, in milliseconds,
                            to wait for a reply to a health check. A health check
                            is successful only if a reply returns within this timeout
                            period. The default value is 3000 (3 seconds).  Example:
                            3000'
                          type: number
                        urlPath:
                          description: '(Updatable) The path against which to run
                            the health check.  Example: /healthcheck'
                          type: string
                      required:
                      - protocol
                      type: object
                    type: array
                  ipVersion:
                    description: (Updatable) IP version associated with the backend
                      set.
                    type: string
                  isFailOpen:
                    type: boolean
                  isInstantFailoverEnabled:
                    type: boolean
                  isInstantFailoverTcpResetEnabled:
                    type: boolean
                  isPreserveSource:
                    description: (Updatable) If this parameter is enabled, then the
                      network load balancer preserves the source IP of the packet
                      when it is forwarded to backends. Backends see the original
                      source IP. If the isPreserveSourceDestination parameter is enabled
                      for the network load balancer resource, then this parameter
                      cannot be disabled. The value is true by default.
                    type: boolean
                  name:
                    description: A user-friendly name for the backend set that must
                      be unique and cannot be changed.
                    type: string
                  networkLoadBalancerId:
                    description: The OCID of the network load balancer to update.
                    type: string
                  networkLoadBalancerIdRef:
                    description: Reference to a LoadBalancerNetworkLoadBalancer to
                      populate networkLoadBalancerId.
                    properties:
                      name:
                        description: Name of the referenced object.
                        type: string
                      policy:
                        description: Policies for referencing.
                        properties:
                          resolution:
                            default: Required
                            description: Resolution specifies whether resolution of
                              this reference is required. The default is 'Required',
                              which means the reconcile will fail if the reference
                              cannot be resolved. 'Optional' means this reference
                              will be a no-op if it cannot be resolved.
                            enum:
                            - Required
                            - Optional
                            type: string
                          resolve:
                            description: Resolve specifies when this reference should
                              be resolved. The default is 'IfNotPresent', which will
                              attempt to resolve the reference only when the corresponding
                              field is not present. Use 'Always' to resolve the reference
                              on every reconcile.
                            enum:
                            - Always
                            - IfNotPresent
                            type: string
                        type: object
                    required:
                    - name
                    type: object
                  networkLoadBalancerIdSelector:
                    description: Selector for a LoadBalancerNetworkLoadBalancer to
                      populate networkLoadBalancerId.
                    properties:
                      matchControllerRef:
                        description: MatchControllerRef ensures an object with the
                          same controller reference as the selecting object is selected.
                        type: boolean
                      matchLabels:
                        additionalProperties:
                          type: string
                        description: MatchLabels ensures an object with matching labels
                          is selected.
                        type: object
                      policy:
                        description: Policies for selection.
                        properties:
                          resolution:
                            default: Required
                            description: Resolution specifies whether resolution of
                              this reference is required. The default is 'Required',
                              which means the reconcile will fail if the reference
                              cannot be resolved. 'Optional' means this reference
                              will be a no-op if it cannot be resolved.
                            enum:
                            - Required
                            - Optional
                            type: string
                          resolve:
                            description: Resolve specifies when this reference should
                              be resolved. The default is 'IfNotPresent', which will
                              attempt to resolve the reference only when the corresponding
                              field is not present. Use 'Always' to resolve the reference
                              on every reconcile.
                            enum:
                            - Always
                            - IfNotPresent
                            type: string
                        type: object
                    type: object
                  policy:
                    description: '(Updatable) The network load balancer policy for
                      the backend set.  Example: `FIVE_TUPLE“'
                    type: string
                required:
                - healthChecker
                - name
                - policy
                type: object
              providerConfigRef:
                default:
                  name: default
                description: ProviderConfigReference specifies how the provider that
                  will be used to create, observe, update, and delete this managed
                  resource should be configured.
                properties:
                  name:
                    description: Name of the referenced object.
                    type: string
                  policy:
                    description: Policies for referencing.
                    properties:
                      resolution:
                        default: Required
                        description: Resolution specifies whether resolution of this
                          reference is required. The default is 'Required', which
                          means the reconcile will fail if the reference cannot be
                          resolved. 'Optional' means this reference will be a no-op
                          if it cannot be resolved.
                        enum:
                        - Required
                        - Optional
                        type: string
                      resolve:
                        description: Resolve specifies when this reference should
                          be resolved. The default is 'IfNotPresent', which will attempt
                          to resolve the reference only when the corresponding field
                          is not present. Use 'Always' to resolve the reference on
                          every reconcile.
                        enum:
                        - Always
                        - IfNotPresent
                        type: string
                    type: object
                required:
                - name
                type: object
              providerRef:
                description: 'ProviderReference specifies the provider that will be
                  used to create, observe, update, and delete this managed resource.
                  Deprecated: Please use ProviderConfigReference, i.e. `providerConfigRef`'
                properties:
                  name:
                    description: Name of the referenced object.
                    type: string
                  policy:
                    description: Policies for referencing.
                    properties:
                      resolution:
                        default: Required
                        description: Resolution specifies whether resolution of this
                          reference is required. The default is 'Required', which
                          means the reconcile will fail if the reference cannot be
                          resolved. 'Optional' means this reference will be a no-op
                          if it cannot be resolved.
                        enum:
                        - Required
                        - Optional
                        type: string
                      resolve:
                        description: Resolve specifies when this reference should
                          be resolved. The default is 'IfNotPresent', which will attempt
                          to resolve the reference only when the corresponding field
                          is not present. Use 'Always' to resolve the reference on
                          every reconcile.
                        enum:
                        - Always
                        - IfNotPresent
                        type: string
                    type: object
                required:
                - name
                type: object
              publishConnectionDetailsTo:
                description: PublishConnectionDetailsTo specifies the connection secret
                  config which contains a name, metadata and a reference to secret
                  store config to which any connection details for this managed resource
                  should be written. Connection details frequently include the endpoint,
                  username, and password required to connect to the managed resource.
                properties:
                  configRef:
                    default:
                      name: default
                    description: SecretStoreConfigRef specifies which secret store
                      config should be used for this ConnectionSecret.
                    properties:
                      name:
                        description: Name of the referenced object.
                        type: string
                      policy:
                        description: Policies for referencing.
                        properties:
                          resolution:
                            default: Required
                            description: Resolution specifies whether resolution of
                              this reference is required. The default is 'Required',
                              which means the reconcile will fail if the reference
                              cannot be resolved. 'Optional' means this reference
                              will be a no-op if it cannot be resolved.
                            enum:
                            - Required
                            - Optional
                            type: string
                          resolve:
                            description: Resolve specifies when this reference should
                              be resolved. The default is 'IfNotPresent', which will
                              attempt to resolve the reference only when the corresponding
                              field is not present. Use 'Always' to resolve the reference
                              on every reconcile.
                            enum:
                            - Always
                            - IfNotPresent
                            type: string
                        type: object
                    required:
                    - name
                    type: object
                  metadata:
                    description: Metadata is the metadata for connection secret.
                    properties:
                      annotations:
                        additionalProperties:
                          type: string
                        description: Annotations are the annotations to be added to
                          connection secret. - For Kubernetes secrets, this will be
                          used as "metadata.annotations". - It is up to Secret Store
                          implementation for others store types.
                        type: object
                      labels:
                        additionalProperties:
                          type: string
                        description: Labels are the labels/tags to be added to connection
                          secret. - For Kubernetes secrets, this will be used as "metadata.labels".
                          - It is up to Secret Store implementation for others store
                          types.
                        type: object
                      type:
                        description: Type is the SecretType for the connection secret.
                          - Only valid for Kubernetes Secret Stores.
                        type: string
                    type: object
                  name:
                    description: Name is the name of the connection secret.
                    type: string
                required:
                - name
                type: object
              writeConnectionSecretToRef:
                description: WriteConnectionSecretToReference specifies the namespace
                  and name of a Secret to which any connection details for this managed
                  resource should be written. Connection details frequently include
                  the endpoint, username, and password required to connect to the
                  managed resource. This field is planned to be replaced in a future
                  release in favor of PublishConnectionDetailsTo. Currently, both
                  could be set independently and connection details would be published
                  to both without affecting each other.
                properties:
                  name:
                    description: Name of the secret.
                    type: string
                  namespace:
                    description: Namespace of the secret.
                    type: string
                required:
                - name
                - namespace
                type: object
            required:
            - forProvider
            type: object
          status:
            description: LoadBalancerBackendSetStatus defines the observed state of
              LoadBalancerBackendSet.
            properties:
              atProvider:
                properties:
                  backends:
                    description: Array of backends.
                    items:
                      properties:
                        ipAddress:
                          description: 'The IP address of the backend server. Example:
                            10.0.0.3'
                          type: string
                        isBackup:
                          description: 'Whether the network load balancer should treat
                            this server as a backup unit. If true, then the network
                            load balancer forwards no ingress traffic to this backend
                            server unless all other backend servers not marked as
                            "isBackup" fail the health check policy.  Example: false'
                          type: boolean
                        isDrain:
                          description: 'Whether the network load balancer should drain
                            this server. Servers marked "isDrain" receive no incoming
                            traffic.  Example: false'
                          type: boolean
                        isOffline:
                          description: 'Whether the network load balancer should treat
                            this server as offline. Offline servers receive no incoming
                            traffic.  Example: false'
                          type: boolean
                        name:
                          description: A user-friendly name for the backend set that
                            must be unique and cannot be changed.
                          type: string
                        port:
                          description: '(Updatable) The backend server port against
                            which to run the health check. If the port is not specified,
                            then the network load balancer uses the port information
                            from the Backend object. The port must be specified if
                            the backend port is 0.  Example: 8080'
                          type: number
                        targetId:
                          description: 'The IP OCID/Instance OCID associated with
                            the backend server. Example: ocid1.privateip..oc1.<var>&lt;unique_ID&gt;</var>'
                          type: string
                        weight:
                          description: 'The network load balancing policy weight assigned
                            to the server. Backend servers with a higher weight receive
                            a larger proportion of incoming traffic. For example,
                            a server weighted ''3'' receives three times the number
                            of new connections as a server weighted ''1''. For more
                            information about load balancing policies, see How Network
                            Load Balancing Policies Work.  Example: 3'
                          type: number
                      type: object
                    type: array
                  id:
                    type: string
                type: object
              conditions:
                description: Conditions of the resource.
                items:
                  description: A Condition that may apply to a resource.
                  properties:
                    lastTransitionTime:
                      description: LastTransitionTime is the last time this condition
                        transitioned from one status to another.
                      format: date-time
                      type: string
                    message:
                      description: A Message containing details about this condition's
                        last transition from one status to another, if any.
                      type: string
                    reason:
                      description: A Reason for this condition's last transition from
                        one status to another.
                      type: string
                    status:
                      description: Status of this condition; is it currently True,
                        False, or Unknown?
                      type: string
                    type:
                      description: Type of this condition. At most one of each condition
                        type may apply to a resource at any point in time.
                      type: string
                  required:
                  - lastTransitionTime
                  - reason
                  - status
                  - type
                  type: object
                type: array
            type: object
        required:
        - spec
        type: object
    served: true
    storage: true
    subresources:
      status: {}
status:
  acceptedNames:
    kind: ""
    plural: ""
  conditions: []
  storedVersions: []
