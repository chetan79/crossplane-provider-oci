/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type InvokeFunctionObservation struct {
	Content *string `json:"content,omitempty" tf:"content,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	InvokeEndpoint *string `json:"invokeEndpoint,omitempty" tf:"invoke_endpoint,omitempty"`
}

type InvokeFunctionParameters struct {

	// +kubebuilder:validation:Optional
	Base64EncodeContent *bool `json:"base64EncodeContent,omitempty" tf:"base64_encode_content,omitempty"`

	// +kubebuilder:validation:Optional
	FnIntent *string `json:"fnIntent,omitempty" tf:"fn_intent,omitempty"`

	// +kubebuilder:validation:Optional
	FnInvokeType *string `json:"fnInvokeType,omitempty" tf:"fn_invoke_type,omitempty"`

	// +crossplane:generate:reference:type=Function
	// +kubebuilder:validation:Optional
	FunctionID *string `json:"functionId,omitempty" tf:"function_id,omitempty"`

	// +kubebuilder:validation:Optional
	FunctionIDRef *v1.Reference `json:"functionIdRef,omitempty" tf:"-"`

	// +kubebuilder:validation:Optional
	FunctionIDSelector *v1.Selector `json:"functionIdSelector,omitempty" tf:"-"`

	// +kubebuilder:validation:Optional
	InputBodySourcePath *string `json:"inputBodySourcePath,omitempty" tf:"input_body_source_path,omitempty"`

	// +kubebuilder:validation:Optional
	InvokeFunctionBody *string `json:"invokeFunctionBody,omitempty" tf:"invoke_function_body,omitempty"`

	// +kubebuilder:validation:Optional
	InvokeFunctionBodyBase64Encoded *string `json:"invokeFunctionBodyBase64Encoded,omitempty" tf:"invoke_function_body_base64_encoded,omitempty"`
}

// InvokeFunctionSpec defines the desired state of InvokeFunction
type InvokeFunctionSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     InvokeFunctionParameters `json:"forProvider"`
}

// InvokeFunctionStatus defines the observed state of InvokeFunction.
type InvokeFunctionStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        InvokeFunctionObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// InvokeFunction is the Schema for the InvokeFunctions API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,ocijet}
type InvokeFunction struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              InvokeFunctionSpec   `json:"spec"`
	Status            InvokeFunctionStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// InvokeFunctionList contains a list of InvokeFunctions
type InvokeFunctionList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []InvokeFunction `json:"items"`
}

// Repository type metadata.
var (
	InvokeFunction_Kind             = "InvokeFunction"
	InvokeFunction_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: InvokeFunction_Kind}.String()
	InvokeFunction_KindAPIVersion   = InvokeFunction_Kind + "." + CRDGroupVersion.String()
	InvokeFunction_GroupVersionKind = CRDGroupVersion.WithKind(InvokeFunction_Kind)
)

func init() {
	SchemeBuilder.Register(&InvokeFunction{}, &InvokeFunctionList{})
}
