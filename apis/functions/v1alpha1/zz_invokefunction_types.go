/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type InvokeFunctionObservation struct {

	// Content of the response string, if any. If base64_encode_content is set to true, then this content will be base64 encoded.
	Content *string `json:"content,omitempty" tf:"content,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	InvokeEndpoint *string `json:"invokeEndpoint,omitempty" tf:"invoke_endpoint,omitempty"`
}

type InvokeFunctionParameters struct {

	// Encodes the response returned, if any, in base64. The default value is false.
	// +kubebuilder:validation:Optional
	Base64EncodeContent *bool `json:"base64EncodeContent,omitempty" tf:"base64_encode_content,omitempty"`

	// An optional intent header that indicates to the FDK the way the event should be interpreted. E.g. 'httprequest', 'cloudevent'.
	// +kubebuilder:validation:Optional
	FnIntent *string `json:"fnIntent,omitempty" tf:"fn_intent,omitempty"`

	// Indicates whether Oracle Functions should execute the request and return the result ('sync') of the execution,  or whether Oracle Functions should return as soon as processing has begun ('detached') and leave result handling to the function.
	// +kubebuilder:validation:Optional
	FnInvokeType *string `json:"fnInvokeType,omitempty" tf:"fn_invoke_type,omitempty"`

	// The OCID of this function.
	// +crossplane:generate:reference:type=Function
	// +kubebuilder:validation:Optional
	FunctionID *string `json:"functionId,omitempty" tf:"function_id,omitempty"`

	// Reference to a Function to populate functionId.
	// +kubebuilder:validation:Optional
	FunctionIDRef *v1.Reference `json:"functionIdRef,omitempty" tf:"-"`

	// Selector for a Function to populate functionId.
	// +kubebuilder:validation:Optional
	FunctionIDSelector *v1.Selector `json:"functionIdSelector,omitempty" tf:"-"`

	// An absolute path to a file on the local system that contains the input to be provided to the function. Cannot be defined if invoke_function_body or invoke_function_body_base64_encoded is defined. Note: The maximum size of the request is limited. This limit is currently 6MB and the endpoint will not accept requests that are bigger than this limit.
	// +kubebuilder:validation:Optional
	InputBodySourcePath *string `json:"inputBodySourcePath,omitempty" tf:"input_body_source_path,omitempty"`

	// The body of the function invocation. Note: The maximum size of the request is limited. This limit is currently 6MB and the endpoint will not accept requests that are bigger than this limit. Cannot be defined if input_body_source_path or invoke_function_body_base64_encoded is defined.
	// +kubebuilder:validation:Optional
	InvokeFunctionBody *string `json:"invokeFunctionBody,omitempty" tf:"invoke_function_body,omitempty"`

	// The Base64 encoded body of the function invocation. Cannot be defined if invoke_function_body or input_body_source_path is defined. Note: The maximum size of the request is limited. This limit is currently 6MB and the endpoint will not accept requests that are bigger than this limit.
	// +kubebuilder:validation:Optional
	InvokeFunctionBodyBase64Encoded *string `json:"invokeFunctionBodyBase64Encoded,omitempty" tf:"invoke_function_body_base64_encoded,omitempty"`

	// +kubebuilder:validation:Optional
	IsDryRun *bool `json:"isDryRun,omitempty" tf:"is_dry_run,omitempty"`
}

// InvokeFunctionSpec defines the desired state of InvokeFunction
type InvokeFunctionSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     InvokeFunctionParameters `json:"forProvider"`
}

// InvokeFunctionStatus defines the observed state of InvokeFunction.
type InvokeFunctionStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        InvokeFunctionObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// InvokeFunction is the Schema for the InvokeFunctions API. Provides the Invoke Function resource in Oracle Cloud Infrastructure Functions service
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,oci}
type InvokeFunction struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              InvokeFunctionSpec   `json:"spec"`
	Status            InvokeFunctionStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// InvokeFunctionList contains a list of InvokeFunctions
type InvokeFunctionList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []InvokeFunction `json:"items"`
}

// Repository type metadata.
var (
	InvokeFunction_Kind             = "InvokeFunction"
	InvokeFunction_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: InvokeFunction_Kind}.String()
	InvokeFunction_KindAPIVersion   = InvokeFunction_Kind + "." + CRDGroupVersion.String()
	InvokeFunction_GroupVersionKind = CRDGroupVersion.WithKind(InvokeFunction_Kind)
)

func init() {
	SchemeBuilder.Register(&InvokeFunction{}, &InvokeFunctionList{})
}
