/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type CertificateAuthorityConfigObservation struct {
}

type CertificateAuthorityConfigParameters struct {

	// +kubebuilder:validation:Required
	ConfigType *string `json:"configType" tf:"config_type,omitempty"`

	// +kubebuilder:validation:Optional
	IssuerCertificateAuthorityID *string `json:"issuerCertificateAuthorityId,omitempty" tf:"issuer_certificate_authority_id,omitempty"`

	// +kubebuilder:validation:Optional
	SigningAlgorithm *string `json:"signingAlgorithm,omitempty" tf:"signing_algorithm,omitempty"`

	// +kubebuilder:validation:Required
	Subject []SubjectParameters `json:"subject" tf:"subject,omitempty"`

	// +kubebuilder:validation:Optional
	Validity []ValidityParameters `json:"validity,omitempty" tf:"validity,omitempty"`

	// +kubebuilder:validation:Optional
	VersionName *string `json:"versionName,omitempty" tf:"version_name,omitempty"`
}

type CertificateAuthorityObservation struct {
	ConfigType *string `json:"configType,omitempty" tf:"config_type,omitempty"`

	CurrentVersion []CurrentVersionObservation `json:"currentVersion,omitempty" tf:"current_version,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	IssuerCertificateAuthorityID *string `json:"issuerCertificateAuthorityId,omitempty" tf:"issuer_certificate_authority_id,omitempty"`

	LifecycleDetails *string `json:"lifecycleDetails,omitempty" tf:"lifecycle_details,omitempty"`

	SigningAlgorithm *string `json:"signingAlgorithm,omitempty" tf:"signing_algorithm,omitempty"`

	State *string `json:"state,omitempty" tf:"state,omitempty"`

	Subject []CertificateAuthoritySubjectObservation `json:"subject,omitempty" tf:"subject,omitempty"`

	TimeCreated *string `json:"timeCreated,omitempty" tf:"time_created,omitempty"`

	TimeOfDeletion *string `json:"timeOfDeletion,omitempty" tf:"time_of_deletion,omitempty"`
}

type CertificateAuthorityParameters struct {

	// +kubebuilder:validation:Required
	CertificateAuthorityConfig []CertificateAuthorityConfigParameters `json:"certificateAuthorityConfig" tf:"certificate_authority_config,omitempty"`

	// +kubebuilder:validation:Optional
	CertificateAuthorityRules []CertificateAuthorityRulesParameters `json:"certificateAuthorityRules,omitempty" tf:"certificate_authority_rules,omitempty"`

	// +kubebuilder:validation:Optional
	CertificateRevocationListDetails []CertificateRevocationListDetailsParameters `json:"certificateRevocationListDetails,omitempty" tf:"certificate_revocation_list_details,omitempty"`

	// +crossplane:generate:reference:type=github.com/crossplane-contrib/provider-jet-oci/apis/identity/v1alpha1.Compartment
	// +kubebuilder:validation:Optional
	CompartmentID *string `json:"compartmentId,omitempty" tf:"compartment_id,omitempty"`

	// +kubebuilder:validation:Optional
	CompartmentIDRef *v1.Reference `json:"compartmentIdRef,omitempty" tf:"-"`

	// +kubebuilder:validation:Optional
	CompartmentIDSelector *v1.Selector `json:"compartmentIdSelector,omitempty" tf:"-"`

	// +kubebuilder:validation:Optional
	DefinedTags map[string]*string `json:"definedTags,omitempty" tf:"defined_tags,omitempty"`

	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// +kubebuilder:validation:Optional
	FreeformTags map[string]*string `json:"freeformTags,omitempty" tf:"freeform_tags,omitempty"`

	// +crossplane:generate:reference:type=github.com/crossplane-contrib/provider-jet-oci/apis/kms/v1alpha1.Key
	// +kubebuilder:validation:Optional
	KMSKeyID *string `json:"kmsKeyId,omitempty" tf:"kms_key_id,omitempty"`

	// +kubebuilder:validation:Optional
	KMSKeyIDRef *v1.Reference `json:"kmsKeyIdRef,omitempty" tf:"-"`

	// +kubebuilder:validation:Optional
	KMSKeyIDSelector *v1.Selector `json:"kmsKeyIdSelector,omitempty" tf:"-"`

	// +kubebuilder:validation:Required
	Name *string `json:"name" tf:"name,omitempty"`
}

type CertificateAuthorityRulesObservation struct {
}

type CertificateAuthorityRulesParameters struct {

	// +kubebuilder:validation:Optional
	CertificateAuthorityMaxValidityDuration *string `json:"certificateAuthorityMaxValidityDuration,omitempty" tf:"certificate_authority_max_validity_duration,omitempty"`

	// +kubebuilder:validation:Optional
	LeafCertificateMaxValidityDuration *string `json:"leafCertificateMaxValidityDuration,omitempty" tf:"leaf_certificate_max_validity_duration,omitempty"`

	// +kubebuilder:validation:Required
	RuleType *string `json:"ruleType" tf:"rule_type,omitempty"`
}

type CertificateAuthoritySubjectObservation struct {
	CommonName *string `json:"commonName,omitempty" tf:"common_name,omitempty"`

	Country *string `json:"country,omitempty" tf:"country,omitempty"`

	DistinguishedNameQualifier *string `json:"distinguishedNameQualifier,omitempty" tf:"distinguished_name_qualifier,omitempty"`

	DomainComponent *string `json:"domainComponent,omitempty" tf:"domain_component,omitempty"`

	GenerationQualifier *string `json:"generationQualifier,omitempty" tf:"generation_qualifier,omitempty"`

	GivenName *string `json:"givenName,omitempty" tf:"given_name,omitempty"`

	Initials *string `json:"initials,omitempty" tf:"initials,omitempty"`

	LocalityName *string `json:"localityName,omitempty" tf:"locality_name,omitempty"`

	Organization *string `json:"organization,omitempty" tf:"organization,omitempty"`

	OrganizationalUnit *string `json:"organizationalUnit,omitempty" tf:"organizational_unit,omitempty"`

	Pseudonym *string `json:"pseudonym,omitempty" tf:"pseudonym,omitempty"`

	SerialNumber *string `json:"serialNumber,omitempty" tf:"serial_number,omitempty"`

	StateOrProvinceName *string `json:"stateOrProvinceName,omitempty" tf:"state_or_province_name,omitempty"`

	Street *string `json:"street,omitempty" tf:"street,omitempty"`

	Surname *string `json:"surname,omitempty" tf:"surname,omitempty"`

	Title *string `json:"title,omitempty" tf:"title,omitempty"`

	UserID *string `json:"userId,omitempty" tf:"user_id,omitempty"`
}

type CertificateAuthoritySubjectParameters struct {
}

type CertificateRevocationListDetailsObservation struct {
}

type CertificateRevocationListDetailsParameters struct {

	// +kubebuilder:validation:Optional
	CustomFormattedUrls []*string `json:"customFormattedUrls,omitempty" tf:"custom_formatted_urls,omitempty"`

	// +kubebuilder:validation:Required
	ObjectStorageConfig []ObjectStorageConfigParameters `json:"objectStorageConfig" tf:"object_storage_config,omitempty"`
}

type CurrentVersionObservation struct {
	CertificateAuthorityID *string `json:"certificateAuthorityId,omitempty" tf:"certificate_authority_id,omitempty"`

	IssuerCAVersionNumber *string `json:"issuerCaVersionNumber,omitempty" tf:"issuer_ca_version_number,omitempty"`

	RevocationStatus []RevocationStatusObservation `json:"revocationStatus,omitempty" tf:"revocation_status,omitempty"`

	SerialNumber *string `json:"serialNumber,omitempty" tf:"serial_number,omitempty"`

	Stages []*string `json:"stages,omitempty" tf:"stages,omitempty"`

	TimeCreated *string `json:"timeCreated,omitempty" tf:"time_created,omitempty"`

	TimeOfDeletion *string `json:"timeOfDeletion,omitempty" tf:"time_of_deletion,omitempty"`

	Validity []CurrentVersionValidityObservation `json:"validity,omitempty" tf:"validity,omitempty"`

	VersionName *string `json:"versionName,omitempty" tf:"version_name,omitempty"`

	VersionNumber *string `json:"versionNumber,omitempty" tf:"version_number,omitempty"`
}

type CurrentVersionParameters struct {
}

type CurrentVersionValidityObservation struct {
	TimeOfValidityNotAfter *string `json:"timeOfValidityNotAfter,omitempty" tf:"time_of_validity_not_after,omitempty"`

	TimeOfValidityNotBefore *string `json:"timeOfValidityNotBefore,omitempty" tf:"time_of_validity_not_before,omitempty"`
}

type CurrentVersionValidityParameters struct {
}

type ObjectStorageConfigObservation struct {
}

type ObjectStorageConfigParameters struct {

	// +kubebuilder:validation:Required
	ObjectStorageBucketName *string `json:"objectStorageBucketName" tf:"object_storage_bucket_name,omitempty"`

	// +kubebuilder:validation:Optional
	ObjectStorageNamespace *string `json:"objectStorageNamespace,omitempty" tf:"object_storage_namespace,omitempty"`

	// +kubebuilder:validation:Required
	ObjectStorageObjectNameFormat *string `json:"objectStorageObjectNameFormat" tf:"object_storage_object_name_format,omitempty"`
}

type RevocationStatusObservation struct {
	RevocationReason *string `json:"revocationReason,omitempty" tf:"revocation_reason,omitempty"`

	TimeOfRevocation *string `json:"timeOfRevocation,omitempty" tf:"time_of_revocation,omitempty"`
}

type RevocationStatusParameters struct {
}

type SubjectObservation struct {
}

type SubjectParameters struct {

	// +kubebuilder:validation:Required
	CommonName *string `json:"commonName" tf:"common_name,omitempty"`

	// +kubebuilder:validation:Optional
	Country *string `json:"country,omitempty" tf:"country,omitempty"`

	// +kubebuilder:validation:Optional
	DistinguishedNameQualifier *string `json:"distinguishedNameQualifier,omitempty" tf:"distinguished_name_qualifier,omitempty"`

	// +kubebuilder:validation:Optional
	DomainComponent *string `json:"domainComponent,omitempty" tf:"domain_component,omitempty"`

	// +kubebuilder:validation:Optional
	GenerationQualifier *string `json:"generationQualifier,omitempty" tf:"generation_qualifier,omitempty"`

	// +kubebuilder:validation:Optional
	GivenName *string `json:"givenName,omitempty" tf:"given_name,omitempty"`

	// +kubebuilder:validation:Optional
	Initials *string `json:"initials,omitempty" tf:"initials,omitempty"`

	// +kubebuilder:validation:Optional
	LocalityName *string `json:"localityName,omitempty" tf:"locality_name,omitempty"`

	// +kubebuilder:validation:Optional
	Organization *string `json:"organization,omitempty" tf:"organization,omitempty"`

	// +kubebuilder:validation:Optional
	OrganizationalUnit *string `json:"organizationalUnit,omitempty" tf:"organizational_unit,omitempty"`

	// +kubebuilder:validation:Optional
	Pseudonym *string `json:"pseudonym,omitempty" tf:"pseudonym,omitempty"`

	// +kubebuilder:validation:Optional
	SerialNumber *string `json:"serialNumber,omitempty" tf:"serial_number,omitempty"`

	// +kubebuilder:validation:Optional
	StateOrProvinceName *string `json:"stateOrProvinceName,omitempty" tf:"state_or_province_name,omitempty"`

	// +kubebuilder:validation:Optional
	Street *string `json:"street,omitempty" tf:"street,omitempty"`

	// +kubebuilder:validation:Optional
	Surname *string `json:"surname,omitempty" tf:"surname,omitempty"`

	// +kubebuilder:validation:Optional
	Title *string `json:"title,omitempty" tf:"title,omitempty"`

	// +kubebuilder:validation:Optional
	UserID *string `json:"userId,omitempty" tf:"user_id,omitempty"`
}

type ValidityObservation struct {
}

type ValidityParameters struct {

	// +kubebuilder:validation:Required
	TimeOfValidityNotAfter *string `json:"timeOfValidityNotAfter" tf:"time_of_validity_not_after,omitempty"`

	// +kubebuilder:validation:Optional
	TimeOfValidityNotBefore *string `json:"timeOfValidityNotBefore,omitempty" tf:"time_of_validity_not_before,omitempty"`
}

// CertificateAuthoritySpec defines the desired state of CertificateAuthority
type CertificateAuthoritySpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     CertificateAuthorityParameters `json:"forProvider"`
}

// CertificateAuthorityStatus defines the observed state of CertificateAuthority.
type CertificateAuthorityStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        CertificateAuthorityObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// CertificateAuthority is the Schema for the CertificateAuthoritys API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,ocijet}
type CertificateAuthority struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              CertificateAuthoritySpec   `json:"spec"`
	Status            CertificateAuthorityStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// CertificateAuthorityList contains a list of CertificateAuthoritys
type CertificateAuthorityList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []CertificateAuthority `json:"items"`
}

// Repository type metadata.
var (
	CertificateAuthority_Kind             = "CertificateAuthority"
	CertificateAuthority_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: CertificateAuthority_Kind}.String()
	CertificateAuthority_KindAPIVersion   = CertificateAuthority_Kind + "." + CRDGroupVersion.String()
	CertificateAuthority_GroupVersionKind = CRDGroupVersion.WithKind(CertificateAuthority_Kind)
)

func init() {
	SchemeBuilder.Register(&CertificateAuthority{}, &CertificateAuthorityList{})
}
