/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type AlarmObservation struct {
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	State *string `json:"state,omitempty" tf:"state,omitempty"`

	TimeCreated *string `json:"timeCreated,omitempty" tf:"time_created,omitempty"`

	TimeUpdated *string `json:"timeUpdated,omitempty" tf:"time_updated,omitempty"`
}

type AlarmParameters struct {

	// +kubebuilder:validation:Optional
	Body *string `json:"body,omitempty" tf:"body,omitempty"`

	// +crossplane:generate:reference:type=github.com/crossplane-contrib/provider-jet-oci/apis/identity/v1alpha1.Compartment
	// +kubebuilder:validation:Optional
	CompartmentID *string `json:"compartmentId,omitempty" tf:"compartment_id,omitempty"`

	// +kubebuilder:validation:Optional
	CompartmentIDRef *v1.Reference `json:"compartmentIdRef,omitempty" tf:"-"`

	// +kubebuilder:validation:Optional
	CompartmentIDSelector *v1.Selector `json:"compartmentIdSelector,omitempty" tf:"-"`

	// +kubebuilder:validation:Optional
	DefinedTags map[string]*string `json:"definedTags,omitempty" tf:"defined_tags,omitempty"`

	// +kubebuilder:validation:Required
	Destinations []*string `json:"destinations" tf:"destinations,omitempty"`

	// +kubebuilder:validation:Required
	DisplayName *string `json:"displayName" tf:"display_name,omitempty"`

	// +kubebuilder:validation:Optional
	FreeformTags map[string]*string `json:"freeformTags,omitempty" tf:"freeform_tags,omitempty"`

	// +kubebuilder:validation:Required
	IsEnabled *bool `json:"isEnabled" tf:"is_enabled,omitempty"`

	// +kubebuilder:validation:Optional
	IsNotificationsPerMetricDimensionEnabled *bool `json:"isNotificationsPerMetricDimensionEnabled,omitempty" tf:"is_notifications_per_metric_dimension_enabled,omitempty"`

	// +kubebuilder:validation:Optional
	MessageFormat *string `json:"messageFormat,omitempty" tf:"message_format,omitempty"`

	// +crossplane:generate:reference:type=github.com/crossplane-contrib/provider-jet-oci/apis/identity/v1alpha1.Compartment
	// +kubebuilder:validation:Optional
	MetricCompartmentID *string `json:"metricCompartmentId,omitempty" tf:"metric_compartment_id,omitempty"`

	// +kubebuilder:validation:Optional
	MetricCompartmentIDInSubtree *bool `json:"metricCompartmentIdInSubtree,omitempty" tf:"metric_compartment_id_in_subtree,omitempty"`

	// +kubebuilder:validation:Optional
	MetricCompartmentIDRef *v1.Reference `json:"metricCompartmentIdRef,omitempty" tf:"-"`

	// +kubebuilder:validation:Optional
	MetricCompartmentIDSelector *v1.Selector `json:"metricCompartmentIdSelector,omitempty" tf:"-"`

	// +kubebuilder:validation:Required
	Namespace *string `json:"namespace" tf:"namespace,omitempty"`

	// +kubebuilder:validation:Optional
	PendingDuration *string `json:"pendingDuration,omitempty" tf:"pending_duration,omitempty"`

	// +kubebuilder:validation:Required
	Query *string `json:"query" tf:"query,omitempty"`

	// +kubebuilder:validation:Optional
	RepeatNotificationDuration *string `json:"repeatNotificationDuration,omitempty" tf:"repeat_notification_duration,omitempty"`

	// +kubebuilder:validation:Optional
	Resolution *string `json:"resolution,omitempty" tf:"resolution,omitempty"`

	// +kubebuilder:validation:Optional
	ResourceGroup *string `json:"resourceGroup,omitempty" tf:"resource_group,omitempty"`

	// +kubebuilder:validation:Required
	Severity *string `json:"severity" tf:"severity,omitempty"`

	// +kubebuilder:validation:Optional
	Suppression []SuppressionParameters `json:"suppression,omitempty" tf:"suppression,omitempty"`
}

type SuppressionObservation struct {
}

type SuppressionParameters struct {

	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// +kubebuilder:validation:Required
	TimeSuppressFrom *string `json:"timeSuppressFrom" tf:"time_suppress_from,omitempty"`

	// +kubebuilder:validation:Required
	TimeSuppressUntil *string `json:"timeSuppressUntil" tf:"time_suppress_until,omitempty"`
}

// AlarmSpec defines the desired state of Alarm
type AlarmSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     AlarmParameters `json:"forProvider"`
}

// AlarmStatus defines the observed state of Alarm.
type AlarmStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        AlarmObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// Alarm is the Schema for the Alarms API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,ocijet}
type Alarm struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              AlarmSpec   `json:"spec"`
	Status            AlarmStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// AlarmList contains a list of Alarms
type AlarmList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []Alarm `json:"items"`
}

// Repository type metadata.
var (
	Alarm_Kind             = "Alarm"
	Alarm_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: Alarm_Kind}.String()
	Alarm_KindAPIVersion   = Alarm_Kind + "." + CRDGroupVersion.String()
	Alarm_GroupVersionKind = CRDGroupVersion.WithKind(Alarm_Kind)
)

func init() {
	SchemeBuilder.Register(&Alarm{}, &AlarmList{})
}
