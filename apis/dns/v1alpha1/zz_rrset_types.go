/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type ItemsObservation struct {
	IsProtected *bool `json:"isProtected,omitempty" tf:"is_protected,omitempty"`

	RecordHash *string `json:"recordHash,omitempty" tf:"record_hash,omitempty"`

	RrsetVersion *string `json:"rrsetVersion,omitempty" tf:"rrset_version,omitempty"`
}

type ItemsParameters struct {

	// +kubebuilder:validation:Required
	Domain *string `json:"domain" tf:"domain,omitempty"`

	// +kubebuilder:validation:Required
	Rdata *string `json:"rdata" tf:"rdata,omitempty"`

	// +kubebuilder:validation:Required
	Rtype *string `json:"rtype" tf:"rtype,omitempty"`

	// +kubebuilder:validation:Required
	TTL *float64 `json:"ttl" tf:"ttl,omitempty"`
}

type RrsetObservation struct {
	ID *string `json:"id,omitempty" tf:"id,omitempty"`
}

type RrsetParameters struct {

	// +crossplane:generate:reference:type=github.com/crossplane-contrib/provider-jet-oci/apis/identity/v1alpha1.Compartment
	// +kubebuilder:validation:Optional
	CompartmentID *string `json:"compartmentId,omitempty" tf:"compartment_id,omitempty"`

	// +kubebuilder:validation:Optional
	CompartmentIDRef *v1.Reference `json:"compartmentIdRef,omitempty" tf:"-"`

	// +kubebuilder:validation:Optional
	CompartmentIDSelector *v1.Selector `json:"compartmentIdSelector,omitempty" tf:"-"`

	// +kubebuilder:validation:Required
	Domain *string `json:"domain" tf:"domain,omitempty"`

	// +kubebuilder:validation:Optional
	Items []ItemsParameters `json:"items,omitempty" tf:"items,omitempty"`

	// +kubebuilder:validation:Required
	Rtype *string `json:"rtype" tf:"rtype,omitempty"`

	// +kubebuilder:validation:Optional
	Scope *string `json:"scope,omitempty" tf:"scope,omitempty"`

	// +kubebuilder:validation:Optional
	ViewID *string `json:"viewId,omitempty" tf:"view_id,omitempty"`

	// +kubebuilder:validation:Required
	ZoneNameOrID *string `json:"zoneNameOrId" tf:"zone_name_or_id,omitempty"`
}

// RrsetSpec defines the desired state of Rrset
type RrsetSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     RrsetParameters `json:"forProvider"`
}

// RrsetStatus defines the observed state of Rrset.
type RrsetStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        RrsetObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// Rrset is the Schema for the Rrsets API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,ocijet}
type Rrset struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              RrsetSpec   `json:"spec"`
	Status            RrsetStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// RrsetList contains a list of Rrsets
type RrsetList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []Rrset `json:"items"`
}

// Repository type metadata.
var (
	Rrset_Kind             = "Rrset"
	Rrset_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: Rrset_Kind}.String()
	Rrset_KindAPIVersion   = Rrset_Kind + "." + CRDGroupVersion.String()
	Rrset_GroupVersionKind = CRDGroupVersion.WithKind(Rrset_Kind)
)

func init() {
	SchemeBuilder.Register(&Rrset{}, &RrsetList{})
}
