/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type AttachedViewsObservation struct {
}

type AttachedViewsParameters struct {

	// +kubebuilder:validation:Required
	ViewID *string `json:"viewId" tf:"view_id,omitempty"`
}

type EndpointsObservation struct {
	CompartmentID *string `json:"compartmentId,omitempty" tf:"compartment_id,omitempty"`

	EndpointType *string `json:"endpointType,omitempty" tf:"endpoint_type,omitempty"`

	ForwardingAddress *string `json:"forwardingAddress,omitempty" tf:"forwarding_address,omitempty"`

	IsForwarding *bool `json:"isForwarding,omitempty" tf:"is_forwarding,omitempty"`

	IsListening *bool `json:"isListening,omitempty" tf:"is_listening,omitempty"`

	ListeningAddress *string `json:"listeningAddress,omitempty" tf:"listening_address,omitempty"`

	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	Self *string `json:"self,omitempty" tf:"self,omitempty"`

	State *string `json:"state,omitempty" tf:"state,omitempty"`

	SubnetID *string `json:"subnetId,omitempty" tf:"subnet_id,omitempty"`

	TimeCreated *string `json:"timeCreated,omitempty" tf:"time_created,omitempty"`

	TimeUpdated *string `json:"timeUpdated,omitempty" tf:"time_updated,omitempty"`
}

type EndpointsParameters struct {
}

type ResolverObservation struct {
	AttachedVcnID *string `json:"attachedVcnId,omitempty" tf:"attached_vcn_id,omitempty"`

	DefaultViewID *string `json:"defaultViewId,omitempty" tf:"default_view_id,omitempty"`

	Endpoints []EndpointsObservation `json:"endpoints,omitempty" tf:"endpoints,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	IsProtected *bool `json:"isProtected,omitempty" tf:"is_protected,omitempty"`

	Self *string `json:"self,omitempty" tf:"self,omitempty"`

	State *string `json:"state,omitempty" tf:"state,omitempty"`

	TimeCreated *string `json:"timeCreated,omitempty" tf:"time_created,omitempty"`

	TimeUpdated *string `json:"timeUpdated,omitempty" tf:"time_updated,omitempty"`
}

type ResolverParameters struct {

	// +kubebuilder:validation:Optional
	AttachedViews []AttachedViewsParameters `json:"attachedViews,omitempty" tf:"attached_views,omitempty"`

	// +crossplane:generate:reference:type=github.com/crossplane-contrib/provider-jet-oci/apis/identity/v1alpha1.Compartment
	// +kubebuilder:validation:Optional
	CompartmentID *string `json:"compartmentId,omitempty" tf:"compartment_id,omitempty"`

	// +kubebuilder:validation:Optional
	CompartmentIDRef *v1.Reference `json:"compartmentIdRef,omitempty" tf:"-"`

	// +kubebuilder:validation:Optional
	CompartmentIDSelector *v1.Selector `json:"compartmentIdSelector,omitempty" tf:"-"`

	// +kubebuilder:validation:Optional
	DefinedTags map[string]*string `json:"definedTags,omitempty" tf:"defined_tags,omitempty"`

	// +kubebuilder:validation:Optional
	DisplayName *string `json:"displayName,omitempty" tf:"display_name,omitempty"`

	// +kubebuilder:validation:Optional
	FreeformTags map[string]*string `json:"freeformTags,omitempty" tf:"freeform_tags,omitempty"`

	// +kubebuilder:validation:Required
	ResolverID *string `json:"resolverId" tf:"resolver_id,omitempty"`

	// +kubebuilder:validation:Optional
	Rules []RulesParameters `json:"rules,omitempty" tf:"rules,omitempty"`

	// +kubebuilder:validation:Optional
	Scope *string `json:"scope,omitempty" tf:"scope,omitempty"`
}

type RulesObservation struct {
}

type RulesParameters struct {

	// +kubebuilder:validation:Required
	Action *string `json:"action" tf:"action,omitempty"`

	// +kubebuilder:validation:Optional
	ClientAddressConditions []*string `json:"clientAddressConditions,omitempty" tf:"client_address_conditions,omitempty"`

	// +kubebuilder:validation:Required
	DestinationAddresses []*string `json:"destinationAddresses" tf:"destination_addresses,omitempty"`

	// +kubebuilder:validation:Optional
	QnameCoverConditions []*string `json:"qnameCoverConditions,omitempty" tf:"qname_cover_conditions,omitempty"`

	// +kubebuilder:validation:Required
	SourceEndpointName *string `json:"sourceEndpointName" tf:"source_endpoint_name,omitempty"`
}

// ResolverSpec defines the desired state of Resolver
type ResolverSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     ResolverParameters `json:"forProvider"`
}

// ResolverStatus defines the observed state of Resolver.
type ResolverStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        ResolverObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// Resolver is the Schema for the Resolvers API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,ocijet}
type Resolver struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              ResolverSpec   `json:"spec"`
	Status            ResolverStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// ResolverList contains a list of Resolvers
type ResolverList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []Resolver `json:"items"`
}

// Repository type metadata.
var (
	Resolver_Kind             = "Resolver"
	Resolver_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: Resolver_Kind}.String()
	Resolver_KindAPIVersion   = Resolver_Kind + "." + CRDGroupVersion.String()
	Resolver_GroupVersionKind = CRDGroupVersion.WithKind(Resolver_Kind)
)

func init() {
	SchemeBuilder.Register(&Resolver{}, &ResolverList{})
}
