/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type AnswerDataObservation struct {
}

type AnswerDataParameters struct {

	// +kubebuilder:validation:Optional
	AnswerCondition *string `json:"answerCondition,omitempty" tf:"answer_condition,omitempty"`

	// +kubebuilder:validation:Optional
	ShouldKeep *bool `json:"shouldKeep,omitempty" tf:"should_keep,omitempty"`

	// +kubebuilder:validation:Optional
	Value *float64 `json:"value,omitempty" tf:"value,omitempty"`
}

type AnswersObservation struct {
}

type AnswersParameters struct {

	// +kubebuilder:validation:Optional
	IsDisabled *bool `json:"isDisabled,omitempty" tf:"is_disabled,omitempty"`

	// +kubebuilder:validation:Required
	Name *string `json:"name" tf:"name,omitempty"`

	// +kubebuilder:validation:Optional
	Pool *string `json:"pool,omitempty" tf:"pool,omitempty"`

	// +kubebuilder:validation:Required
	Rdata *string `json:"rdata" tf:"rdata,omitempty"`

	// +kubebuilder:validation:Required
	Rtype *string `json:"rtype" tf:"rtype,omitempty"`
}

type CasesObservation struct {
}

type CasesParameters struct {

	// +kubebuilder:validation:Optional
	AnswerData []AnswerDataParameters `json:"answerData,omitempty" tf:"answer_data,omitempty"`

	// +kubebuilder:validation:Optional
	CaseCondition *string `json:"caseCondition,omitempty" tf:"case_condition,omitempty"`

	// +kubebuilder:validation:Optional
	Count *float64 `json:"count,omitempty" tf:"count,omitempty"`
}

type DefaultAnswerDataObservation struct {
}

type DefaultAnswerDataParameters struct {

	// +kubebuilder:validation:Optional
	AnswerCondition *string `json:"answerCondition,omitempty" tf:"answer_condition,omitempty"`

	// +kubebuilder:validation:Optional
	ShouldKeep *bool `json:"shouldKeep,omitempty" tf:"should_keep,omitempty"`

	// +kubebuilder:validation:Optional
	Value *float64 `json:"value,omitempty" tf:"value,omitempty"`
}

type SteeringPolicyObservation struct {
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	Self *string `json:"self,omitempty" tf:"self,omitempty"`

	State *string `json:"state,omitempty" tf:"state,omitempty"`

	TimeCreated *string `json:"timeCreated,omitempty" tf:"time_created,omitempty"`
}

type SteeringPolicyParameters struct {

	// +kubebuilder:validation:Optional
	Answers []AnswersParameters `json:"answers,omitempty" tf:"answers,omitempty"`

	// +crossplane:generate:reference:type=github.com/crossplane-contrib/provider-jet-oci/apis/identity/v1alpha1.Compartment
	// +kubebuilder:validation:Optional
	CompartmentID *string `json:"compartmentId,omitempty" tf:"compartment_id,omitempty"`

	// +kubebuilder:validation:Optional
	CompartmentIDRef *v1.Reference `json:"compartmentIdRef,omitempty" tf:"-"`

	// +kubebuilder:validation:Optional
	CompartmentIDSelector *v1.Selector `json:"compartmentIdSelector,omitempty" tf:"-"`

	// +kubebuilder:validation:Optional
	DefinedTags map[string]*string `json:"definedTags,omitempty" tf:"defined_tags,omitempty"`

	// +kubebuilder:validation:Required
	DisplayName *string `json:"displayName" tf:"display_name,omitempty"`

	// +kubebuilder:validation:Optional
	FreeformTags map[string]*string `json:"freeformTags,omitempty" tf:"freeform_tags,omitempty"`

	// +crossplane:generate:reference:type=github.com/crossplane-contrib/provider-jet-oci/apis/healthchecks/v1alpha1.HTTPMonitor
	// +kubebuilder:validation:Optional
	HealthCheckMonitorID *string `json:"healthCheckMonitorId,omitempty" tf:"health_check_monitor_id,omitempty"`

	// +kubebuilder:validation:Optional
	HealthCheckMonitorIDRef *v1.Reference `json:"healthCheckMonitorIdRef,omitempty" tf:"-"`

	// +kubebuilder:validation:Optional
	HealthCheckMonitorIDSelector *v1.Selector `json:"healthCheckMonitorIdSelector,omitempty" tf:"-"`

	// +kubebuilder:validation:Optional
	Rules []SteeringPolicyRulesParameters `json:"rules,omitempty" tf:"rules,omitempty"`

	// +kubebuilder:validation:Optional
	TTL *float64 `json:"ttl,omitempty" tf:"ttl,omitempty"`

	// +kubebuilder:validation:Required
	Template *string `json:"template" tf:"template,omitempty"`
}

type SteeringPolicyRulesObservation struct {
}

type SteeringPolicyRulesParameters struct {

	// +kubebuilder:validation:Optional
	Cases []CasesParameters `json:"cases,omitempty" tf:"cases,omitempty"`

	// +kubebuilder:validation:Optional
	DefaultAnswerData []DefaultAnswerDataParameters `json:"defaultAnswerData,omitempty" tf:"default_answer_data,omitempty"`

	// +kubebuilder:validation:Optional
	DefaultCount *float64 `json:"defaultCount,omitempty" tf:"default_count,omitempty"`

	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// +kubebuilder:validation:Required
	RuleType *string `json:"ruleType" tf:"rule_type,omitempty"`
}

// SteeringPolicySpec defines the desired state of SteeringPolicy
type SteeringPolicySpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     SteeringPolicyParameters `json:"forProvider"`
}

// SteeringPolicyStatus defines the observed state of SteeringPolicy.
type SteeringPolicyStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        SteeringPolicyObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// SteeringPolicy is the Schema for the SteeringPolicys API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,ocijet}
type SteeringPolicy struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              SteeringPolicySpec   `json:"spec"`
	Status            SteeringPolicyStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// SteeringPolicyList contains a list of SteeringPolicys
type SteeringPolicyList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []SteeringPolicy `json:"items"`
}

// Repository type metadata.
var (
	SteeringPolicy_Kind             = "SteeringPolicy"
	SteeringPolicy_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: SteeringPolicy_Kind}.String()
	SteeringPolicy_KindAPIVersion   = SteeringPolicy_Kind + "." + CRDGroupVersion.String()
	SteeringPolicy_GroupVersionKind = CRDGroupVersion.WithKind(SteeringPolicy_Kind)
)

func init() {
	SchemeBuilder.Register(&SteeringPolicy{}, &SteeringPolicyList{})
}
