/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type SteeringPolicyAttachmentObservation struct {

	// The OCID of the compartment containing the steering policy attachment.
	CompartmentID *string `json:"compartmentId,omitempty" tf:"compartment_id,omitempty"`

	// The OCID of the resource.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// The record types covered by the attachment at the domain. The set of record types is determined by aggregating the record types from the answers defined in the steering policy.
	Rtypes []*string `json:"rtypes,omitempty" tf:"rtypes,omitempty"`

	// The canonical absolute URL of the resource.
	Self *string `json:"self,omitempty" tf:"self,omitempty"`

	// The current state of the resource.
	State *string `json:"state,omitempty" tf:"state,omitempty"`

	// The date and time the resource was created, expressed in RFC 3339 timestamp format.
	TimeCreated *string `json:"timeCreated,omitempty" tf:"time_created,omitempty"`
}

type SteeringPolicyAttachmentParameters struct {

	// (Updatable) A user-friendly name for the steering policy attachment. Does not have to be unique and can be changed. Avoid entering confidential information.
	// +kubebuilder:validation:Optional
	DisplayName *string `json:"displayName,omitempty" tf:"display_name,omitempty"`

	// The attached domain within the attached zone. domain_name is case insensitive.
	// +kubebuilder:validation:Required
	DomainName *string `json:"domainName" tf:"domain_name,omitempty"`

	// The OCID of the attached steering policy.
	// +crossplane:generate:reference:type=SteeringPolicy
	// +kubebuilder:validation:Optional
	SteeringPolicyID *string `json:"steeringPolicyId,omitempty" tf:"steering_policy_id,omitempty"`

	// Reference to a SteeringPolicy to populate steeringPolicyId.
	// +kubebuilder:validation:Optional
	SteeringPolicyIDRef *v1.Reference `json:"steeringPolicyIdRef,omitempty" tf:"-"`

	// Selector for a SteeringPolicy to populate steeringPolicyId.
	// +kubebuilder:validation:Optional
	SteeringPolicyIDSelector *v1.Selector `json:"steeringPolicyIdSelector,omitempty" tf:"-"`

	// The OCID of the attached zone.
	// +crossplane:generate:reference:type=Zone
	// +kubebuilder:validation:Optional
	ZoneID *string `json:"zoneId,omitempty" tf:"zone_id,omitempty"`

	// Reference to a Zone to populate zoneId.
	// +kubebuilder:validation:Optional
	ZoneIDRef *v1.Reference `json:"zoneIdRef,omitempty" tf:"-"`

	// Selector for a Zone to populate zoneId.
	// +kubebuilder:validation:Optional
	ZoneIDSelector *v1.Selector `json:"zoneIdSelector,omitempty" tf:"-"`
}

// SteeringPolicyAttachmentSpec defines the desired state of SteeringPolicyAttachment
type SteeringPolicyAttachmentSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     SteeringPolicyAttachmentParameters `json:"forProvider"`
}

// SteeringPolicyAttachmentStatus defines the observed state of SteeringPolicyAttachment.
type SteeringPolicyAttachmentStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        SteeringPolicyAttachmentObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// SteeringPolicyAttachment is the Schema for the SteeringPolicyAttachments API. Provides the Steering Policy Attachment resource in Oracle Cloud Infrastructure DNS service
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,oci}
type SteeringPolicyAttachment struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              SteeringPolicyAttachmentSpec   `json:"spec"`
	Status            SteeringPolicyAttachmentStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// SteeringPolicyAttachmentList contains a list of SteeringPolicyAttachments
type SteeringPolicyAttachmentList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []SteeringPolicyAttachment `json:"items"`
}

// Repository type metadata.
var (
	SteeringPolicyAttachment_Kind             = "SteeringPolicyAttachment"
	SteeringPolicyAttachment_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: SteeringPolicyAttachment_Kind}.String()
	SteeringPolicyAttachment_KindAPIVersion   = SteeringPolicyAttachment_Kind + "." + CRDGroupVersion.String()
	SteeringPolicyAttachment_GroupVersionKind = CRDGroupVersion.WithKind(SteeringPolicyAttachment_Kind)
)

func init() {
	SchemeBuilder.Register(&SteeringPolicyAttachment{}, &SteeringPolicyAttachmentList{})
}
