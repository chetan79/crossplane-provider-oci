/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type CustomEncryptionKeyObservation struct {
	KeyState *string `json:"keyState,omitempty" tf:"key_state,omitempty"`
}

type CustomEncryptionKeyParameters struct {

	// +crossplane:generate:reference:type=github.com/crossplane-contrib/provider-jet-oci/apis/kms/v1alpha1.Key
	// +kubebuilder:validation:Optional
	KMSKeyID *string `json:"kmsKeyId,omitempty" tf:"kms_key_id,omitempty"`

	// +kubebuilder:validation:Optional
	KMSKeyIDRef *v1.Reference `json:"kmsKeyIdRef,omitempty" tf:"-"`

	// +kubebuilder:validation:Optional
	KMSKeyIDSelector *v1.Selector `json:"kmsKeyIdSelector,omitempty" tf:"-"`
}

type KafkaSettingsObservation struct {
	BootstrapServers *string `json:"bootstrapServers,omitempty" tf:"bootstrap_servers,omitempty"`
}

type KafkaSettingsParameters struct {

	// +kubebuilder:validation:Optional
	AutoCreateTopicsEnable *bool `json:"autoCreateTopicsEnable,omitempty" tf:"auto_create_topics_enable,omitempty"`

	// +kubebuilder:validation:Optional
	LogRetentionHours *float64 `json:"logRetentionHours,omitempty" tf:"log_retention_hours,omitempty"`

	// +kubebuilder:validation:Optional
	NumPartitions *float64 `json:"numPartitions,omitempty" tf:"num_partitions,omitempty"`
}

type PrivateEndpointSettingsObservation struct {
}

type PrivateEndpointSettingsParameters struct {

	// +crossplane:generate:reference:type=github.com/crossplane-contrib/provider-jet-oci/apis/core/v1alpha1.NetworkSecurityGroup
	// +kubebuilder:validation:Optional
	NsgIds []*string `json:"nsgIds,omitempty" tf:"nsg_ids,omitempty"`

	// +kubebuilder:validation:Optional
	NsgIdsRefs []v1.Reference `json:"nsgIdsRefs,omitempty" tf:"-"`

	// +kubebuilder:validation:Optional
	NsgIdsSelector *v1.Selector `json:"nsgIdsSelector,omitempty" tf:"-"`

	// +crossplane:generate:reference:type=github.com/crossplane-contrib/provider-jet-oci/apis/core/v1alpha1.PrivateIp
	// +kubebuilder:validation:Optional
	PrivateEndpointIP *string `json:"privateEndpointIp,omitempty" tf:"private_endpoint_ip,omitempty"`

	// +kubebuilder:validation:Optional
	PrivateEndpointIPRef *v1.Reference `json:"privateEndpointIpRef,omitempty" tf:"-"`

	// +kubebuilder:validation:Optional
	PrivateEndpointIPSelector *v1.Selector `json:"privateEndpointIpSelector,omitempty" tf:"-"`

	// +crossplane:generate:reference:type=github.com/crossplane-contrib/provider-jet-oci/apis/core/v1alpha1.Subnet
	// +kubebuilder:validation:Optional
	SubnetID *string `json:"subnetId,omitempty" tf:"subnet_id,omitempty"`

	// +kubebuilder:validation:Optional
	SubnetIDRef *v1.Reference `json:"subnetIdRef,omitempty" tf:"-"`

	// +kubebuilder:validation:Optional
	SubnetIDSelector *v1.Selector `json:"subnetIdSelector,omitempty" tf:"-"`
}

type StreamPoolObservation struct {
	EndpointFqdn *string `json:"endpointFqdn,omitempty" tf:"endpoint_fqdn,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	IsPrivate *bool `json:"isPrivate,omitempty" tf:"is_private,omitempty"`

	LifecycleStateDetails *string `json:"lifecycleStateDetails,omitempty" tf:"lifecycle_state_details,omitempty"`

	State *string `json:"state,omitempty" tf:"state,omitempty"`

	TimeCreated *string `json:"timeCreated,omitempty" tf:"time_created,omitempty"`
}

type StreamPoolParameters struct {

	// +crossplane:generate:reference:type=github.com/crossplane-contrib/provider-jet-oci/apis/identity/v1alpha1.Compartment
	// +kubebuilder:validation:Optional
	CompartmentID *string `json:"compartmentId,omitempty" tf:"compartment_id,omitempty"`

	// +kubebuilder:validation:Optional
	CompartmentIDRef *v1.Reference `json:"compartmentIdRef,omitempty" tf:"-"`

	// +kubebuilder:validation:Optional
	CompartmentIDSelector *v1.Selector `json:"compartmentIdSelector,omitempty" tf:"-"`

	// +kubebuilder:validation:Optional
	CustomEncryptionKey []CustomEncryptionKeyParameters `json:"customEncryptionKey,omitempty" tf:"custom_encryption_key,omitempty"`

	// +kubebuilder:validation:Optional
	DefinedTags map[string]*string `json:"definedTags,omitempty" tf:"defined_tags,omitempty"`

	// +kubebuilder:validation:Optional
	FreeformTags map[string]*string `json:"freeformTags,omitempty" tf:"freeform_tags,omitempty"`

	// +kubebuilder:validation:Optional
	KafkaSettings []KafkaSettingsParameters `json:"kafkaSettings,omitempty" tf:"kafka_settings,omitempty"`

	// +kubebuilder:validation:Required
	Name *string `json:"name" tf:"name,omitempty"`

	// +kubebuilder:validation:Optional
	PrivateEndpointSettings []PrivateEndpointSettingsParameters `json:"privateEndpointSettings,omitempty" tf:"private_endpoint_settings,omitempty"`
}

// StreamPoolSpec defines the desired state of StreamPool
type StreamPoolSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     StreamPoolParameters `json:"forProvider"`
}

// StreamPoolStatus defines the observed state of StreamPool.
type StreamPoolStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        StreamPoolObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// StreamPool is the Schema for the StreamPools API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,ocijet}
type StreamPool struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              StreamPoolSpec   `json:"spec"`
	Status            StreamPoolStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// StreamPoolList contains a list of StreamPools
type StreamPoolList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []StreamPool `json:"items"`
}

// Repository type metadata.
var (
	StreamPool_Kind             = "StreamPool"
	StreamPool_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: StreamPool_Kind}.String()
	StreamPool_KindAPIVersion   = StreamPool_Kind + "." + CRDGroupVersion.String()
	StreamPool_GroupVersionKind = CRDGroupVersion.WithKind(StreamPool_Kind)
)

func init() {
	SchemeBuilder.Register(&StreamPool{}, &StreamPoolList{})
}
