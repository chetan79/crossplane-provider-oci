/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type ConnectHarnessObservation struct {
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	LifecycleStateDetails *string `json:"lifecycleStateDetails,omitempty" tf:"lifecycle_state_details,omitempty"`

	State *string `json:"state,omitempty" tf:"state,omitempty"`

	TimeCreated *string `json:"timeCreated,omitempty" tf:"time_created,omitempty"`
}

type ConnectHarnessParameters struct {

	// +crossplane:generate:reference:type=github.com/crossplane-contrib/provider-jet-oci/apis/identity/v1alpha1.Compartment
	// +kubebuilder:validation:Optional
	CompartmentID *string `json:"compartmentId,omitempty" tf:"compartment_id,omitempty"`

	// +kubebuilder:validation:Optional
	CompartmentIDRef *v1.Reference `json:"compartmentIdRef,omitempty" tf:"-"`

	// +kubebuilder:validation:Optional
	CompartmentIDSelector *v1.Selector `json:"compartmentIdSelector,omitempty" tf:"-"`

	// +kubebuilder:validation:Optional
	DefinedTags map[string]*string `json:"definedTags,omitempty" tf:"defined_tags,omitempty"`

	// +kubebuilder:validation:Optional
	FreeformTags map[string]*string `json:"freeformTags,omitempty" tf:"freeform_tags,omitempty"`

	// +kubebuilder:validation:Required
	Name *string `json:"name" tf:"name,omitempty"`
}

// ConnectHarnessSpec defines the desired state of ConnectHarness
type ConnectHarnessSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     ConnectHarnessParameters `json:"forProvider"`
}

// ConnectHarnessStatus defines the observed state of ConnectHarness.
type ConnectHarnessStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        ConnectHarnessObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// ConnectHarness is the Schema for the ConnectHarnesss API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,ocijet}
type ConnectHarness struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              ConnectHarnessSpec   `json:"spec"`
	Status            ConnectHarnessStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// ConnectHarnessList contains a list of ConnectHarnesss
type ConnectHarnessList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []ConnectHarness `json:"items"`
}

// Repository type metadata.
var (
	ConnectHarness_Kind             = "ConnectHarness"
	ConnectHarness_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: ConnectHarness_Kind}.String()
	ConnectHarness_KindAPIVersion   = ConnectHarness_Kind + "." + CRDGroupVersion.String()
	ConnectHarness_GroupVersionKind = CRDGroupVersion.WithKind(ConnectHarness_Kind)
)

func init() {
	SchemeBuilder.Register(&ConnectHarness{}, &ConnectHarnessList{})
}
