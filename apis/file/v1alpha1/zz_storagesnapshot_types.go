/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type StorageSnapshotObservation struct {
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	IsCloneSource *bool `json:"isCloneSource,omitempty" tf:"is_clone_source,omitempty"`

	LifecycleDetails *string `json:"lifecycleDetails,omitempty" tf:"lifecycle_details,omitempty"`

	ProvenanceID *string `json:"provenanceId,omitempty" tf:"provenance_id,omitempty"`

	SnapshotTime *string `json:"snapshotTime,omitempty" tf:"snapshot_time,omitempty"`

	SnapshotType *string `json:"snapshotType,omitempty" tf:"snapshot_type,omitempty"`

	State *string `json:"state,omitempty" tf:"state,omitempty"`

	TimeCreated *string `json:"timeCreated,omitempty" tf:"time_created,omitempty"`
}

type StorageSnapshotParameters struct {

	// +kubebuilder:validation:Optional
	DefinedTags map[string]*string `json:"definedTags,omitempty" tf:"defined_tags,omitempty"`

	// +crossplane:generate:reference:type=StorageFileSystem
	// +kubebuilder:validation:Optional
	FileSystemID *string `json:"fileSystemId,omitempty" tf:"file_system_id,omitempty"`

	// +kubebuilder:validation:Optional
	FileSystemIDRef *v1.Reference `json:"fileSystemIdRef,omitempty" tf:"-"`

	// +kubebuilder:validation:Optional
	FileSystemIDSelector *v1.Selector `json:"fileSystemIdSelector,omitempty" tf:"-"`

	// +kubebuilder:validation:Optional
	FreeformTags map[string]*string `json:"freeformTags,omitempty" tf:"freeform_tags,omitempty"`

	// +kubebuilder:validation:Required
	Name *string `json:"name" tf:"name,omitempty"`
}

// StorageSnapshotSpec defines the desired state of StorageSnapshot
type StorageSnapshotSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     StorageSnapshotParameters `json:"forProvider"`
}

// StorageSnapshotStatus defines the observed state of StorageSnapshot.
type StorageSnapshotStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        StorageSnapshotObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// StorageSnapshot is the Schema for the StorageSnapshots API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,ocijet}
type StorageSnapshot struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              StorageSnapshotSpec   `json:"spec"`
	Status            StorageSnapshotStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// StorageSnapshotList contains a list of StorageSnapshots
type StorageSnapshotList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []StorageSnapshot `json:"items"`
}

// Repository type metadata.
var (
	StorageSnapshot_Kind             = "StorageSnapshot"
	StorageSnapshot_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: StorageSnapshot_Kind}.String()
	StorageSnapshot_KindAPIVersion   = StorageSnapshot_Kind + "." + CRDGroupVersion.String()
	StorageSnapshot_GroupVersionKind = CRDGroupVersion.WithKind(StorageSnapshot_Kind)
)

func init() {
	SchemeBuilder.Register(&StorageSnapshot{}, &StorageSnapshotList{})
}
