/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type StorageReplicationObservation struct {
	AvailabilityDomain *string `json:"availabilityDomain,omitempty" tf:"availability_domain,omitempty"`

	DeltaProgress *string `json:"deltaProgress,omitempty" tf:"delta_progress,omitempty"`

	DeltaStatus *string `json:"deltaStatus,omitempty" tf:"delta_status,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	LastSnapshotID *string `json:"lastSnapshotId,omitempty" tf:"last_snapshot_id,omitempty"`

	LifecycleDetails *string `json:"lifecycleDetails,omitempty" tf:"lifecycle_details,omitempty"`

	RecoveryPointTime *string `json:"recoveryPointTime,omitempty" tf:"recovery_point_time,omitempty"`

	ReplicationTargetID *string `json:"replicationTargetId,omitempty" tf:"replication_target_id,omitempty"`

	State *string `json:"state,omitempty" tf:"state,omitempty"`

	TimeCreated *string `json:"timeCreated,omitempty" tf:"time_created,omitempty"`
}

type StorageReplicationParameters struct {

	// +crossplane:generate:reference:type=github.com/crossplane-contrib/provider-jet-oci/apis/identity/v1alpha1.Compartment
	// +kubebuilder:validation:Optional
	CompartmentID *string `json:"compartmentId,omitempty" tf:"compartment_id,omitempty"`

	// +kubebuilder:validation:Optional
	CompartmentIDRef *v1.Reference `json:"compartmentIdRef,omitempty" tf:"-"`

	// +kubebuilder:validation:Optional
	CompartmentIDSelector *v1.Selector `json:"compartmentIdSelector,omitempty" tf:"-"`

	// +kubebuilder:validation:Optional
	DefinedTags map[string]*string `json:"definedTags,omitempty" tf:"defined_tags,omitempty"`

	// +kubebuilder:validation:Optional
	DisplayName *string `json:"displayName,omitempty" tf:"display_name,omitempty"`

	// +kubebuilder:validation:Optional
	FreeformTags map[string]*string `json:"freeformTags,omitempty" tf:"freeform_tags,omitempty"`

	// +kubebuilder:validation:Optional
	ReplicationInterval *string `json:"replicationInterval,omitempty" tf:"replication_interval,omitempty"`

	// +crossplane:generate:reference:type=StorageFileSystem
	// +kubebuilder:validation:Optional
	SourceID *string `json:"sourceId,omitempty" tf:"source_id,omitempty"`

	// +kubebuilder:validation:Optional
	SourceIDRef *v1.Reference `json:"sourceIdRef,omitempty" tf:"-"`

	// +kubebuilder:validation:Optional
	SourceIDSelector *v1.Selector `json:"sourceIdSelector,omitempty" tf:"-"`

	// +crossplane:generate:reference:type=StorageFileSystem
	// +kubebuilder:validation:Optional
	TargetID *string `json:"targetId,omitempty" tf:"target_id,omitempty"`

	// +kubebuilder:validation:Optional
	TargetIDRef *v1.Reference `json:"targetIdRef,omitempty" tf:"-"`

	// +kubebuilder:validation:Optional
	TargetIDSelector *v1.Selector `json:"targetIdSelector,omitempty" tf:"-"`
}

// StorageReplicationSpec defines the desired state of StorageReplication
type StorageReplicationSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     StorageReplicationParameters `json:"forProvider"`
}

// StorageReplicationStatus defines the observed state of StorageReplication.
type StorageReplicationStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        StorageReplicationObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// StorageReplication is the Schema for the StorageReplications API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,ocijet}
type StorageReplication struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              StorageReplicationSpec   `json:"spec"`
	Status            StorageReplicationStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// StorageReplicationList contains a list of StorageReplications
type StorageReplicationList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []StorageReplication `json:"items"`
}

// Repository type metadata.
var (
	StorageReplication_Kind             = "StorageReplication"
	StorageReplication_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: StorageReplication_Kind}.String()
	StorageReplication_KindAPIVersion   = StorageReplication_Kind + "." + CRDGroupVersion.String()
	StorageReplication_GroupVersionKind = CRDGroupVersion.WithKind(StorageReplication_Kind)
)

func init() {
	SchemeBuilder.Register(&StorageReplication{}, &StorageReplicationList{})
}
