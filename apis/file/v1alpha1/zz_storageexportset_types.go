/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type StorageExportSetObservation struct {
	AvailabilityDomain *string `json:"availabilityDomain,omitempty" tf:"availability_domain,omitempty"`

	CompartmentID *string `json:"compartmentId,omitempty" tf:"compartment_id,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	State *string `json:"state,omitempty" tf:"state,omitempty"`

	TimeCreated *string `json:"timeCreated,omitempty" tf:"time_created,omitempty"`

	VcnID *string `json:"vcnId,omitempty" tf:"vcn_id,omitempty"`
}

type StorageExportSetParameters struct {

	// +kubebuilder:validation:Optional
	DisplayName *string `json:"displayName,omitempty" tf:"display_name,omitempty"`

	// +kubebuilder:validation:Optional
	MaxFsStatBytes *string `json:"maxFsStatBytes,omitempty" tf:"max_fs_stat_bytes,omitempty"`

	// +kubebuilder:validation:Optional
	MaxFsStatFiles *string `json:"maxFsStatFiles,omitempty" tf:"max_fs_stat_files,omitempty"`

	// +crossplane:generate:reference:type=StorageMountTarget
	// +kubebuilder:validation:Optional
	MountTargetID *string `json:"mountTargetId,omitempty" tf:"mount_target_id,omitempty"`

	// +kubebuilder:validation:Optional
	MountTargetIDRef *v1.Reference `json:"mountTargetIdRef,omitempty" tf:"-"`

	// +kubebuilder:validation:Optional
	MountTargetIDSelector *v1.Selector `json:"mountTargetIdSelector,omitempty" tf:"-"`
}

// StorageExportSetSpec defines the desired state of StorageExportSet
type StorageExportSetSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     StorageExportSetParameters `json:"forProvider"`
}

// StorageExportSetStatus defines the observed state of StorageExportSet.
type StorageExportSetStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        StorageExportSetObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// StorageExportSet is the Schema for the StorageExportSets API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,ocijet}
type StorageExportSet struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              StorageExportSetSpec   `json:"spec"`
	Status            StorageExportSetStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// StorageExportSetList contains a list of StorageExportSets
type StorageExportSetList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []StorageExportSet `json:"items"`
}

// Repository type metadata.
var (
	StorageExportSet_Kind             = "StorageExportSet"
	StorageExportSet_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: StorageExportSet_Kind}.String()
	StorageExportSet_KindAPIVersion   = StorageExportSet_Kind + "." + CRDGroupVersion.String()
	StorageExportSet_GroupVersionKind = CRDGroupVersion.WithKind(StorageExportSet_Kind)
)

func init() {
	SchemeBuilder.Register(&StorageExportSet{}, &StorageExportSetList{})
}
