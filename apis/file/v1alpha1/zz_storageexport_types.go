/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type ExportOptionsObservation struct {
}

type ExportOptionsParameters struct {

	// +kubebuilder:validation:Optional
	Access *string `json:"access,omitempty" tf:"access,omitempty"`

	// +kubebuilder:validation:Optional
	AnonymousGID *string `json:"anonymousGid,omitempty" tf:"anonymous_gid,omitempty"`

	// +kubebuilder:validation:Optional
	AnonymousUID *string `json:"anonymousUid,omitempty" tf:"anonymous_uid,omitempty"`

	// +kubebuilder:validation:Optional
	IdentitySquash *string `json:"identitySquash,omitempty" tf:"identity_squash,omitempty"`

	// +kubebuilder:validation:Optional
	RequirePrivilegedSourcePort *bool `json:"requirePrivilegedSourcePort,omitempty" tf:"require_privileged_source_port,omitempty"`

	// +kubebuilder:validation:Required
	Source *string `json:"source" tf:"source,omitempty"`
}

type StorageExportObservation struct {
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	State *string `json:"state,omitempty" tf:"state,omitempty"`

	TimeCreated *string `json:"timeCreated,omitempty" tf:"time_created,omitempty"`
}

type StorageExportParameters struct {

	// +kubebuilder:validation:Optional
	ExportOptions []ExportOptionsParameters `json:"exportOptions,omitempty" tf:"export_options,omitempty"`

	// +crossplane:generate:reference:type=StorageExportSet
	// +kubebuilder:validation:Optional
	ExportSetID *string `json:"exportSetId,omitempty" tf:"export_set_id,omitempty"`

	// +kubebuilder:validation:Optional
	ExportSetIDRef *v1.Reference `json:"exportSetIdRef,omitempty" tf:"-"`

	// +kubebuilder:validation:Optional
	ExportSetIDSelector *v1.Selector `json:"exportSetIdSelector,omitempty" tf:"-"`

	// +crossplane:generate:reference:type=StorageFileSystem
	// +kubebuilder:validation:Optional
	FileSystemID *string `json:"fileSystemId,omitempty" tf:"file_system_id,omitempty"`

	// +kubebuilder:validation:Optional
	FileSystemIDRef *v1.Reference `json:"fileSystemIdRef,omitempty" tf:"-"`

	// +kubebuilder:validation:Optional
	FileSystemIDSelector *v1.Selector `json:"fileSystemIdSelector,omitempty" tf:"-"`

	// +kubebuilder:validation:Required
	Path *string `json:"path" tf:"path,omitempty"`
}

// StorageExportSpec defines the desired state of StorageExport
type StorageExportSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     StorageExportParameters `json:"forProvider"`
}

// StorageExportStatus defines the observed state of StorageExport.
type StorageExportStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        StorageExportObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// StorageExport is the Schema for the StorageExports API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,ocijet}
type StorageExport struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              StorageExportSpec   `json:"spec"`
	Status            StorageExportStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// StorageExportList contains a list of StorageExports
type StorageExportList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []StorageExport `json:"items"`
}

// Repository type metadata.
var (
	StorageExport_Kind             = "StorageExport"
	StorageExport_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: StorageExport_Kind}.String()
	StorageExport_KindAPIVersion   = StorageExport_Kind + "." + CRDGroupVersion.String()
	StorageExport_GroupVersionKind = CRDGroupVersion.WithKind(StorageExport_Kind)
)

func init() {
	SchemeBuilder.Register(&StorageExport{}, &StorageExportList{})
}
