/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type SourceDetailsObservation struct {
	ParentFileSystemID *string `json:"parentFileSystemId,omitempty" tf:"parent_file_system_id,omitempty"`

	SourceSnapshotID *string `json:"sourceSnapshotId,omitempty" tf:"source_snapshot_id,omitempty"`
}

type SourceDetailsParameters struct {
}

type StorageFileSystemObservation struct {
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	IsCloneParent *bool `json:"isCloneParent,omitempty" tf:"is_clone_parent,omitempty"`

	IsHydrated *bool `json:"isHydrated,omitempty" tf:"is_hydrated,omitempty"`

	IsTargetable *bool `json:"isTargetable,omitempty" tf:"is_targetable,omitempty"`

	LifecycleDetails *string `json:"lifecycleDetails,omitempty" tf:"lifecycle_details,omitempty"`

	MeteredBytes *string `json:"meteredBytes,omitempty" tf:"metered_bytes,omitempty"`

	ReplicationTargetID *string `json:"replicationTargetId,omitempty" tf:"replication_target_id,omitempty"`

	SourceDetails []SourceDetailsObservation `json:"sourceDetails,omitempty" tf:"source_details,omitempty"`

	State *string `json:"state,omitempty" tf:"state,omitempty"`

	TimeCreated *string `json:"timeCreated,omitempty" tf:"time_created,omitempty"`
}

type StorageFileSystemParameters struct {

	// +kubebuilder:validation:Required
	AvailabilityDomain *string `json:"availabilityDomain" tf:"availability_domain,omitempty"`

	// +crossplane:generate:reference:type=github.com/crossplane-contrib/provider-jet-oci/apis/identity/v1alpha1.Compartment
	// +kubebuilder:validation:Optional
	CompartmentID *string `json:"compartmentId,omitempty" tf:"compartment_id,omitempty"`

	// +kubebuilder:validation:Optional
	CompartmentIDRef *v1.Reference `json:"compartmentIdRef,omitempty" tf:"-"`

	// +kubebuilder:validation:Optional
	CompartmentIDSelector *v1.Selector `json:"compartmentIdSelector,omitempty" tf:"-"`

	// +kubebuilder:validation:Optional
	DefinedTags map[string]*string `json:"definedTags,omitempty" tf:"defined_tags,omitempty"`

	// +kubebuilder:validation:Optional
	DisplayName *string `json:"displayName,omitempty" tf:"display_name,omitempty"`

	// +kubebuilder:validation:Optional
	FreeformTags map[string]*string `json:"freeformTags,omitempty" tf:"freeform_tags,omitempty"`

	// +kubebuilder:validation:Optional
	KMSKeyID *string `json:"kmsKeyId,omitempty" tf:"kms_key_id,omitempty"`

	// +kubebuilder:validation:Optional
	SourceSnapshotID *string `json:"sourceSnapshotId,omitempty" tf:"source_snapshot_id,omitempty"`
}

// StorageFileSystemSpec defines the desired state of StorageFileSystem
type StorageFileSystemSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     StorageFileSystemParameters `json:"forProvider"`
}

// StorageFileSystemStatus defines the observed state of StorageFileSystem.
type StorageFileSystemStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        StorageFileSystemObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// StorageFileSystem is the Schema for the StorageFileSystems API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,ocijet}
type StorageFileSystem struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              StorageFileSystemSpec   `json:"spec"`
	Status            StorageFileSystemStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// StorageFileSystemList contains a list of StorageFileSystems
type StorageFileSystemList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []StorageFileSystem `json:"items"`
}

// Repository type metadata.
var (
	StorageFileSystem_Kind             = "StorageFileSystem"
	StorageFileSystem_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: StorageFileSystem_Kind}.String()
	StorageFileSystem_KindAPIVersion   = StorageFileSystem_Kind + "." + CRDGroupVersion.String()
	StorageFileSystem_GroupVersionKind = CRDGroupVersion.WithKind(StorageFileSystem_Kind)
)

func init() {
	SchemeBuilder.Register(&StorageFileSystem{}, &StorageFileSystemList{})
}
