/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type BalancerRuleSetObservation struct {
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	State *string `json:"state,omitempty" tf:"state,omitempty"`
}

type BalancerRuleSetParameters struct {

	// +kubebuilder:validation:Required
	Items []ItemsParameters `json:"items" tf:"items,omitempty"`

	// +crossplane:generate:reference:type=BalancerLoadBalancer
	// +kubebuilder:validation:Optional
	LoadBalancerID *string `json:"loadBalancerId,omitempty" tf:"load_balancer_id,omitempty"`

	// +kubebuilder:validation:Optional
	LoadBalancerIDRef *v1.Reference `json:"loadBalancerIdRef,omitempty" tf:"-"`

	// +kubebuilder:validation:Optional
	LoadBalancerIDSelector *v1.Selector `json:"loadBalancerIdSelector,omitempty" tf:"-"`

	// +kubebuilder:validation:Required
	Name *string `json:"name" tf:"name,omitempty"`
}

type ConditionsObservation struct {
}

type ConditionsParameters struct {

	// +kubebuilder:validation:Required
	AttributeName *string `json:"attributeName" tf:"attribute_name,omitempty"`

	// +kubebuilder:validation:Required
	AttributeValue *string `json:"attributeValue" tf:"attribute_value,omitempty"`

	// +kubebuilder:validation:Optional
	Operator *string `json:"operator,omitempty" tf:"operator,omitempty"`
}

type ItemsObservation struct {
}

type ItemsParameters struct {

	// +kubebuilder:validation:Required
	Action *string `json:"action" tf:"action,omitempty"`

	// +kubebuilder:validation:Optional
	AllowedMethods []*string `json:"allowedMethods,omitempty" tf:"allowed_methods,omitempty"`

	// +kubebuilder:validation:Optional
	AreInvalidCharactersAllowed *bool `json:"areInvalidCharactersAllowed,omitempty" tf:"are_invalid_characters_allowed,omitempty"`

	// +kubebuilder:validation:Optional
	Conditions []ConditionsParameters `json:"conditions,omitempty" tf:"conditions,omitempty"`

	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// +kubebuilder:validation:Optional
	HTTPLargeHeaderSizeInKb *float64 `json:"httpLargeHeaderSizeInKb,omitempty" tf:"http_large_header_size_in_kb,omitempty"`

	// +kubebuilder:validation:Optional
	Header *string `json:"header,omitempty" tf:"header,omitempty"`

	// +kubebuilder:validation:Optional
	Prefix *string `json:"prefix,omitempty" tf:"prefix,omitempty"`

	// +kubebuilder:validation:Optional
	RedirectURI []RedirectURIParameters `json:"redirectUri,omitempty" tf:"redirect_uri,omitempty"`

	// +kubebuilder:validation:Optional
	ResponseCode *float64 `json:"responseCode,omitempty" tf:"response_code,omitempty"`

	// +kubebuilder:validation:Optional
	StatusCode *float64 `json:"statusCode,omitempty" tf:"status_code,omitempty"`

	// +kubebuilder:validation:Optional
	Suffix *string `json:"suffix,omitempty" tf:"suffix,omitempty"`

	// +kubebuilder:validation:Optional
	Value *string `json:"value,omitempty" tf:"value,omitempty"`
}

type RedirectURIObservation struct {
}

type RedirectURIParameters struct {

	// +kubebuilder:validation:Optional
	Host *string `json:"host,omitempty" tf:"host,omitempty"`

	// +kubebuilder:validation:Optional
	Path *string `json:"path,omitempty" tf:"path,omitempty"`

	// +kubebuilder:validation:Optional
	Port *float64 `json:"port,omitempty" tf:"port,omitempty"`

	// +kubebuilder:validation:Optional
	Protocol *string `json:"protocol,omitempty" tf:"protocol,omitempty"`

	// +kubebuilder:validation:Optional
	Query *string `json:"query,omitempty" tf:"query,omitempty"`
}

// BalancerRuleSetSpec defines the desired state of BalancerRuleSet
type BalancerRuleSetSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     BalancerRuleSetParameters `json:"forProvider"`
}

// BalancerRuleSetStatus defines the observed state of BalancerRuleSet.
type BalancerRuleSetStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        BalancerRuleSetObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// BalancerRuleSet is the Schema for the BalancerRuleSets API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,ocijet}
type BalancerRuleSet struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              BalancerRuleSetSpec   `json:"spec"`
	Status            BalancerRuleSetStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// BalancerRuleSetList contains a list of BalancerRuleSets
type BalancerRuleSetList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []BalancerRuleSet `json:"items"`
}

// Repository type metadata.
var (
	BalancerRuleSet_Kind             = "BalancerRuleSet"
	BalancerRuleSet_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: BalancerRuleSet_Kind}.String()
	BalancerRuleSet_KindAPIVersion   = BalancerRuleSet_Kind + "." + CRDGroupVersion.String()
	BalancerRuleSet_GroupVersionKind = CRDGroupVersion.WithKind(BalancerRuleSet_Kind)
)

func init() {
	SchemeBuilder.Register(&BalancerRuleSet{}, &BalancerRuleSetList{})
}
