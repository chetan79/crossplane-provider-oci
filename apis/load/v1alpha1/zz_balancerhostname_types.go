/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type BalancerHostnameObservation struct {
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	State *string `json:"state,omitempty" tf:"state,omitempty"`
}

type BalancerHostnameParameters struct {

	// +kubebuilder:validation:Required
	Hostname *string `json:"hostname" tf:"hostname,omitempty"`

	// +crossplane:generate:reference:type=BalancerLoadBalancer
	// +kubebuilder:validation:Optional
	LoadBalancerID *string `json:"loadBalancerId,omitempty" tf:"load_balancer_id,omitempty"`

	// +kubebuilder:validation:Optional
	LoadBalancerIDRef *v1.Reference `json:"loadBalancerIdRef,omitempty" tf:"-"`

	// +kubebuilder:validation:Optional
	LoadBalancerIDSelector *v1.Selector `json:"loadBalancerIdSelector,omitempty" tf:"-"`

	// +kubebuilder:validation:Required
	Name *string `json:"name" tf:"name,omitempty"`
}

// BalancerHostnameSpec defines the desired state of BalancerHostname
type BalancerHostnameSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     BalancerHostnameParameters `json:"forProvider"`
}

// BalancerHostnameStatus defines the observed state of BalancerHostname.
type BalancerHostnameStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        BalancerHostnameObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// BalancerHostname is the Schema for the BalancerHostnames API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,ocijet}
type BalancerHostname struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              BalancerHostnameSpec   `json:"spec"`
	Status            BalancerHostnameStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// BalancerHostnameList contains a list of BalancerHostnames
type BalancerHostnameList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []BalancerHostname `json:"items"`
}

// Repository type metadata.
var (
	BalancerHostname_Kind             = "BalancerHostname"
	BalancerHostname_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: BalancerHostname_Kind}.String()
	BalancerHostname_KindAPIVersion   = BalancerHostname_Kind + "." + CRDGroupVersion.String()
	BalancerHostname_GroupVersionKind = CRDGroupVersion.WithKind(BalancerHostname_Kind)
)

func init() {
	SchemeBuilder.Register(&BalancerHostname{}, &BalancerHostnameList{})
}
