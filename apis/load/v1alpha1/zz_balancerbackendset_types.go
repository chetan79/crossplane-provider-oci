/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type BackendObservation struct {
	Backup *bool `json:"backup,omitempty" tf:"backup,omitempty"`

	Drain *bool `json:"drain,omitempty" tf:"drain,omitempty"`

	IPAddress *string `json:"ipAddress,omitempty" tf:"ip_address,omitempty"`

	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	Offline *bool `json:"offline,omitempty" tf:"offline,omitempty"`

	Port *float64 `json:"port,omitempty" tf:"port,omitempty"`

	Weight *float64 `json:"weight,omitempty" tf:"weight,omitempty"`
}

type BackendParameters struct {
}

type BalancerBackendSetObservation struct {
	Backend []BackendObservation `json:"backend,omitempty" tf:"backend,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	State *string `json:"state,omitempty" tf:"state,omitempty"`
}

type BalancerBackendSetParameters struct {

	// +kubebuilder:validation:Required
	HealthChecker []HealthCheckerParameters `json:"healthChecker" tf:"health_checker,omitempty"`

	// +kubebuilder:validation:Optional
	LBCookieSessionPersistenceConfiguration []LBCookieSessionPersistenceConfigurationParameters `json:"lbCookieSessionPersistenceConfiguration,omitempty" tf:"lb_cookie_session_persistence_configuration,omitempty"`

	// +crossplane:generate:reference:type=BalancerLoadBalancer
	// +kubebuilder:validation:Optional
	LoadBalancerID *string `json:"loadBalancerId,omitempty" tf:"load_balancer_id,omitempty"`

	// +kubebuilder:validation:Optional
	LoadBalancerIDRef *v1.Reference `json:"loadBalancerIdRef,omitempty" tf:"-"`

	// +kubebuilder:validation:Optional
	LoadBalancerIDSelector *v1.Selector `json:"loadBalancerIdSelector,omitempty" tf:"-"`

	// +kubebuilder:validation:Required
	Name *string `json:"name" tf:"name,omitempty"`

	// +kubebuilder:validation:Required
	Policy *string `json:"policy" tf:"policy,omitempty"`

	// +kubebuilder:validation:Optional
	SSLConfiguration []SSLConfigurationParameters `json:"sslConfiguration,omitempty" tf:"ssl_configuration,omitempty"`

	// +kubebuilder:validation:Optional
	SessionPersistenceConfiguration []SessionPersistenceConfigurationParameters `json:"sessionPersistenceConfiguration,omitempty" tf:"session_persistence_configuration,omitempty"`
}

type HealthCheckerObservation struct {
}

type HealthCheckerParameters struct {

	// +kubebuilder:validation:Optional
	IntervalMs *float64 `json:"intervalMs,omitempty" tf:"interval_ms,omitempty"`

	// +kubebuilder:validation:Optional
	Port *float64 `json:"port,omitempty" tf:"port,omitempty"`

	// +kubebuilder:validation:Required
	Protocol *string `json:"protocol" tf:"protocol,omitempty"`

	// +kubebuilder:validation:Optional
	ResponseBodyRegex *string `json:"responseBodyRegex,omitempty" tf:"response_body_regex,omitempty"`

	// +kubebuilder:validation:Optional
	Retries *float64 `json:"retries,omitempty" tf:"retries,omitempty"`

	// +kubebuilder:validation:Optional
	ReturnCode *float64 `json:"returnCode,omitempty" tf:"return_code,omitempty"`

	// +kubebuilder:validation:Optional
	TimeoutInMillis *float64 `json:"timeoutInMillis,omitempty" tf:"timeout_in_millis,omitempty"`

	// +kubebuilder:validation:Optional
	URLPath *string `json:"urlPath,omitempty" tf:"url_path,omitempty"`
}

type LBCookieSessionPersistenceConfigurationObservation struct {
}

type LBCookieSessionPersistenceConfigurationParameters struct {

	// +kubebuilder:validation:Optional
	CookieName *string `json:"cookieName,omitempty" tf:"cookie_name,omitempty"`

	// +kubebuilder:validation:Optional
	DisableFallback *bool `json:"disableFallback,omitempty" tf:"disable_fallback,omitempty"`

	// +kubebuilder:validation:Optional
	Domain *string `json:"domain,omitempty" tf:"domain,omitempty"`

	// +kubebuilder:validation:Optional
	IsHTTPOnly *bool `json:"isHttpOnly,omitempty" tf:"is_http_only,omitempty"`

	// +kubebuilder:validation:Optional
	IsSecure *bool `json:"isSecure,omitempty" tf:"is_secure,omitempty"`

	// +kubebuilder:validation:Optional
	MaxAgeInSeconds *float64 `json:"maxAgeInSeconds,omitempty" tf:"max_age_in_seconds,omitempty"`

	// +kubebuilder:validation:Optional
	Path *string `json:"path,omitempty" tf:"path,omitempty"`
}

type SSLConfigurationObservation struct {
}

type SSLConfigurationParameters struct {

	// +kubebuilder:validation:Optional
	CertificateIds []*string `json:"certificateIds,omitempty" tf:"certificate_ids,omitempty"`

	// +kubebuilder:validation:Optional
	CertificateName *string `json:"certificateName,omitempty" tf:"certificate_name,omitempty"`

	// +kubebuilder:validation:Optional
	CipherSuiteName *string `json:"cipherSuiteName,omitempty" tf:"cipher_suite_name,omitempty"`

	// +kubebuilder:validation:Optional
	Protocols []*string `json:"protocols,omitempty" tf:"protocols,omitempty"`

	// +kubebuilder:validation:Optional
	ServerOrderPreference *string `json:"serverOrderPreference,omitempty" tf:"server_order_preference,omitempty"`

	// +kubebuilder:validation:Optional
	TrustedCertificateAuthorityIds []*string `json:"trustedCertificateAuthorityIds,omitempty" tf:"trusted_certificate_authority_ids,omitempty"`

	// +kubebuilder:validation:Optional
	VerifyDepth *float64 `json:"verifyDepth,omitempty" tf:"verify_depth,omitempty"`

	// +kubebuilder:validation:Optional
	VerifyPeerCertificate *bool `json:"verifyPeerCertificate,omitempty" tf:"verify_peer_certificate,omitempty"`
}

type SessionPersistenceConfigurationObservation struct {
}

type SessionPersistenceConfigurationParameters struct {

	// +kubebuilder:validation:Required
	CookieName *string `json:"cookieName" tf:"cookie_name,omitempty"`

	// +kubebuilder:validation:Optional
	DisableFallback *bool `json:"disableFallback,omitempty" tf:"disable_fallback,omitempty"`
}

// BalancerBackendSetSpec defines the desired state of BalancerBackendSet
type BalancerBackendSetSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     BalancerBackendSetParameters `json:"forProvider"`
}

// BalancerBackendSetStatus defines the observed state of BalancerBackendSet.
type BalancerBackendSetStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        BalancerBackendSetObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// BalancerBackendSet is the Schema for the BalancerBackendSets API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,ocijet}
type BalancerBackendSet struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              BalancerBackendSetSpec   `json:"spec"`
	Status            BalancerBackendSetStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// BalancerBackendSetList contains a list of BalancerBackendSets
type BalancerBackendSetList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []BalancerBackendSet `json:"items"`
}

// Repository type metadata.
var (
	BalancerBackendSet_Kind             = "BalancerBackendSet"
	BalancerBackendSet_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: BalancerBackendSet_Kind}.String()
	BalancerBackendSet_KindAPIVersion   = BalancerBackendSet_Kind + "." + CRDGroupVersion.String()
	BalancerBackendSet_GroupVersionKind = CRDGroupVersion.WithKind(BalancerBackendSet_Kind)
)

func init() {
	SchemeBuilder.Register(&BalancerBackendSet{}, &BalancerBackendSetList{})
}
