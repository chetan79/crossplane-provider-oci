/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type BalancerCertificateObservation struct {
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	State *string `json:"state,omitempty" tf:"state,omitempty"`
}

type BalancerCertificateParameters struct {

	// +kubebuilder:validation:Optional
	CACertificate *string `json:"caCertificate,omitempty" tf:"ca_certificate,omitempty"`

	// +kubebuilder:validation:Required
	CertificateName *string `json:"certificateName" tf:"certificate_name,omitempty"`

	// +crossplane:generate:reference:type=BalancerLoadBalancer
	// +kubebuilder:validation:Optional
	LoadBalancerID *string `json:"loadBalancerId,omitempty" tf:"load_balancer_id,omitempty"`

	// +kubebuilder:validation:Optional
	LoadBalancerIDRef *v1.Reference `json:"loadBalancerIdRef,omitempty" tf:"-"`

	// +kubebuilder:validation:Optional
	LoadBalancerIDSelector *v1.Selector `json:"loadBalancerIdSelector,omitempty" tf:"-"`

	// +kubebuilder:validation:Optional
	PassphraseSecretRef *v1.SecretKeySelector `json:"passphraseSecretRef,omitempty" tf:"-"`

	// +kubebuilder:validation:Optional
	PrivateKeySecretRef *v1.SecretKeySelector `json:"privateKeySecretRef,omitempty" tf:"-"`

	// +kubebuilder:validation:Optional
	PublicCertificate *string `json:"publicCertificate,omitempty" tf:"public_certificate,omitempty"`
}

// BalancerCertificateSpec defines the desired state of BalancerCertificate
type BalancerCertificateSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     BalancerCertificateParameters `json:"forProvider"`
}

// BalancerCertificateStatus defines the observed state of BalancerCertificate.
type BalancerCertificateStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        BalancerCertificateObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// BalancerCertificate is the Schema for the BalancerCertificates API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,ocijet}
type BalancerCertificate struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              BalancerCertificateSpec   `json:"spec"`
	Status            BalancerCertificateStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// BalancerCertificateList contains a list of BalancerCertificates
type BalancerCertificateList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []BalancerCertificate `json:"items"`
}

// Repository type metadata.
var (
	BalancerCertificate_Kind             = "BalancerCertificate"
	BalancerCertificate_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: BalancerCertificate_Kind}.String()
	BalancerCertificate_KindAPIVersion   = BalancerCertificate_Kind + "." + CRDGroupVersion.String()
	BalancerCertificate_GroupVersionKind = CRDGroupVersion.WithKind(BalancerCertificate_Kind)
)

func init() {
	SchemeBuilder.Register(&BalancerCertificate{}, &BalancerCertificateList{})
}
