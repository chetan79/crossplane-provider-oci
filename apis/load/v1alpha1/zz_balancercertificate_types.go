/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type BalancerCertificateObservation struct {
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	State *string `json:"state,omitempty" tf:"state,omitempty"`
}

type BalancerCertificateParameters struct {

	// The Certificate Authority certificate, or any interim certificate, that you received from your SSL certificate provider.
	// +kubebuilder:validation:Optional
	CACertificate *string `json:"caCertificate,omitempty" tf:"ca_certificate,omitempty"`

	// A friendly name for the certificate bundle. It must be unique and it cannot be changed. Valid certificate bundle names include only alphanumeric characters, dashes, and underscores. Certificate bundle names cannot contain spaces. Avoid entering confidential information.  Example: example_certificate_bundle
	// +kubebuilder:validation:Required
	CertificateName *string `json:"certificateName" tf:"certificate_name,omitempty"`

	// The OCID of the load balancer on which to add the certificate bundle.
	// +crossplane:generate:reference:type=BalancerLoadBalancer
	// +kubebuilder:validation:Optional
	LoadBalancerID *string `json:"loadBalancerId,omitempty" tf:"load_balancer_id,omitempty"`

	// Reference to a BalancerLoadBalancer to populate loadBalancerId.
	// +kubebuilder:validation:Optional
	LoadBalancerIDRef *v1.Reference `json:"loadBalancerIdRef,omitempty" tf:"-"`

	// Selector for a BalancerLoadBalancer to populate loadBalancerId.
	// +kubebuilder:validation:Optional
	LoadBalancerIDSelector *v1.Selector `json:"loadBalancerIdSelector,omitempty" tf:"-"`

	// A passphrase for encrypted private keys. This is needed only if you created your certificate with a passphrase.
	// +kubebuilder:validation:Optional
	PassphraseSecretRef *v1.SecretKeySelector `json:"passphraseSecretRef,omitempty" tf:"-"`

	// The SSL private key for your certificate, in PEM format.
	// +kubebuilder:validation:Optional
	PrivateKeySecretRef *v1.SecretKeySelector `json:"privateKeySecretRef,omitempty" tf:"-"`

	// The public certificate, in PEM format, that you received from your SSL certificate provider.
	// +kubebuilder:validation:Optional
	PublicCertificate *string `json:"publicCertificate,omitempty" tf:"public_certificate,omitempty"`
}

// BalancerCertificateSpec defines the desired state of BalancerCertificate
type BalancerCertificateSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     BalancerCertificateParameters `json:"forProvider"`
}

// BalancerCertificateStatus defines the observed state of BalancerCertificate.
type BalancerCertificateStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        BalancerCertificateObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// BalancerCertificate is the Schema for the BalancerCertificates API. Provides the Certificate resource in Oracle Cloud Infrastructure Load Balancer service
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,oci}
type BalancerCertificate struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              BalancerCertificateSpec   `json:"spec"`
	Status            BalancerCertificateStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// BalancerCertificateList contains a list of BalancerCertificates
type BalancerCertificateList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []BalancerCertificate `json:"items"`
}

// Repository type metadata.
var (
	BalancerCertificate_Kind             = "BalancerCertificate"
	BalancerCertificate_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: BalancerCertificate_Kind}.String()
	BalancerCertificate_KindAPIVersion   = BalancerCertificate_Kind + "." + CRDGroupVersion.String()
	BalancerCertificate_GroupVersionKind = CRDGroupVersion.WithKind(BalancerCertificate_Kind)
)

func init() {
	SchemeBuilder.Register(&BalancerCertificate{}, &BalancerCertificateList{})
}
