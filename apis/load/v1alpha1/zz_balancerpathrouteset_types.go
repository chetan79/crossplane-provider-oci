/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type BalancerPathRouteSetObservation struct {
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	State *string `json:"state,omitempty" tf:"state,omitempty"`
}

type BalancerPathRouteSetParameters struct {

	// +crossplane:generate:reference:type=BalancerLoadBalancer
	// +kubebuilder:validation:Optional
	LoadBalancerID *string `json:"loadBalancerId,omitempty" tf:"load_balancer_id,omitempty"`

	// +kubebuilder:validation:Optional
	LoadBalancerIDRef *v1.Reference `json:"loadBalancerIdRef,omitempty" tf:"-"`

	// +kubebuilder:validation:Optional
	LoadBalancerIDSelector *v1.Selector `json:"loadBalancerIdSelector,omitempty" tf:"-"`

	// +kubebuilder:validation:Required
	Name *string `json:"name" tf:"name,omitempty"`

	// +kubebuilder:validation:Required
	PathRoutes []PathRoutesParameters `json:"pathRoutes" tf:"path_routes,omitempty"`
}

type PathMatchTypeObservation struct {
}

type PathMatchTypeParameters struct {

	// +kubebuilder:validation:Required
	MatchType *string `json:"matchType" tf:"match_type,omitempty"`
}

type PathRoutesObservation struct {
}

type PathRoutesParameters struct {

	// +crossplane:generate:reference:type=BalancerBackendSet
	// +kubebuilder:validation:Optional
	BackendSetName *string `json:"backendSetName,omitempty" tf:"backend_set_name,omitempty"`

	// +kubebuilder:validation:Optional
	BackendSetNameRef *v1.Reference `json:"backendSetNameRef,omitempty" tf:"-"`

	// +kubebuilder:validation:Optional
	BackendSetNameSelector *v1.Selector `json:"backendSetNameSelector,omitempty" tf:"-"`

	// +kubebuilder:validation:Required
	Path *string `json:"path" tf:"path,omitempty"`

	// +kubebuilder:validation:Required
	PathMatchType []PathMatchTypeParameters `json:"pathMatchType" tf:"path_match_type,omitempty"`
}

// BalancerPathRouteSetSpec defines the desired state of BalancerPathRouteSet
type BalancerPathRouteSetSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     BalancerPathRouteSetParameters `json:"forProvider"`
}

// BalancerPathRouteSetStatus defines the observed state of BalancerPathRouteSet.
type BalancerPathRouteSetStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        BalancerPathRouteSetObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// BalancerPathRouteSet is the Schema for the BalancerPathRouteSets API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,ocijet}
type BalancerPathRouteSet struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              BalancerPathRouteSetSpec   `json:"spec"`
	Status            BalancerPathRouteSetStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// BalancerPathRouteSetList contains a list of BalancerPathRouteSets
type BalancerPathRouteSetList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []BalancerPathRouteSet `json:"items"`
}

// Repository type metadata.
var (
	BalancerPathRouteSet_Kind             = "BalancerPathRouteSet"
	BalancerPathRouteSet_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: BalancerPathRouteSet_Kind}.String()
	BalancerPathRouteSet_KindAPIVersion   = BalancerPathRouteSet_Kind + "." + CRDGroupVersion.String()
	BalancerPathRouteSet_GroupVersionKind = CRDGroupVersion.WithKind(BalancerPathRouteSet_Kind)
)

func init() {
	SchemeBuilder.Register(&BalancerPathRouteSet{}, &BalancerPathRouteSetList{})
}
