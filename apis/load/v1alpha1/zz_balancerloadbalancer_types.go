/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type BalancerLoadBalancerObservation struct {
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	IPAddressDetails []IPAddressDetailsObservation `json:"ipAddressDetails,omitempty" tf:"ip_address_details,omitempty"`

	IPAddresses []*string `json:"ipAddresses,omitempty" tf:"ip_addresses,omitempty"`

	State *string `json:"state,omitempty" tf:"state,omitempty"`

	SystemTags map[string]*string `json:"systemTags,omitempty" tf:"system_tags,omitempty"`

	TimeCreated *string `json:"timeCreated,omitempty" tf:"time_created,omitempty"`
}

type BalancerLoadBalancerParameters struct {

	// +crossplane:generate:reference:type=github.com/crossplane-contrib/provider-jet-oci/apis/identity/v1alpha1.Compartment
	// +kubebuilder:validation:Optional
	CompartmentID *string `json:"compartmentId,omitempty" tf:"compartment_id,omitempty"`

	// +kubebuilder:validation:Optional
	CompartmentIDRef *v1.Reference `json:"compartmentIdRef,omitempty" tf:"-"`

	// +kubebuilder:validation:Optional
	CompartmentIDSelector *v1.Selector `json:"compartmentIdSelector,omitempty" tf:"-"`

	// +kubebuilder:validation:Optional
	DefinedTags map[string]*string `json:"definedTags,omitempty" tf:"defined_tags,omitempty"`

	// +kubebuilder:validation:Required
	DisplayName *string `json:"displayName" tf:"display_name,omitempty"`

	// +kubebuilder:validation:Optional
	FreeformTags map[string]*string `json:"freeformTags,omitempty" tf:"freeform_tags,omitempty"`

	// +kubebuilder:validation:Optional
	IPMode *string `json:"ipMode,omitempty" tf:"ip_mode,omitempty"`

	// +kubebuilder:validation:Optional
	IsPrivate *bool `json:"isPrivate,omitempty" tf:"is_private,omitempty"`

	// +kubebuilder:validation:Optional
	NetworkSecurityGroupIds []*string `json:"networkSecurityGroupIds,omitempty" tf:"network_security_group_ids,omitempty"`

	// +kubebuilder:validation:Optional
	ReservedIps []ReservedIpsParameters `json:"reservedIps,omitempty" tf:"reserved_ips,omitempty"`

	// +kubebuilder:validation:Required
	Shape *string `json:"shape" tf:"shape,omitempty"`

	// +kubebuilder:validation:Optional
	ShapeDetails []ShapeDetailsParameters `json:"shapeDetails,omitempty" tf:"shape_details,omitempty"`

	// +crossplane:generate:reference:type=github.com/crossplane-contrib/provider-jet-oci/apis/core/v1alpha1.Subnet
	// +kubebuilder:validation:Optional
	SubnetIds []*string `json:"subnetIds,omitempty" tf:"subnet_ids,omitempty"`

	// +kubebuilder:validation:Optional
	SubnetIdsRefs []v1.Reference `json:"subnetIdsRefs,omitempty" tf:"-"`

	// +kubebuilder:validation:Optional
	SubnetIdsSelector *v1.Selector `json:"subnetIdsSelector,omitempty" tf:"-"`
}

type IPAddressDetailsObservation struct {
	IPAddress *string `json:"ipAddress,omitempty" tf:"ip_address,omitempty"`

	IsPublic *bool `json:"isPublic,omitempty" tf:"is_public,omitempty"`

	ReservedIP []ReservedIPObservation `json:"reservedIp,omitempty" tf:"reserved_ip,omitempty"`
}

type IPAddressDetailsParameters struct {
}

type ReservedIPObservation struct {
	ID *string `json:"id,omitempty" tf:"id,omitempty"`
}

type ReservedIPParameters struct {
}

type ReservedIpsObservation struct {
}

type ReservedIpsParameters struct {

	// +kubebuilder:validation:Optional
	ID *string `json:"id,omitempty" tf:"id,omitempty"`
}

type ShapeDetailsObservation struct {
}

type ShapeDetailsParameters struct {

	// +kubebuilder:validation:Required
	MaximumBandwidthInMbps *float64 `json:"maximumBandwidthInMbps" tf:"maximum_bandwidth_in_mbps,omitempty"`

	// +kubebuilder:validation:Required
	MinimumBandwidthInMbps *float64 `json:"minimumBandwidthInMbps" tf:"minimum_bandwidth_in_mbps,omitempty"`
}

// BalancerLoadBalancerSpec defines the desired state of BalancerLoadBalancer
type BalancerLoadBalancerSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     BalancerLoadBalancerParameters `json:"forProvider"`
}

// BalancerLoadBalancerStatus defines the observed state of BalancerLoadBalancer.
type BalancerLoadBalancerStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        BalancerLoadBalancerObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// BalancerLoadBalancer is the Schema for the BalancerLoadBalancers API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,ocijet}
type BalancerLoadBalancer struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              BalancerLoadBalancerSpec   `json:"spec"`
	Status            BalancerLoadBalancerStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// BalancerLoadBalancerList contains a list of BalancerLoadBalancers
type BalancerLoadBalancerList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []BalancerLoadBalancer `json:"items"`
}

// Repository type metadata.
var (
	BalancerLoadBalancer_Kind             = "BalancerLoadBalancer"
	BalancerLoadBalancer_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: BalancerLoadBalancer_Kind}.String()
	BalancerLoadBalancer_KindAPIVersion   = BalancerLoadBalancer_Kind + "." + CRDGroupVersion.String()
	BalancerLoadBalancer_GroupVersionKind = CRDGroupVersion.WithKind(BalancerLoadBalancer_Kind)
)

func init() {
	SchemeBuilder.Register(&BalancerLoadBalancer{}, &BalancerLoadBalancerList{})
}
