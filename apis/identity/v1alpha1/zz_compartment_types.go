/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type CompartmentObservation struct {

	// The OCID of the compartment.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// The detailed status of INACTIVE lifecycleState.
	InactiveState *string `json:"inactiveState,omitempty" tf:"inactive_state,omitempty"`

	// Indicates whether or not the compartment is accessible for the user making the request. Returns true when the user has INSPECT permissions directly on a resource in the compartment or indirectly (permissions can be on a resource in a subcompartment).
	IsAccessible *bool `json:"isAccessible,omitempty" tf:"is_accessible,omitempty"`

	// The compartment's current state.
	State *string `json:"state,omitempty" tf:"state,omitempty"`

	// Date and time the compartment was created, in the format defined by RFC3339.  Example: 2016-08-25T21:10:29.600Z
	TimeCreated *string `json:"timeCreated,omitempty" tf:"time_created,omitempty"`
}

type CompartmentParameters struct {

	// (Updatable) The OCID of the parent compartment containing the compartment.
	// +kubebuilder:validation:Optional
	CompartmentID *string `json:"compartmentId,omitempty" tf:"compartment_id,omitempty"`

	// (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. For more information, see Resource Tags. Example: {"Operations.CostCenter": "42"}
	// +kubebuilder:validation:Optional
	DefinedTags map[string]*string `json:"definedTags,omitempty" tf:"defined_tags,omitempty"`

	// (Updatable) The description you assign to the compartment during creation. Does not have to be unique, and it's changeable.
	// +kubebuilder:validation:Required
	Description *string `json:"description" tf:"description,omitempty"`

	// Defaults to false. If omitted or set to false the provider will implicitly import the compartment if there is a name collision, and will not actually delete the compartment on destroy or removal of the resource declaration. If set to true, the provider will throw an error on a name collision with another compartment, and will attempt to delete the compartment on destroy or removal of the resource declaration.
	// +kubebuilder:validation:Optional
	EnableDelete *bool `json:"enableDelete,omitempty" tf:"enable_delete,omitempty"`

	// (Updatable) Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace. For more information, see Resource Tags. Example: {"Department": "Finance"}
	// +kubebuilder:validation:Optional
	FreeformTags map[string]*string `json:"freeformTags,omitempty" tf:"freeform_tags,omitempty"`

	// (Updatable) The name you assign to the compartment during creation. The name must be unique across all compartments in the parent compartment. Avoid entering confidential information.
	// +kubebuilder:validation:Required
	Name *string `json:"name" tf:"name,omitempty"`
}

// CompartmentSpec defines the desired state of Compartment
type CompartmentSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     CompartmentParameters `json:"forProvider"`
}

// CompartmentStatus defines the observed state of Compartment.
type CompartmentStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        CompartmentObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// Compartment is the Schema for the Compartments API. Provides the Compartment resource in Oracle Cloud Infrastructure Identity service
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,oci}
type Compartment struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              CompartmentSpec   `json:"spec"`
	Status            CompartmentStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// CompartmentList contains a list of Compartments
type CompartmentList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []Compartment `json:"items"`
}

// Repository type metadata.
var (
	Compartment_Kind             = "Compartment"
	Compartment_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: Compartment_Kind}.String()
	Compartment_KindAPIVersion   = Compartment_Kind + "." + CRDGroupVersion.String()
	Compartment_GroupVersionKind = CRDGroupVersion.WithKind(Compartment_Kind)
)

func init() {
	SchemeBuilder.Register(&Compartment{}, &CompartmentList{})
}
