/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type AuthenticationPolicyObservation struct {
	ID *string `json:"id,omitempty" tf:"id,omitempty"`
}

type AuthenticationPolicyParameters struct {

	// +crossplane:generate:reference:type=Compartment
	// +kubebuilder:validation:Optional
	CompartmentID *string `json:"compartmentId,omitempty" tf:"compartment_id,omitempty"`

	// +kubebuilder:validation:Optional
	CompartmentIDRef *v1.Reference `json:"compartmentIdRef,omitempty" tf:"-"`

	// +kubebuilder:validation:Optional
	CompartmentIDSelector *v1.Selector `json:"compartmentIdSelector,omitempty" tf:"-"`

	// +kubebuilder:validation:Optional
	NetworkPolicy []NetworkPolicyParameters `json:"networkPolicy,omitempty" tf:"network_policy,omitempty"`

	// +kubebuilder:validation:Optional
	PasswordPolicy []PasswordPolicyParameters `json:"passwordPolicy,omitempty" tf:"password_policy,omitempty"`
}

type NetworkPolicyObservation struct {
}

type NetworkPolicyParameters struct {

	// +kubebuilder:validation:Optional
	NetworkSourceIds []*string `json:"networkSourceIds,omitempty" tf:"network_source_ids,omitempty"`
}

type PasswordPolicyObservation struct {
}

type PasswordPolicyParameters struct {

	// +kubebuilder:validation:Optional
	IsLowercaseCharactersRequired *bool `json:"isLowercaseCharactersRequired,omitempty" tf:"is_lowercase_characters_required,omitempty"`

	// +kubebuilder:validation:Optional
	IsNumericCharactersRequired *bool `json:"isNumericCharactersRequired,omitempty" tf:"is_numeric_characters_required,omitempty"`

	// +kubebuilder:validation:Optional
	IsSpecialCharactersRequired *bool `json:"isSpecialCharactersRequired,omitempty" tf:"is_special_characters_required,omitempty"`

	// +kubebuilder:validation:Optional
	IsUppercaseCharactersRequired *bool `json:"isUppercaseCharactersRequired,omitempty" tf:"is_uppercase_characters_required,omitempty"`

	// +kubebuilder:validation:Optional
	IsUsernameContainmentAllowed *bool `json:"isUsernameContainmentAllowed,omitempty" tf:"is_username_containment_allowed,omitempty"`

	// +kubebuilder:validation:Optional
	MinimumPasswordLength *float64 `json:"minimumPasswordLength,omitempty" tf:"minimum_password_length,omitempty"`
}

// AuthenticationPolicySpec defines the desired state of AuthenticationPolicy
type AuthenticationPolicySpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     AuthenticationPolicyParameters `json:"forProvider"`
}

// AuthenticationPolicyStatus defines the observed state of AuthenticationPolicy.
type AuthenticationPolicyStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        AuthenticationPolicyObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// AuthenticationPolicy is the Schema for the AuthenticationPolicys API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,ocijet}
type AuthenticationPolicy struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              AuthenticationPolicySpec   `json:"spec"`
	Status            AuthenticationPolicyStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// AuthenticationPolicyList contains a list of AuthenticationPolicys
type AuthenticationPolicyList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []AuthenticationPolicy `json:"items"`
}

// Repository type metadata.
var (
	AuthenticationPolicy_Kind             = "AuthenticationPolicy"
	AuthenticationPolicy_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: AuthenticationPolicy_Kind}.String()
	AuthenticationPolicy_KindAPIVersion   = AuthenticationPolicy_Kind + "." + CRDGroupVersion.String()
	AuthenticationPolicy_GroupVersionKind = CRDGroupVersion.WithKind(AuthenticationPolicy_Kind)
)

func init() {
	SchemeBuilder.Register(&AuthenticationPolicy{}, &AuthenticationPolicyList{})
}
