/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type ContainerConfigurationObservation struct {
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// The tenancy namespace used in the container repository path.
	Namespace *string `json:"namespace,omitempty" tf:"namespace,omitempty"`
}

type ContainerConfigurationParameters struct {

	// +crossplane:generate:reference:type=github.com/oracle/provider-oci/apis/identity/v1alpha1.Compartment
	// +kubebuilder:validation:Optional
	CompartmentID *string `json:"compartmentId,omitempty" tf:"compartment_id,omitempty"`

	// Reference to a Compartment in identity to populate compartmentId.
	// +kubebuilder:validation:Optional
	CompartmentIDRef *v1.Reference `json:"compartmentIdRef,omitempty" tf:"-"`

	// Selector for a Compartment in identity to populate compartmentId.
	// +kubebuilder:validation:Optional
	CompartmentIDSelector *v1.Selector `json:"compartmentIdSelector,omitempty" tf:"-"`

	// Whether to create a new container repository when a container is pushed to a new repository path. Repositories created in this way belong to the root compartment.
	// +kubebuilder:validation:Required
	IsRepositoryCreatedOnFirstPush *bool `json:"isRepositoryCreatedOnFirstPush" tf:"is_repository_created_on_first_push,omitempty"`
}

// ContainerConfigurationSpec defines the desired state of ContainerConfiguration
type ContainerConfigurationSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     ContainerConfigurationParameters `json:"forProvider"`
}

// ContainerConfigurationStatus defines the observed state of ContainerConfiguration.
type ContainerConfigurationStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        ContainerConfigurationObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// ContainerConfiguration is the Schema for the ContainerConfigurations API. Provides the Container Configuration resource in Oracle Cloud Infrastructure Artifacts service
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,oci}
type ContainerConfiguration struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              ContainerConfigurationSpec   `json:"spec"`
	Status            ContainerConfigurationStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// ContainerConfigurationList contains a list of ContainerConfigurations
type ContainerConfigurationList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []ContainerConfiguration `json:"items"`
}

// Repository type metadata.
var (
	ContainerConfiguration_Kind             = "ContainerConfiguration"
	ContainerConfiguration_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: ContainerConfiguration_Kind}.String()
	ContainerConfiguration_KindAPIVersion   = ContainerConfiguration_Kind + "." + CRDGroupVersion.String()
	ContainerConfiguration_GroupVersionKind = CRDGroupVersion.WithKind(ContainerConfiguration_Kind)
)

func init() {
	SchemeBuilder.Register(&ContainerConfiguration{}, &ContainerConfigurationList{})
}
