/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type ActionsActionsObservation struct {

	// The OCID of the action.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// A message generated by the Events service about the current state of this action.
	LifecycleMessage *string `json:"lifecycleMessage,omitempty" tf:"lifecycle_message,omitempty"`

	// The current state of the rule.
	State *string `json:"state,omitempty" tf:"state,omitempty"`
}

type ActionsActionsParameters struct {

	// (Updatable) The action to perform if the condition in the rule matches an event.
	// +kubebuilder:validation:Required
	ActionType *string `json:"actionType" tf:"action_type,omitempty"`

	// (Updatable) A string that describes the details of the action. It does not have to be unique, and you can change it. Avoid entering confidential information.
	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// (Applicable when action_type=FAAS) (Updatable) The OCID of a Function hosted by Oracle Functions Service.
	// +crossplane:generate:reference:type=github.com/oracle/provider-oci/apis/functions/v1alpha1.Function
	// +kubebuilder:validation:Optional
	FunctionID *string `json:"functionId,omitempty" tf:"function_id,omitempty"`

	// Reference to a Function in functions to populate functionId.
	// +kubebuilder:validation:Optional
	FunctionIDRef *v1.Reference `json:"functionIdRef,omitempty" tf:"-"`

	// Selector for a Function in functions to populate functionId.
	// +kubebuilder:validation:Optional
	FunctionIDSelector *v1.Selector `json:"functionIdSelector,omitempty" tf:"-"`

	// (Updatable) Whether or not this action is currently enabled.  Example: true
	// +kubebuilder:validation:Required
	IsEnabled *bool `json:"isEnabled" tf:"is_enabled,omitempty"`

	// (Updatable) The OCID of the stream to which messages are delivered.
	// +crossplane:generate:reference:type=github.com/oracle/provider-oci/apis/streaming/v1alpha1.Stream
	// +kubebuilder:validation:Optional
	StreamID *string `json:"streamId,omitempty" tf:"stream_id,omitempty"`

	// Reference to a Stream in streaming to populate streamId.
	// +kubebuilder:validation:Optional
	StreamIDRef *v1.Reference `json:"streamIdRef,omitempty" tf:"-"`

	// Selector for a Stream in streaming to populate streamId.
	// +kubebuilder:validation:Optional
	StreamIDSelector *v1.Selector `json:"streamIdSelector,omitempty" tf:"-"`

	// (Applicable when action_type=ONS) (Updatable) The OCID of the topic to which messages are delivered.
	// +crossplane:generate:reference:type=github.com/oracle/provider-oci/apis/ons/v1alpha1.NotificationTopic
	// +kubebuilder:validation:Optional
	TopicID *string `json:"topicId,omitempty" tf:"topic_id,omitempty"`

	// Reference to a NotificationTopic in ons to populate topicId.
	// +kubebuilder:validation:Optional
	TopicIDRef *v1.Reference `json:"topicIdRef,omitempty" tf:"-"`

	// Selector for a NotificationTopic in ons to populate topicId.
	// +kubebuilder:validation:Optional
	TopicIDSelector *v1.Selector `json:"topicIdSelector,omitempty" tf:"-"`
}

type ActionsObservation struct {

	// (Updatable) A list of ActionDetails objects to create for a rule.
	// +kubebuilder:validation:Required
	Actions []ActionsActionsObservation `json:"actions,omitempty" tf:"actions,omitempty"`
}

type ActionsParameters struct {

	// (Updatable) A list of ActionDetails objects to create for a rule.
	// +kubebuilder:validation:Required
	Actions []ActionsActionsParameters `json:"actions" tf:"actions,omitempty"`
}

type RuleObservation struct {

	// (Updatable) A list of ActionDetails objects to create for a rule.
	// +kubebuilder:validation:Required
	Actions []ActionsObservation `json:"actions,omitempty" tf:"actions,omitempty"`

	// The OCID of the action.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// A message generated by the Events service about the current state of this action.
	LifecycleMessage *string `json:"lifecycleMessage,omitempty" tf:"lifecycle_message,omitempty"`

	// The current state of the rule.
	State *string `json:"state,omitempty" tf:"state,omitempty"`

	// The time this rule was created, expressed in RFC 3339 timestamp format.  Example: 2018-09-12T22:47:12.613Z
	TimeCreated *string `json:"timeCreated,omitempty" tf:"time_created,omitempty"`
}

type RuleParameters struct {

	// (Updatable) A list of ActionDetails objects to create for a rule.
	// +kubebuilder:validation:Required
	Actions []ActionsParameters `json:"actions" tf:"actions,omitempty"`

	// (Updatable) The OCID of the compartment to which this rule belongs.
	// +crossplane:generate:reference:type=github.com/oracle/provider-oci/apis/identity/v1alpha1.Compartment
	// +kubebuilder:validation:Optional
	CompartmentID *string `json:"compartmentId,omitempty" tf:"compartment_id,omitempty"`

	// Reference to a Compartment in identity to populate compartmentId.
	// +kubebuilder:validation:Optional
	CompartmentIDRef *v1.Reference `json:"compartmentIdRef,omitempty" tf:"-"`

	// Selector for a Compartment in identity to populate compartmentId.
	// +kubebuilder:validation:Optional
	CompartmentIDSelector *v1.Selector `json:"compartmentIdSelector,omitempty" tf:"-"`

	// (Updatable) A filter that specifies the event that will trigger actions associated with this rule. A few  important things to remember about filters:
	// +kubebuilder:validation:Required
	Condition *string `json:"condition" tf:"condition,omitempty"`

	// (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. For more information, see Resource Tags.  Example: {"Operations.CostCenter": "42"}
	// +kubebuilder:validation:Optional
	DefinedTags map[string]*string `json:"definedTags,omitempty" tf:"defined_tags,omitempty"`

	// (Updatable) A string that describes the details of the action. It does not have to be unique, and you can change it. Avoid entering confidential information.
	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// (Updatable) A string that describes the rule. It does not have to be unique, and you can change it. Avoid entering confidential information.
	// +kubebuilder:validation:Required
	DisplayName *string `json:"displayName" tf:"display_name,omitempty"`

	// (Updatable) Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace. Exists for cross-compatibility only. For more information, see Resource Tags.  Example: {"Department": "Finance"}
	// +kubebuilder:validation:Optional
	FreeformTags map[string]*string `json:"freeformTags,omitempty" tf:"freeform_tags,omitempty"`

	// (Updatable) Whether or not this action is currently enabled.  Example: true
	// +kubebuilder:validation:Required
	IsEnabled *bool `json:"isEnabled" tf:"is_enabled,omitempty"`
}

// RuleSpec defines the desired state of Rule
type RuleSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     RuleParameters `json:"forProvider"`
}

// RuleStatus defines the observed state of Rule.
type RuleStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        RuleObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// Rule is the Schema for the Rules API. Provides the Rule resource in Oracle Cloud Infrastructure Events service
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,oci}
type Rule struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              RuleSpec   `json:"spec"`
	Status            RuleStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// RuleList contains a list of Rules
type RuleList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []Rule `json:"items"`
}

// Repository type metadata.
var (
	Rule_Kind             = "Rule"
	Rule_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: Rule_Kind}.String()
	Rule_KindAPIVersion   = Rule_Kind + "." + CRDGroupVersion.String()
	Rule_GroupVersionKind = CRDGroupVersion.WithKind(Rule_Kind)
)

func init() {
	SchemeBuilder.Register(&Rule{}, &RuleList{})
}
