/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type PingMonitorObservation struct {
	HomeRegion *string `json:"homeRegion,omitempty" tf:"home_region,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	ResultsURL *string `json:"resultsUrl,omitempty" tf:"results_url,omitempty"`

	TimeCreated *string `json:"timeCreated,omitempty" tf:"time_created,omitempty"`
}

type PingMonitorParameters struct {

	// +crossplane:generate:reference:type=github.com/crossplane-contrib/provider-jet-oci/apis/identity/v1alpha1.Compartment
	// +kubebuilder:validation:Optional
	CompartmentID *string `json:"compartmentId,omitempty" tf:"compartment_id,omitempty"`

	// +kubebuilder:validation:Optional
	CompartmentIDRef *v1.Reference `json:"compartmentIdRef,omitempty" tf:"-"`

	// +kubebuilder:validation:Optional
	CompartmentIDSelector *v1.Selector `json:"compartmentIdSelector,omitempty" tf:"-"`

	// +kubebuilder:validation:Optional
	DefinedTags map[string]*string `json:"definedTags,omitempty" tf:"defined_tags,omitempty"`

	// +kubebuilder:validation:Required
	DisplayName *string `json:"displayName" tf:"display_name,omitempty"`

	// +kubebuilder:validation:Optional
	FreeformTags map[string]*string `json:"freeformTags,omitempty" tf:"freeform_tags,omitempty"`

	// +kubebuilder:validation:Required
	IntervalInSeconds *float64 `json:"intervalInSeconds" tf:"interval_in_seconds,omitempty"`

	// +kubebuilder:validation:Optional
	IsEnabled *bool `json:"isEnabled,omitempty" tf:"is_enabled,omitempty"`

	// +kubebuilder:validation:Optional
	Port *float64 `json:"port,omitempty" tf:"port,omitempty"`

	// +kubebuilder:validation:Required
	Protocol *string `json:"protocol" tf:"protocol,omitempty"`

	// +kubebuilder:validation:Required
	Targets []*string `json:"targets" tf:"targets,omitempty"`

	// +kubebuilder:validation:Optional
	TimeoutInSeconds *float64 `json:"timeoutInSeconds,omitempty" tf:"timeout_in_seconds,omitempty"`

	// +kubebuilder:validation:Optional
	VantagePointNames []*string `json:"vantagePointNames,omitempty" tf:"vantage_point_names,omitempty"`
}

// PingMonitorSpec defines the desired state of PingMonitor
type PingMonitorSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     PingMonitorParameters `json:"forProvider"`
}

// PingMonitorStatus defines the observed state of PingMonitor.
type PingMonitorStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        PingMonitorObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// PingMonitor is the Schema for the PingMonitors API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,ocijet}
type PingMonitor struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              PingMonitorSpec   `json:"spec"`
	Status            PingMonitorStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// PingMonitorList contains a list of PingMonitors
type PingMonitorList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []PingMonitor `json:"items"`
}

// Repository type metadata.
var (
	PingMonitor_Kind             = "PingMonitor"
	PingMonitor_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: PingMonitor_Kind}.String()
	PingMonitor_KindAPIVersion   = PingMonitor_Kind + "." + CRDGroupVersion.String()
	PingMonitor_GroupVersionKind = CRDGroupVersion.WithKind(PingMonitor_Kind)
)

func init() {
	SchemeBuilder.Register(&PingMonitor{}, &PingMonitorList{})
}
