/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type ServiceDiscoveryObservation struct {
}

type ServiceDiscoveryParameters struct {

	// (Updatable) The hostname of the virtual deployments.
	// +kubebuilder:validation:Optional
	Hostname *string `json:"hostname,omitempty" tf:"hostname,omitempty"`

	// (Updatable) Type of service discovery.
	// +kubebuilder:validation:Required
	Type *string `json:"type" tf:"type,omitempty"`
}

type VirtualDeploymentAccessLoggingObservation struct {
}

type VirtualDeploymentAccessLoggingParameters struct {

	// (Updatable) Determines if the logging configuration is enabled.
	// +kubebuilder:validation:Optional
	IsEnabled *bool `json:"isEnabled,omitempty" tf:"is_enabled,omitempty"`
}

type VirtualDeploymentListenersObservation struct {
}

type VirtualDeploymentListenersParameters struct {

	// (Updatable) The maximum duration in milliseconds for which the request's stream may be idle. The value 0 (zero) indicates that the timeout is disabled.
	// +kubebuilder:validation:Optional
	IdleTimeoutInMs *string `json:"idleTimeoutInMs,omitempty" tf:"idle_timeout_in_ms,omitempty"`

	// (Updatable) Port in which virtual deployment is running.
	// +kubebuilder:validation:Required
	Port *float64 `json:"port" tf:"port,omitempty"`

	// (Updatable) Type of protocol used in virtual deployment.
	// +kubebuilder:validation:Required
	Protocol *string `json:"protocol" tf:"protocol,omitempty"`

	// (Updatable) The maximum duration in milliseconds for the deployed service to respond to an incoming request through the listener.  If provided, the timeout value overrides the default timeout of 15 seconds for the HTTP/HTTP2 listeners, and disabled (no timeout) for the GRPC listeners. The value 0 (zero) indicates that the timeout is disabled.  The timeout cannot be configured for the TCP and TLS_PASSTHROUGH listeners.  For streaming responses from the deployed service, consider either keeping the timeout disabled or set a sufficiently high value.
	// +kubebuilder:validation:Optional
	RequestTimeoutInMs *string `json:"requestTimeoutInMs,omitempty" tf:"request_timeout_in_ms,omitempty"`
}

type VirtualDeploymentObservation struct {

	// Unique identifier that is immutable on creation.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// A message describing the current state in more detail. For example, can be used to provide actionable information for a resource in a Failed state.
	LifecycleDetails *string `json:"lifecycleDetails,omitempty" tf:"lifecycle_details,omitempty"`

	// The current state of the Resource.
	State *string `json:"state,omitempty" tf:"state,omitempty"`

	// Usage of system tag keys. These predefined keys are scoped to namespaces. Example: {"orcl-cloud.free-tier-retained": "true"}
	SystemTags map[string]*string `json:"systemTags,omitempty" tf:"system_tags,omitempty"`

	// The time when this resource was created in an RFC3339 formatted datetime string.
	TimeCreated *string `json:"timeCreated,omitempty" tf:"time_created,omitempty"`

	// The time when this resource was updated in an RFC3339 formatted datetime string.
	TimeUpdated *string `json:"timeUpdated,omitempty" tf:"time_updated,omitempty"`
}

type VirtualDeploymentParameters struct {

	// (Updatable) This configuration determines if logging is enabled and where the logs will be output.
	// +kubebuilder:validation:Optional
	AccessLogging []VirtualDeploymentAccessLoggingParameters `json:"accessLogging,omitempty" tf:"access_logging,omitempty"`

	// (Updatable) The OCID of the compartment.
	// +crossplane:generate:reference:type=github.com/oracle/provider-oci/apis/identity/v1alpha1.Compartment
	// +kubebuilder:validation:Optional
	CompartmentID *string `json:"compartmentId,omitempty" tf:"compartment_id,omitempty"`

	// Reference to a Compartment in identity to populate compartmentId.
	// +kubebuilder:validation:Optional
	CompartmentIDRef *v1.Reference `json:"compartmentIdRef,omitempty" tf:"-"`

	// Selector for a Compartment in identity to populate compartmentId.
	// +kubebuilder:validation:Optional
	CompartmentIDSelector *v1.Selector `json:"compartmentIdSelector,omitempty" tf:"-"`

	// (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: {"foo-namespace.bar-key": "value"}
	// +kubebuilder:validation:Optional
	DefinedTags map[string]*string `json:"definedTags,omitempty" tf:"defined_tags,omitempty"`

	// (Updatable) Description of the resource. It can be changed after creation. Avoid entering confidential information.  Example: This is my new resource
	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// (Updatable) Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: {"bar-key": "value"}
	// +kubebuilder:validation:Optional
	FreeformTags map[string]*string `json:"freeformTags,omitempty" tf:"freeform_tags,omitempty"`

	// (Updatable) The listeners for the virtual deployment.
	// +kubebuilder:validation:Optional
	Listeners []VirtualDeploymentListenersParameters `json:"listeners,omitempty" tf:"listeners,omitempty"`

	// A user-friendly name. The name must be unique within the same virtual service and cannot be changed after creation. Avoid entering confidential information.  Example: My unique resource name
	// +kubebuilder:validation:Required
	Name *string `json:"name" tf:"name,omitempty"`

	// (Updatable) Service Discovery configuration for virtual deployments.
	// +kubebuilder:validation:Optional
	ServiceDiscovery []ServiceDiscoveryParameters `json:"serviceDiscovery,omitempty" tf:"service_discovery,omitempty"`

	// The OCID of the service mesh in which this access policy is created.
	// +crossplane:generate:reference:type=VirtualService
	// +kubebuilder:validation:Optional
	VirtualServiceID *string `json:"virtualServiceId,omitempty" tf:"virtual_service_id,omitempty"`

	// Reference to a VirtualService to populate virtualServiceId.
	// +kubebuilder:validation:Optional
	VirtualServiceIDRef *v1.Reference `json:"virtualServiceIdRef,omitempty" tf:"-"`

	// Selector for a VirtualService to populate virtualServiceId.
	// +kubebuilder:validation:Optional
	VirtualServiceIDSelector *v1.Selector `json:"virtualServiceIdSelector,omitempty" tf:"-"`
}

// VirtualDeploymentSpec defines the desired state of VirtualDeployment
type VirtualDeploymentSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     VirtualDeploymentParameters `json:"forProvider"`
}

// VirtualDeploymentStatus defines the observed state of VirtualDeployment.
type VirtualDeploymentStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        VirtualDeploymentObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// VirtualDeployment is the Schema for the VirtualDeployments API. Provides the Virtual Deployment resource in Oracle Cloud Infrastructure Service Mesh service
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,oci}
type VirtualDeployment struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              VirtualDeploymentSpec   `json:"spec"`
	Status            VirtualDeploymentStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// VirtualDeploymentList contains a list of VirtualDeployments
type VirtualDeploymentList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []VirtualDeployment `json:"items"`
}

// Repository type metadata.
var (
	VirtualDeployment_Kind             = "VirtualDeployment"
	VirtualDeployment_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: VirtualDeployment_Kind}.String()
	VirtualDeployment_KindAPIVersion   = VirtualDeployment_Kind + "." + CRDGroupVersion.String()
	VirtualDeployment_GroupVersionKind = CRDGroupVersion.WithKind(VirtualDeployment_Kind)
)

func init() {
	SchemeBuilder.Register(&VirtualDeployment{}, &VirtualDeploymentList{})
}
