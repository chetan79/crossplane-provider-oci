/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type AccessLoggingObservation struct {
}

type AccessLoggingParameters struct {

	// +kubebuilder:validation:Optional
	IsEnabled *bool `json:"isEnabled,omitempty" tf:"is_enabled,omitempty"`
}

type ClientValidationObservation struct {
}

type ClientValidationParameters struct {

	// +kubebuilder:validation:Optional
	SubjectAlternateNames []*string `json:"subjectAlternateNames,omitempty" tf:"subject_alternate_names,omitempty"`

	// +kubebuilder:validation:Optional
	TrustedCABundle []TrustedCABundleParameters `json:"trustedCaBundle,omitempty" tf:"trusted_ca_bundle,omitempty"`
}

type HostsObservation struct {
}

type HostsParameters struct {

	// +kubebuilder:validation:Optional
	Hostnames []*string `json:"hostnames,omitempty" tf:"hostnames,omitempty"`

	// +kubebuilder:validation:Required
	Listeners []ListenersParameters `json:"listeners" tf:"listeners,omitempty"`

	// +kubebuilder:validation:Required
	Name *string `json:"name" tf:"name,omitempty"`
}

type IngressGatewayObservation struct {
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	LifecycleDetails *string `json:"lifecycleDetails,omitempty" tf:"lifecycle_details,omitempty"`

	State *string `json:"state,omitempty" tf:"state,omitempty"`

	SystemTags map[string]*string `json:"systemTags,omitempty" tf:"system_tags,omitempty"`

	TimeCreated *string `json:"timeCreated,omitempty" tf:"time_created,omitempty"`

	TimeUpdated *string `json:"timeUpdated,omitempty" tf:"time_updated,omitempty"`
}

type IngressGatewayParameters struct {

	// +kubebuilder:validation:Optional
	AccessLogging []AccessLoggingParameters `json:"accessLogging,omitempty" tf:"access_logging,omitempty"`

	// +crossplane:generate:reference:type=github.com/crossplane-contrib/provider-jet-oci/apis/identity/v1alpha1.Compartment
	// +kubebuilder:validation:Optional
	CompartmentID *string `json:"compartmentId,omitempty" tf:"compartment_id,omitempty"`

	// +kubebuilder:validation:Optional
	CompartmentIDRef *v1.Reference `json:"compartmentIdRef,omitempty" tf:"-"`

	// +kubebuilder:validation:Optional
	CompartmentIDSelector *v1.Selector `json:"compartmentIdSelector,omitempty" tf:"-"`

	// +kubebuilder:validation:Optional
	DefinedTags map[string]*string `json:"definedTags,omitempty" tf:"defined_tags,omitempty"`

	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// +kubebuilder:validation:Optional
	FreeformTags map[string]*string `json:"freeformTags,omitempty" tf:"freeform_tags,omitempty"`

	// +kubebuilder:validation:Required
	Hosts []HostsParameters `json:"hosts" tf:"hosts,omitempty"`

	// +crossplane:generate:reference:type=Mesh
	// +kubebuilder:validation:Optional
	MeshID *string `json:"meshId,omitempty" tf:"mesh_id,omitempty"`

	// +kubebuilder:validation:Optional
	MeshIDRef *v1.Reference `json:"meshIdRef,omitempty" tf:"-"`

	// +kubebuilder:validation:Optional
	MeshIDSelector *v1.Selector `json:"meshIdSelector,omitempty" tf:"-"`

	// +kubebuilder:validation:Optional
	Mtls []MtlsParameters `json:"mtls,omitempty" tf:"mtls,omitempty"`

	// +kubebuilder:validation:Required
	Name *string `json:"name" tf:"name,omitempty"`
}

type ListenersObservation struct {
}

type ListenersParameters struct {

	// +kubebuilder:validation:Required
	Port *float64 `json:"port" tf:"port,omitempty"`

	// +kubebuilder:validation:Required
	Protocol *string `json:"protocol" tf:"protocol,omitempty"`

	// +kubebuilder:validation:Optional
	TLS []TLSParameters `json:"tls,omitempty" tf:"tls,omitempty"`
}

type MtlsObservation struct {
	CertificateID *string `json:"certificateId,omitempty" tf:"certificate_id,omitempty"`
}

type MtlsParameters struct {

	// +kubebuilder:validation:Optional
	MaximumValidity *float64 `json:"maximumValidity,omitempty" tf:"maximum_validity,omitempty"`
}

type ServerCertificateObservation struct {
}

type ServerCertificateParameters struct {

	// +kubebuilder:validation:Optional
	CertificateID *string `json:"certificateId,omitempty" tf:"certificate_id,omitempty"`

	// +kubebuilder:validation:Optional
	SecretName *string `json:"secretName,omitempty" tf:"secret_name,omitempty"`

	// +kubebuilder:validation:Required
	Type *string `json:"type" tf:"type,omitempty"`
}

type TLSObservation struct {
}

type TLSParameters struct {

	// +kubebuilder:validation:Optional
	ClientValidation []ClientValidationParameters `json:"clientValidation,omitempty" tf:"client_validation,omitempty"`

	// +kubebuilder:validation:Required
	Mode *string `json:"mode" tf:"mode,omitempty"`

	// +kubebuilder:validation:Optional
	ServerCertificate []ServerCertificateParameters `json:"serverCertificate,omitempty" tf:"server_certificate,omitempty"`
}

type TrustedCABundleObservation struct {
}

type TrustedCABundleParameters struct {

	// +kubebuilder:validation:Optional
	CABundleID *string `json:"caBundleId,omitempty" tf:"ca_bundle_id,omitempty"`

	// +kubebuilder:validation:Optional
	SecretName *string `json:"secretName,omitempty" tf:"secret_name,omitempty"`

	// +kubebuilder:validation:Required
	Type *string `json:"type" tf:"type,omitempty"`
}

// IngressGatewaySpec defines the desired state of IngressGateway
type IngressGatewaySpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     IngressGatewayParameters `json:"forProvider"`
}

// IngressGatewayStatus defines the observed state of IngressGateway.
type IngressGatewayStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        IngressGatewayObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// IngressGateway is the Schema for the IngressGateways API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,ocijet}
type IngressGateway struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              IngressGatewaySpec   `json:"spec"`
	Status            IngressGatewayStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// IngressGatewayList contains a list of IngressGateways
type IngressGatewayList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []IngressGateway `json:"items"`
}

// Repository type metadata.
var (
	IngressGateway_Kind             = "IngressGateway"
	IngressGateway_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: IngressGateway_Kind}.String()
	IngressGateway_KindAPIVersion   = IngressGateway_Kind + "." + CRDGroupVersion.String()
	IngressGateway_GroupVersionKind = CRDGroupVersion.WithKind(IngressGateway_Kind)
)

func init() {
	SchemeBuilder.Register(&IngressGateway{}, &IngressGatewayList{})
}
