/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type ObjectLifecyclePolicyObservation struct {
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	TimeCreated *string `json:"timeCreated,omitempty" tf:"time_created,omitempty"`
}

type ObjectLifecyclePolicyParameters struct {

	// +kubebuilder:validation:Required
	Bucket *string `json:"bucket" tf:"bucket,omitempty"`

	// +kubebuilder:validation:Required
	Namespace *string `json:"namespace" tf:"namespace,omitempty"`

	// +kubebuilder:validation:Optional
	Rules []RulesParameters `json:"rules,omitempty" tf:"rules,omitempty"`
}

type ObjectNameFilterObservation struct {
}

type ObjectNameFilterParameters struct {

	// +kubebuilder:validation:Optional
	ExclusionPatterns []*string `json:"exclusionPatterns,omitempty" tf:"exclusion_patterns,omitempty"`

	// +kubebuilder:validation:Optional
	InclusionPatterns []*string `json:"inclusionPatterns,omitempty" tf:"inclusion_patterns,omitempty"`

	// +kubebuilder:validation:Optional
	InclusionPrefixes []*string `json:"inclusionPrefixes,omitempty" tf:"inclusion_prefixes,omitempty"`
}

type RulesObservation struct {
}

type RulesParameters struct {

	// +kubebuilder:validation:Required
	Action *string `json:"action" tf:"action,omitempty"`

	// +kubebuilder:validation:Required
	IsEnabled *bool `json:"isEnabled" tf:"is_enabled,omitempty"`

	// +kubebuilder:validation:Required
	Name *string `json:"name" tf:"name,omitempty"`

	// +kubebuilder:validation:Optional
	ObjectNameFilter []ObjectNameFilterParameters `json:"objectNameFilter,omitempty" tf:"object_name_filter,omitempty"`

	// +kubebuilder:validation:Optional
	Target *string `json:"target,omitempty" tf:"target,omitempty"`

	// +kubebuilder:validation:Required
	TimeAmount *string `json:"timeAmount" tf:"time_amount,omitempty"`

	// +kubebuilder:validation:Required
	TimeUnit *string `json:"timeUnit" tf:"time_unit,omitempty"`
}

// ObjectLifecyclePolicySpec defines the desired state of ObjectLifecyclePolicy
type ObjectLifecyclePolicySpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     ObjectLifecyclePolicyParameters `json:"forProvider"`
}

// ObjectLifecyclePolicyStatus defines the observed state of ObjectLifecyclePolicy.
type ObjectLifecyclePolicyStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        ObjectLifecyclePolicyObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// ObjectLifecyclePolicy is the Schema for the ObjectLifecyclePolicys API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,ocijet}
type ObjectLifecyclePolicy struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              ObjectLifecyclePolicySpec   `json:"spec"`
	Status            ObjectLifecyclePolicyStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// ObjectLifecyclePolicyList contains a list of ObjectLifecyclePolicys
type ObjectLifecyclePolicyList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []ObjectLifecyclePolicy `json:"items"`
}

// Repository type metadata.
var (
	ObjectLifecyclePolicy_Kind             = "ObjectLifecyclePolicy"
	ObjectLifecyclePolicy_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: ObjectLifecyclePolicy_Kind}.String()
	ObjectLifecyclePolicy_KindAPIVersion   = ObjectLifecyclePolicy_Kind + "." + CRDGroupVersion.String()
	ObjectLifecyclePolicy_GroupVersionKind = CRDGroupVersion.WithKind(ObjectLifecyclePolicy_Kind)
)

func init() {
	SchemeBuilder.Register(&ObjectLifecyclePolicy{}, &ObjectLifecyclePolicyList{})
}
