/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type ObjectLifecyclePolicyObservation struct {
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// The date and time the object lifecycle policy was created, as described in RFC 3339.
	TimeCreated *string `json:"timeCreated,omitempty" tf:"time_created,omitempty"`
}

type ObjectLifecyclePolicyParameters struct {

	// The name of the bucket. Avoid entering confidential information. Example: my-new-bucket1
	// +kubebuilder:validation:Required
	Bucket *string `json:"bucket" tf:"bucket,omitempty"`

	// The Object Storage namespace used for the request.
	// +kubebuilder:validation:Required
	Namespace *string `json:"namespace" tf:"namespace,omitempty"`

	// (Updatable) The bucket's set of lifecycle policy rules.
	// +kubebuilder:validation:Optional
	Rules []RulesParameters `json:"rules,omitempty" tf:"rules,omitempty"`
}

type ObjectNameFilterObservation struct {
}

type ObjectNameFilterParameters struct {

	// (Updatable) An array of glob patterns to match the object names to exclude. An empty array is ignored. Exclusion patterns take precedence over inclusion patterns. A Glob pattern is a sequence of characters to match text. Any character that appears in the pattern, other than the special pattern characters described below, matches itself. Glob patterns must be between 1 and 1024 characters.
	// +kubebuilder:validation:Optional
	ExclusionPatterns []*string `json:"exclusionPatterns,omitempty" tf:"exclusion_patterns,omitempty"`

	// (Updatable) An array of glob patterns to match the object names to include. An empty array includes all objects in the bucket. Exclusion patterns take precedence over inclusion patterns. A Glob pattern is a sequence of characters to match text. Any character that appears in the pattern, other than the special pattern characters described below, matches itself. Glob patterns must be between 1 and 1024 characters.
	// +kubebuilder:validation:Optional
	InclusionPatterns []*string `json:"inclusionPatterns,omitempty" tf:"inclusion_patterns,omitempty"`

	// (Updatable) An array of object name prefixes that the rule will apply to. An empty array means to include all objects.
	// +kubebuilder:validation:Optional
	InclusionPrefixes []*string `json:"inclusionPrefixes,omitempty" tf:"inclusion_prefixes,omitempty"`
}

type RulesObservation struct {
}

type RulesParameters struct {

	// (Updatable) The action of the object lifecycle policy rule. Rules using the action 'ARCHIVE' move objects from Standard and InfrequentAccess storage tiers into the Archive storage tier. Rules using the action 'INFREQUENT_ACCESS' move objects from Standard storage tier into the Infrequent Access Storage tier. Objects that are already in InfrequentAccess tier or in Archive tier are left untouched. Rules using the action 'DELETE' permanently delete objects from buckets. Rules using 'ABORT' abort the uncommitted multipart-uploads and permanently delete their parts from buckets.
	// +kubebuilder:validation:Required
	Action *string `json:"action" tf:"action,omitempty"`

	// (Updatable) A Boolean that determines whether this rule is currently enabled.
	// +kubebuilder:validation:Required
	IsEnabled *bool `json:"isEnabled" tf:"is_enabled,omitempty"`

	// (Updatable) The name of the lifecycle rule to be applied.
	// +kubebuilder:validation:Required
	Name *string `json:"name" tf:"name,omitempty"`

	// (Updatable) A filter that compares object names to a set of prefixes or patterns to determine if a rule applies to a given object. The filter can contain include glob patterns, exclude glob patterns and inclusion prefixes. The inclusion prefixes property is kept for backward compatibility. It is recommended to use inclusion patterns instead of prefixes. Exclusions take precedence over inclusions.
	// +kubebuilder:validation:Optional
	ObjectNameFilter []ObjectNameFilterParameters `json:"objectNameFilter,omitempty" tf:"object_name_filter,omitempty"`

	// (Updatable) The target of the object lifecycle policy rule. The values of target can be either "objects", "multipart-uploads" or "previous-object-versions". This field when declared as "objects" is used to specify ARCHIVE, INFREQUENT_ACCESS or DELETE rule for objects. This field when declared as "previous-object-versions" is used to specify ARCHIVE, INFREQUENT_ACCESS or DELETE rule for previous versions of existing objects. This field when declared as "multipart-uploads" is used to specify the ABORT (only) rule for uncommitted multipart-uploads.
	// +kubebuilder:validation:Optional
	Target *string `json:"target,omitempty" tf:"target,omitempty"`

	// (Updatable) Specifies the age of objects to apply the rule to. The timeAmount is interpreted in units defined by the timeUnit parameter, and is calculated in relation to each object's Last-Modified time.
	// +kubebuilder:validation:Required
	TimeAmount *string `json:"timeAmount" tf:"time_amount,omitempty"`

	// (Updatable) The unit that should be used to interpret timeAmount.  Days are defined as starting and ending at midnight UTC. Years are defined as 365.2425 days long and likewise round up to the next midnight UTC.
	// +kubebuilder:validation:Required
	TimeUnit *string `json:"timeUnit" tf:"time_unit,omitempty"`
}

// ObjectLifecyclePolicySpec defines the desired state of ObjectLifecyclePolicy
type ObjectLifecyclePolicySpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     ObjectLifecyclePolicyParameters `json:"forProvider"`
}

// ObjectLifecyclePolicyStatus defines the observed state of ObjectLifecyclePolicy.
type ObjectLifecyclePolicyStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        ObjectLifecyclePolicyObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// ObjectLifecyclePolicy is the Schema for the ObjectLifecyclePolicys API. Provides the Object Lifecycle Policy resource in Oracle Cloud Infrastructure Object Storage service
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,oci}
type ObjectLifecyclePolicy struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              ObjectLifecyclePolicySpec   `json:"spec"`
	Status            ObjectLifecyclePolicyStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// ObjectLifecyclePolicyList contains a list of ObjectLifecyclePolicys
type ObjectLifecyclePolicyList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []ObjectLifecyclePolicy `json:"items"`
}

// Repository type metadata.
var (
	ObjectLifecyclePolicy_Kind             = "ObjectLifecyclePolicy"
	ObjectLifecyclePolicy_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: ObjectLifecyclePolicy_Kind}.String()
	ObjectLifecyclePolicy_KindAPIVersion   = ObjectLifecyclePolicy_Kind + "." + CRDGroupVersion.String()
	ObjectLifecyclePolicy_GroupVersionKind = CRDGroupVersion.WithKind(ObjectLifecyclePolicy_Kind)
)

func init() {
	SchemeBuilder.Register(&ObjectLifecyclePolicy{}, &ObjectLifecyclePolicyList{})
}
