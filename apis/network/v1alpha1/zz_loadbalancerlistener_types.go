/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type LoadBalancerListenerObservation struct {
	ID *string `json:"id,omitempty" tf:"id,omitempty"`
}

type LoadBalancerListenerParameters struct {

	// (Updatable) The name of the associated backend set.  Example: example_backend_set
	// +kubebuilder:validation:Required
	DefaultBackendSetName *string `json:"defaultBackendSetName" tf:"default_backend_set_name,omitempty"`

	// (Updatable) IP version associated with the listener.
	// +kubebuilder:validation:Optional
	IPVersion *string `json:"ipVersion,omitempty" tf:"ip_version,omitempty"`

	// A friendly name for the listener. It must be unique and it cannot be changed.  Example: example_listener
	// +kubebuilder:validation:Required
	Name *string `json:"name" tf:"name,omitempty"`

	// The OCID of the network load balancer to update.
	// +crossplane:generate:reference:type=LoadBalancerNetworkLoadBalancer
	// +kubebuilder:validation:Optional
	NetworkLoadBalancerID *string `json:"networkLoadBalancerId,omitempty" tf:"network_load_balancer_id,omitempty"`

	// Reference to a LoadBalancerNetworkLoadBalancer to populate networkLoadBalancerId.
	// +kubebuilder:validation:Optional
	NetworkLoadBalancerIDRef *v1.Reference `json:"networkLoadBalancerIdRef,omitempty" tf:"-"`

	// Selector for a LoadBalancerNetworkLoadBalancer to populate networkLoadBalancerId.
	// +kubebuilder:validation:Optional
	NetworkLoadBalancerIDSelector *v1.Selector `json:"networkLoadBalancerIdSelector,omitempty" tf:"-"`

	// (Updatable) The communication port for the listener.  Example: 80
	// +kubebuilder:validation:Required
	Port *float64 `json:"port" tf:"port,omitempty"`

	// (Updatable) The protocol on which the listener accepts connection requests. For public network load balancers, ANY protocol refers to TCP/UDP. For private network load balancers, ANY protocol refers to TCP/UDP/ICMP (note that ICMP requires isPreserveSourceDestination to be set to true). To get a list of valid protocols, use the ListNetworkLoadBalancersProtocols operation.  Example: TCP
	// +kubebuilder:validation:Required
	Protocol *string `json:"protocol" tf:"protocol,omitempty"`
}

// LoadBalancerListenerSpec defines the desired state of LoadBalancerListener
type LoadBalancerListenerSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     LoadBalancerListenerParameters `json:"forProvider"`
}

// LoadBalancerListenerStatus defines the observed state of LoadBalancerListener.
type LoadBalancerListenerStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        LoadBalancerListenerObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// LoadBalancerListener is the Schema for the LoadBalancerListeners API. Provides the Listener resource in Oracle Cloud Infrastructure Network Load Balancer service
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,oci}
type LoadBalancerListener struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              LoadBalancerListenerSpec   `json:"spec"`
	Status            LoadBalancerListenerStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// LoadBalancerListenerList contains a list of LoadBalancerListeners
type LoadBalancerListenerList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []LoadBalancerListener `json:"items"`
}

// Repository type metadata.
var (
	LoadBalancerListener_Kind             = "LoadBalancerListener"
	LoadBalancerListener_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: LoadBalancerListener_Kind}.String()
	LoadBalancerListener_KindAPIVersion   = LoadBalancerListener_Kind + "." + CRDGroupVersion.String()
	LoadBalancerListener_GroupVersionKind = CRDGroupVersion.WithKind(LoadBalancerListener_Kind)
)

func init() {
	SchemeBuilder.Register(&LoadBalancerListener{}, &LoadBalancerListenerList{})
}
