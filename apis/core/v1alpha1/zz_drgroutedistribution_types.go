/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type DrgRouteDistributionObservation struct {
	CompartmentID *string `json:"compartmentId,omitempty" tf:"compartment_id,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	State *string `json:"state,omitempty" tf:"state,omitempty"`

	TimeCreated *string `json:"timeCreated,omitempty" tf:"time_created,omitempty"`
}

type DrgRouteDistributionParameters struct {

	// +kubebuilder:validation:Optional
	DefinedTags map[string]*string `json:"definedTags,omitempty" tf:"defined_tags,omitempty"`

	// +kubebuilder:validation:Optional
	DisplayName *string `json:"displayName,omitempty" tf:"display_name,omitempty"`

	// +kubebuilder:validation:Required
	DistributionType *string `json:"distributionType" tf:"distribution_type,omitempty"`

	// +crossplane:generate:reference:type=Drg
	// +kubebuilder:validation:Optional
	DrgID *string `json:"drgId,omitempty" tf:"drg_id,omitempty"`

	// +kubebuilder:validation:Optional
	DrgIDRef *v1.Reference `json:"drgIdRef,omitempty" tf:"-"`

	// +kubebuilder:validation:Optional
	DrgIDSelector *v1.Selector `json:"drgIdSelector,omitempty" tf:"-"`

	// +kubebuilder:validation:Optional
	FreeformTags map[string]*string `json:"freeformTags,omitempty" tf:"freeform_tags,omitempty"`
}

// DrgRouteDistributionSpec defines the desired state of DrgRouteDistribution
type DrgRouteDistributionSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     DrgRouteDistributionParameters `json:"forProvider"`
}

// DrgRouteDistributionStatus defines the observed state of DrgRouteDistribution.
type DrgRouteDistributionStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        DrgRouteDistributionObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// DrgRouteDistribution is the Schema for the DrgRouteDistributions API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,ocijet}
type DrgRouteDistribution struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              DrgRouteDistributionSpec   `json:"spec"`
	Status            DrgRouteDistributionStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// DrgRouteDistributionList contains a list of DrgRouteDistributions
type DrgRouteDistributionList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []DrgRouteDistribution `json:"items"`
}

// Repository type metadata.
var (
	DrgRouteDistribution_Kind             = "DrgRouteDistribution"
	DrgRouteDistribution_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: DrgRouteDistribution_Kind}.String()
	DrgRouteDistribution_KindAPIVersion   = DrgRouteDistribution_Kind + "." + CRDGroupVersion.String()
	DrgRouteDistribution_GroupVersionKind = CRDGroupVersion.WithKind(DrgRouteDistribution_Kind)
)

func init() {
	SchemeBuilder.Register(&DrgRouteDistribution{}, &DrgRouteDistributionList{})
}
