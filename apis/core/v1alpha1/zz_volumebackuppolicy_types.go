/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type SchedulesObservation struct {
}

type SchedulesParameters struct {

	// +kubebuilder:validation:Required
	BackupType *string `json:"backupType" tf:"backup_type,omitempty"`

	// +kubebuilder:validation:Optional
	DayOfMonth *float64 `json:"dayOfMonth,omitempty" tf:"day_of_month,omitempty"`

	// +kubebuilder:validation:Optional
	DayOfWeek *string `json:"dayOfWeek,omitempty" tf:"day_of_week,omitempty"`

	// +kubebuilder:validation:Optional
	HourOfDay *float64 `json:"hourOfDay,omitempty" tf:"hour_of_day,omitempty"`

	// +kubebuilder:validation:Optional
	Month *string `json:"month,omitempty" tf:"month,omitempty"`

	// +kubebuilder:validation:Optional
	OffsetSeconds *float64 `json:"offsetSeconds,omitempty" tf:"offset_seconds,omitempty"`

	// +kubebuilder:validation:Optional
	OffsetType *string `json:"offsetType,omitempty" tf:"offset_type,omitempty"`

	// +kubebuilder:validation:Required
	Period *string `json:"period" tf:"period,omitempty"`

	// +kubebuilder:validation:Required
	RetentionSeconds *float64 `json:"retentionSeconds" tf:"retention_seconds,omitempty"`

	// +kubebuilder:validation:Optional
	TimeZone *string `json:"timeZone,omitempty" tf:"time_zone,omitempty"`
}

type VolumeBackupPolicyObservation struct {
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	TimeCreated *string `json:"timeCreated,omitempty" tf:"time_created,omitempty"`
}

type VolumeBackupPolicyParameters struct {

	// +crossplane:generate:reference:type=github.com/crossplane-contrib/provider-jet-oci/apis/identity/v1alpha1.Compartment
	// +kubebuilder:validation:Optional
	CompartmentID *string `json:"compartmentId,omitempty" tf:"compartment_id,omitempty"`

	// +kubebuilder:validation:Optional
	CompartmentIDRef *v1.Reference `json:"compartmentIdRef,omitempty" tf:"-"`

	// +kubebuilder:validation:Optional
	CompartmentIDSelector *v1.Selector `json:"compartmentIdSelector,omitempty" tf:"-"`

	// +kubebuilder:validation:Optional
	DefinedTags map[string]*string `json:"definedTags,omitempty" tf:"defined_tags,omitempty"`

	// +kubebuilder:validation:Optional
	DestinationRegion *string `json:"destinationRegion,omitempty" tf:"destination_region,omitempty"`

	// +kubebuilder:validation:Optional
	DisplayName *string `json:"displayName,omitempty" tf:"display_name,omitempty"`

	// +kubebuilder:validation:Optional
	FreeformTags map[string]*string `json:"freeformTags,omitempty" tf:"freeform_tags,omitempty"`

	// +kubebuilder:validation:Optional
	Schedules []SchedulesParameters `json:"schedules,omitempty" tf:"schedules,omitempty"`
}

// VolumeBackupPolicySpec defines the desired state of VolumeBackupPolicy
type VolumeBackupPolicySpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     VolumeBackupPolicyParameters `json:"forProvider"`
}

// VolumeBackupPolicyStatus defines the observed state of VolumeBackupPolicy.
type VolumeBackupPolicyStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        VolumeBackupPolicyObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// VolumeBackupPolicy is the Schema for the VolumeBackupPolicys API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,ocijet}
type VolumeBackupPolicy struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              VolumeBackupPolicySpec   `json:"spec"`
	Status            VolumeBackupPolicyStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// VolumeBackupPolicyList contains a list of VolumeBackupPolicys
type VolumeBackupPolicyList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []VolumeBackupPolicy `json:"items"`
}

// Repository type metadata.
var (
	VolumeBackupPolicy_Kind             = "VolumeBackupPolicy"
	VolumeBackupPolicy_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: VolumeBackupPolicy_Kind}.String()
	VolumeBackupPolicy_KindAPIVersion   = VolumeBackupPolicy_Kind + "." + CRDGroupVersion.String()
	VolumeBackupPolicy_GroupVersionKind = CRDGroupVersion.WithKind(VolumeBackupPolicy_Kind)
)

func init() {
	SchemeBuilder.Register(&VolumeBackupPolicy{}, &VolumeBackupPolicyList{})
}
