/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type RemotePeeringConnectionObservation struct {
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	IsCrossTenancyPeering *bool `json:"isCrossTenancyPeering,omitempty" tf:"is_cross_tenancy_peering,omitempty"`

	PeerTenancyID *string `json:"peerTenancyId,omitempty" tf:"peer_tenancy_id,omitempty"`

	PeeringStatus *string `json:"peeringStatus,omitempty" tf:"peering_status,omitempty"`

	State *string `json:"state,omitempty" tf:"state,omitempty"`

	TimeCreated *string `json:"timeCreated,omitempty" tf:"time_created,omitempty"`
}

type RemotePeeringConnectionParameters struct {

	// +crossplane:generate:reference:type=github.com/crossplane-contrib/provider-jet-oci/apis/identity/v1alpha1.Compartment
	// +kubebuilder:validation:Optional
	CompartmentID *string `json:"compartmentId,omitempty" tf:"compartment_id,omitempty"`

	// +kubebuilder:validation:Optional
	CompartmentIDRef *v1.Reference `json:"compartmentIdRef,omitempty" tf:"-"`

	// +kubebuilder:validation:Optional
	CompartmentIDSelector *v1.Selector `json:"compartmentIdSelector,omitempty" tf:"-"`

	// +kubebuilder:validation:Optional
	DefinedTags map[string]*string `json:"definedTags,omitempty" tf:"defined_tags,omitempty"`

	// +kubebuilder:validation:Optional
	DisplayName *string `json:"displayName,omitempty" tf:"display_name,omitempty"`

	// +crossplane:generate:reference:type=Drg
	// +kubebuilder:validation:Optional
	DrgID *string `json:"drgId,omitempty" tf:"drg_id,omitempty"`

	// +kubebuilder:validation:Optional
	DrgIDRef *v1.Reference `json:"drgIdRef,omitempty" tf:"-"`

	// +kubebuilder:validation:Optional
	DrgIDSelector *v1.Selector `json:"drgIdSelector,omitempty" tf:"-"`

	// +kubebuilder:validation:Optional
	FreeformTags map[string]*string `json:"freeformTags,omitempty" tf:"freeform_tags,omitempty"`

	// +kubebuilder:validation:Optional
	PeerID *string `json:"peerId,omitempty" tf:"peer_id,omitempty"`

	// +kubebuilder:validation:Optional
	PeerRegionName *string `json:"peerRegionName,omitempty" tf:"peer_region_name,omitempty"`
}

// RemotePeeringConnectionSpec defines the desired state of RemotePeeringConnection
type RemotePeeringConnectionSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     RemotePeeringConnectionParameters `json:"forProvider"`
}

// RemotePeeringConnectionStatus defines the observed state of RemotePeeringConnection.
type RemotePeeringConnectionStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        RemotePeeringConnectionObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// RemotePeeringConnection is the Schema for the RemotePeeringConnections API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,ocijet}
type RemotePeeringConnection struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              RemotePeeringConnectionSpec   `json:"spec"`
	Status            RemotePeeringConnectionStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// RemotePeeringConnectionList contains a list of RemotePeeringConnections
type RemotePeeringConnectionList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []RemotePeeringConnection `json:"items"`
}

// Repository type metadata.
var (
	RemotePeeringConnection_Kind             = "RemotePeeringConnection"
	RemotePeeringConnection_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: RemotePeeringConnection_Kind}.String()
	RemotePeeringConnection_KindAPIVersion   = RemotePeeringConnection_Kind + "." + CRDGroupVersion.String()
	RemotePeeringConnection_GroupVersionKind = CRDGroupVersion.WithKind(RemotePeeringConnection_Kind)
)

func init() {
	SchemeBuilder.Register(&RemotePeeringConnection{}, &RemotePeeringConnectionList{})
}
