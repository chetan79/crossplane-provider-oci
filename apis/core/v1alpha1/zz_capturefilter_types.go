/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type CaptureFilterObservation struct {
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	State *string `json:"state,omitempty" tf:"state,omitempty"`

	TimeCreated *string `json:"timeCreated,omitempty" tf:"time_created,omitempty"`
}

type CaptureFilterParameters struct {

	// +crossplane:generate:reference:type=github.com/crossplane-contrib/provider-jet-oci/apis/identity/v1alpha1.Compartment
	// +kubebuilder:validation:Optional
	CompartmentID *string `json:"compartmentId,omitempty" tf:"compartment_id,omitempty"`

	// +kubebuilder:validation:Optional
	CompartmentIDRef *v1.Reference `json:"compartmentIdRef,omitempty" tf:"-"`

	// +kubebuilder:validation:Optional
	CompartmentIDSelector *v1.Selector `json:"compartmentIdSelector,omitempty" tf:"-"`

	// +kubebuilder:validation:Optional
	DefinedTags map[string]*string `json:"definedTags,omitempty" tf:"defined_tags,omitempty"`

	// +kubebuilder:validation:Optional
	DisplayName *string `json:"displayName,omitempty" tf:"display_name,omitempty"`

	// +kubebuilder:validation:Required
	FilterType *string `json:"filterType" tf:"filter_type,omitempty"`

	// +kubebuilder:validation:Optional
	FreeformTags map[string]*string `json:"freeformTags,omitempty" tf:"freeform_tags,omitempty"`

	// +kubebuilder:validation:Optional
	VtapCaptureFilterRules []VtapCaptureFilterRulesParameters `json:"vtapCaptureFilterRules,omitempty" tf:"vtap_capture_filter_rules,omitempty"`
}

type DestinationPortRangeObservation struct {
}

type DestinationPortRangeParameters struct {

	// +kubebuilder:validation:Required
	Max *float64 `json:"max" tf:"max,omitempty"`

	// +kubebuilder:validation:Required
	Min *float64 `json:"min" tf:"min,omitempty"`
}

type IcmpOptionsObservation struct {
}

type IcmpOptionsParameters struct {

	// +kubebuilder:validation:Optional
	Code *float64 `json:"code,omitempty" tf:"code,omitempty"`

	// +kubebuilder:validation:Required
	Type *float64 `json:"type" tf:"type,omitempty"`
}

type SourcePortRangeObservation struct {
}

type SourcePortRangeParameters struct {

	// +kubebuilder:validation:Required
	Max *float64 `json:"max" tf:"max,omitempty"`

	// +kubebuilder:validation:Required
	Min *float64 `json:"min" tf:"min,omitempty"`
}

type TCPOptionsObservation struct {
}

type TCPOptionsParameters struct {

	// +kubebuilder:validation:Optional
	DestinationPortRange []DestinationPortRangeParameters `json:"destinationPortRange,omitempty" tf:"destination_port_range,omitempty"`

	// +kubebuilder:validation:Optional
	SourcePortRange []SourcePortRangeParameters `json:"sourcePortRange,omitempty" tf:"source_port_range,omitempty"`
}

type UDPOptionsDestinationPortRangeObservation struct {
}

type UDPOptionsDestinationPortRangeParameters struct {

	// +kubebuilder:validation:Required
	Max *float64 `json:"max" tf:"max,omitempty"`

	// +kubebuilder:validation:Required
	Min *float64 `json:"min" tf:"min,omitempty"`
}

type UDPOptionsObservation struct {
}

type UDPOptionsParameters struct {

	// +kubebuilder:validation:Optional
	DestinationPortRange []UDPOptionsDestinationPortRangeParameters `json:"destinationPortRange,omitempty" tf:"destination_port_range,omitempty"`

	// +kubebuilder:validation:Optional
	SourcePortRange []UDPOptionsSourcePortRangeParameters `json:"sourcePortRange,omitempty" tf:"source_port_range,omitempty"`
}

type UDPOptionsSourcePortRangeObservation struct {
}

type UDPOptionsSourcePortRangeParameters struct {

	// +kubebuilder:validation:Required
	Max *float64 `json:"max" tf:"max,omitempty"`

	// +kubebuilder:validation:Required
	Min *float64 `json:"min" tf:"min,omitempty"`
}

type VtapCaptureFilterRulesObservation struct {
}

type VtapCaptureFilterRulesParameters struct {

	// +kubebuilder:validation:Optional
	DestinationCidr *string `json:"destinationCidr,omitempty" tf:"destination_cidr,omitempty"`

	// +kubebuilder:validation:Optional
	IcmpOptions []IcmpOptionsParameters `json:"icmpOptions,omitempty" tf:"icmp_options,omitempty"`

	// +kubebuilder:validation:Optional
	Protocol *string `json:"protocol,omitempty" tf:"protocol,omitempty"`

	// +kubebuilder:validation:Optional
	RuleAction *string `json:"ruleAction,omitempty" tf:"rule_action,omitempty"`

	// +kubebuilder:validation:Optional
	SourceCidr *string `json:"sourceCidr,omitempty" tf:"source_cidr,omitempty"`

	// +kubebuilder:validation:Optional
	TCPOptions []TCPOptionsParameters `json:"tcpOptions,omitempty" tf:"tcp_options,omitempty"`

	// +kubebuilder:validation:Required
	TrafficDirection *string `json:"trafficDirection" tf:"traffic_direction,omitempty"`

	// +kubebuilder:validation:Optional
	UDPOptions []UDPOptionsParameters `json:"udpOptions,omitempty" tf:"udp_options,omitempty"`
}

// CaptureFilterSpec defines the desired state of CaptureFilter
type CaptureFilterSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     CaptureFilterParameters `json:"forProvider"`
}

// CaptureFilterStatus defines the observed state of CaptureFilter.
type CaptureFilterStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        CaptureFilterObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// CaptureFilter is the Schema for the CaptureFilters API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,ocijet}
type CaptureFilter struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              CaptureFilterSpec   `json:"spec"`
	Status            CaptureFilterStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// CaptureFilterList contains a list of CaptureFilters
type CaptureFilterList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []CaptureFilter `json:"items"`
}

// Repository type metadata.
var (
	CaptureFilter_Kind             = "CaptureFilter"
	CaptureFilter_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: CaptureFilter_Kind}.String()
	CaptureFilter_KindAPIVersion   = CaptureFilter_Kind + "." + CRDGroupVersion.String()
	CaptureFilter_GroupVersionKind = CRDGroupVersion.WithKind(CaptureFilter_Kind)
)

func init() {
	SchemeBuilder.Register(&CaptureFilter{}, &CaptureFilterList{})
}
