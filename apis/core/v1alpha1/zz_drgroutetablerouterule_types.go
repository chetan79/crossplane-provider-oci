/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type DrgRouteTableRouteRuleObservation struct {
	Attributes map[string]*string `json:"attributes,omitempty" tf:"attributes,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	IsBlackhole *bool `json:"isBlackhole,omitempty" tf:"is_blackhole,omitempty"`

	IsConflict *bool `json:"isConflict,omitempty" tf:"is_conflict,omitempty"`

	RouteProvenance *string `json:"routeProvenance,omitempty" tf:"route_provenance,omitempty"`

	RouteType *string `json:"routeType,omitempty" tf:"route_type,omitempty"`
}

type DrgRouteTableRouteRuleParameters struct {

	// +kubebuilder:validation:Required
	Destination *string `json:"destination" tf:"destination,omitempty"`

	// +kubebuilder:validation:Required
	DestinationType *string `json:"destinationType" tf:"destination_type,omitempty"`

	// +crossplane:generate:reference:type=DrgRouteTable
	// +kubebuilder:validation:Optional
	DrgRouteTableID *string `json:"drgRouteTableId,omitempty" tf:"drg_route_table_id,omitempty"`

	// +kubebuilder:validation:Optional
	DrgRouteTableIDRef *v1.Reference `json:"drgRouteTableIdRef,omitempty" tf:"-"`

	// +kubebuilder:validation:Optional
	DrgRouteTableIDSelector *v1.Selector `json:"drgRouteTableIdSelector,omitempty" tf:"-"`

	// +crossplane:generate:reference:type=DrgAttachment
	// +kubebuilder:validation:Optional
	NextHopDrgAttachmentID *string `json:"nextHopDrgAttachmentId,omitempty" tf:"next_hop_drg_attachment_id,omitempty"`

	// +kubebuilder:validation:Optional
	NextHopDrgAttachmentIDRef *v1.Reference `json:"nextHopDrgAttachmentIdRef,omitempty" tf:"-"`

	// +kubebuilder:validation:Optional
	NextHopDrgAttachmentIDSelector *v1.Selector `json:"nextHopDrgAttachmentIdSelector,omitempty" tf:"-"`
}

// DrgRouteTableRouteRuleSpec defines the desired state of DrgRouteTableRouteRule
type DrgRouteTableRouteRuleSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     DrgRouteTableRouteRuleParameters `json:"forProvider"`
}

// DrgRouteTableRouteRuleStatus defines the observed state of DrgRouteTableRouteRule.
type DrgRouteTableRouteRuleStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        DrgRouteTableRouteRuleObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// DrgRouteTableRouteRule is the Schema for the DrgRouteTableRouteRules API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,ocijet}
type DrgRouteTableRouteRule struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              DrgRouteTableRouteRuleSpec   `json:"spec"`
	Status            DrgRouteTableRouteRuleStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// DrgRouteTableRouteRuleList contains a list of DrgRouteTableRouteRules
type DrgRouteTableRouteRuleList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []DrgRouteTableRouteRule `json:"items"`
}

// Repository type metadata.
var (
	DrgRouteTableRouteRule_Kind             = "DrgRouteTableRouteRule"
	DrgRouteTableRouteRule_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: DrgRouteTableRouteRule_Kind}.String()
	DrgRouteTableRouteRule_KindAPIVersion   = DrgRouteTableRouteRule_Kind + "." + CRDGroupVersion.String()
	DrgRouteTableRouteRule_GroupVersionKind = CRDGroupVersion.WithKind(DrgRouteTableRouteRule_Kind)
)

func init() {
	SchemeBuilder.Register(&DrgRouteTableRouteRule{}, &DrgRouteTableRouteRuleList{})
}
