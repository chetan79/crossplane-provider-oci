/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type CpeObservation struct {
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	TimeCreated *string `json:"timeCreated,omitempty" tf:"time_created,omitempty"`
}

type CpeParameters struct {

	// +crossplane:generate:reference:type=github.com/crossplane-contrib/provider-jet-oci/apis/identity/v1alpha1.Compartment
	// +kubebuilder:validation:Optional
	CompartmentID *string `json:"compartmentId,omitempty" tf:"compartment_id,omitempty"`

	// +kubebuilder:validation:Optional
	CompartmentIDRef *v1.Reference `json:"compartmentIdRef,omitempty" tf:"-"`

	// +kubebuilder:validation:Optional
	CompartmentIDSelector *v1.Selector `json:"compartmentIdSelector,omitempty" tf:"-"`

	// +kubebuilder:validation:Optional
	CpeDeviceShapeID *string `json:"cpeDeviceShapeId,omitempty" tf:"cpe_device_shape_id,omitempty"`

	// +kubebuilder:validation:Optional
	DefinedTags map[string]*string `json:"definedTags,omitempty" tf:"defined_tags,omitempty"`

	// +kubebuilder:validation:Optional
	DisplayName *string `json:"displayName,omitempty" tf:"display_name,omitempty"`

	// +kubebuilder:validation:Optional
	FreeformTags map[string]*string `json:"freeformTags,omitempty" tf:"freeform_tags,omitempty"`

	// +kubebuilder:validation:Required
	IPAddress *string `json:"ipAddress" tf:"ip_address,omitempty"`
}

// CpeSpec defines the desired state of Cpe
type CpeSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     CpeParameters `json:"forProvider"`
}

// CpeStatus defines the observed state of Cpe.
type CpeStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        CpeObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// Cpe is the Schema for the Cpes API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,ocijet}
type Cpe struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              CpeSpec   `json:"spec"`
	Status            CpeStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// CpeList contains a list of Cpes
type CpeList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []Cpe `json:"items"`
}

// Repository type metadata.
var (
	Cpe_Kind             = "Cpe"
	Cpe_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: Cpe_Kind}.String()
	Cpe_KindAPIVersion   = Cpe_Kind + "." + CRDGroupVersion.String()
	Cpe_GroupVersionKind = CRDGroupVersion.WithKind(Cpe_Kind)
)

func init() {
	SchemeBuilder.Register(&Cpe{}, &CpeList{})
}
