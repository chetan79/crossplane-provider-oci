/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type DrgAttachmentObservation struct {
	CompartmentID *string `json:"compartmentId,omitempty" tf:"compartment_id,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	IsCrossTenancy *bool `json:"isCrossTenancy,omitempty" tf:"is_cross_tenancy,omitempty"`

	State *string `json:"state,omitempty" tf:"state,omitempty"`

	TimeCreated *string `json:"timeCreated,omitempty" tf:"time_created,omitempty"`
}

type DrgAttachmentParameters struct {

	// +kubebuilder:validation:Optional
	DefinedTags map[string]*string `json:"definedTags,omitempty" tf:"defined_tags,omitempty"`

	// +kubebuilder:validation:Optional
	DisplayName *string `json:"displayName,omitempty" tf:"display_name,omitempty"`

	// +crossplane:generate:reference:type=Drg
	// +kubebuilder:validation:Optional
	DrgID *string `json:"drgId,omitempty" tf:"drg_id,omitempty"`

	// +kubebuilder:validation:Optional
	DrgIDRef *v1.Reference `json:"drgIdRef,omitempty" tf:"-"`

	// +kubebuilder:validation:Optional
	DrgIDSelector *v1.Selector `json:"drgIdSelector,omitempty" tf:"-"`

	// +crossplane:generate:reference:type=DrgRouteTable
	// +kubebuilder:validation:Optional
	DrgRouteTableID *string `json:"drgRouteTableId,omitempty" tf:"drg_route_table_id,omitempty"`

	// +kubebuilder:validation:Optional
	DrgRouteTableIDRef *v1.Reference `json:"drgRouteTableIdRef,omitempty" tf:"-"`

	// +kubebuilder:validation:Optional
	DrgRouteTableIDSelector *v1.Selector `json:"drgRouteTableIdSelector,omitempty" tf:"-"`

	// +kubebuilder:validation:Optional
	ExportDrgRouteDistributionID *string `json:"exportDrgRouteDistributionId,omitempty" tf:"export_drg_route_distribution_id,omitempty"`

	// +kubebuilder:validation:Optional
	FreeformTags map[string]*string `json:"freeformTags,omitempty" tf:"freeform_tags,omitempty"`

	// +kubebuilder:validation:Optional
	NetworkDetails []NetworkDetailsParameters `json:"networkDetails,omitempty" tf:"network_details,omitempty"`

	// +kubebuilder:validation:Optional
	RemoveExportDrgRouteDistributionTrigger *bool `json:"removeExportDrgRouteDistributionTrigger,omitempty" tf:"remove_export_drg_route_distribution_trigger,omitempty"`

	// +kubebuilder:validation:Optional
	RouteTableID *string `json:"routeTableId,omitempty" tf:"route_table_id,omitempty"`

	// +kubebuilder:validation:Optional
	VcnID *string `json:"vcnId,omitempty" tf:"vcn_id,omitempty"`
}

type NetworkDetailsObservation struct {
	IpsecConnectionID *string `json:"ipsecConnectionId,omitempty" tf:"ipsec_connection_id,omitempty"`
}

type NetworkDetailsParameters struct {

	// +crossplane:generate:reference:type=Vcn
	// +kubebuilder:validation:Optional
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// +kubebuilder:validation:Optional
	IDRef *v1.Reference `json:"idRef,omitempty" tf:"-"`

	// +kubebuilder:validation:Optional
	IDSelector *v1.Selector `json:"idSelector,omitempty" tf:"-"`

	// +crossplane:generate:reference:type=RouteTable
	// +kubebuilder:validation:Optional
	RouteTableID *string `json:"routeTableId,omitempty" tf:"route_table_id,omitempty"`

	// +kubebuilder:validation:Optional
	RouteTableIDRef *v1.Reference `json:"routeTableIdRef,omitempty" tf:"-"`

	// +kubebuilder:validation:Optional
	RouteTableIDSelector *v1.Selector `json:"routeTableIdSelector,omitempty" tf:"-"`

	// +kubebuilder:validation:Required
	Type *string `json:"type" tf:"type,omitempty"`

	// +kubebuilder:validation:Optional
	VcnRouteType *string `json:"vcnRouteType,omitempty" tf:"vcn_route_type,omitempty"`
}

// DrgAttachmentSpec defines the desired state of DrgAttachment
type DrgAttachmentSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     DrgAttachmentParameters `json:"forProvider"`
}

// DrgAttachmentStatus defines the observed state of DrgAttachment.
type DrgAttachmentStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        DrgAttachmentObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// DrgAttachment is the Schema for the DrgAttachments API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,ocijet}
type DrgAttachment struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              DrgAttachmentSpec   `json:"spec"`
	Status            DrgAttachmentStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// DrgAttachmentList contains a list of DrgAttachments
type DrgAttachmentList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []DrgAttachment `json:"items"`
}

// Repository type metadata.
var (
	DrgAttachment_Kind             = "DrgAttachment"
	DrgAttachment_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: DrgAttachment_Kind}.String()
	DrgAttachment_KindAPIVersion   = DrgAttachment_Kind + "." + CRDGroupVersion.String()
	DrgAttachment_GroupVersionKind = CRDGroupVersion.WithKind(DrgAttachment_Kind)
)

func init() {
	SchemeBuilder.Register(&DrgAttachment{}, &DrgAttachmentList{})
}
