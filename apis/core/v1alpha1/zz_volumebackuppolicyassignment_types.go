/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type VolumeBackupPolicyAssignmentObservation struct {
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	TimeCreated *string `json:"timeCreated,omitempty" tf:"time_created,omitempty"`
}

type VolumeBackupPolicyAssignmentParameters struct {

	// +crossplane:generate:reference:type=Volume
	// +kubebuilder:validation:Optional
	AssetID *string `json:"assetId,omitempty" tf:"asset_id,omitempty"`

	// +kubebuilder:validation:Optional
	AssetIDRef *v1.Reference `json:"assetIdRef,omitempty" tf:"-"`

	// +kubebuilder:validation:Optional
	AssetIDSelector *v1.Selector `json:"assetIdSelector,omitempty" tf:"-"`

	// +crossplane:generate:reference:type=VolumeBackupPolicy
	// +kubebuilder:validation:Optional
	PolicyID *string `json:"policyId,omitempty" tf:"policy_id,omitempty"`

	// +kubebuilder:validation:Optional
	PolicyIDRef *v1.Reference `json:"policyIdRef,omitempty" tf:"-"`

	// +kubebuilder:validation:Optional
	PolicyIDSelector *v1.Selector `json:"policyIdSelector,omitempty" tf:"-"`
}

// VolumeBackupPolicyAssignmentSpec defines the desired state of VolumeBackupPolicyAssignment
type VolumeBackupPolicyAssignmentSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     VolumeBackupPolicyAssignmentParameters `json:"forProvider"`
}

// VolumeBackupPolicyAssignmentStatus defines the observed state of VolumeBackupPolicyAssignment.
type VolumeBackupPolicyAssignmentStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        VolumeBackupPolicyAssignmentObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// VolumeBackupPolicyAssignment is the Schema for the VolumeBackupPolicyAssignments API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,ocijet}
type VolumeBackupPolicyAssignment struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              VolumeBackupPolicyAssignmentSpec   `json:"spec"`
	Status            VolumeBackupPolicyAssignmentStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// VolumeBackupPolicyAssignmentList contains a list of VolumeBackupPolicyAssignments
type VolumeBackupPolicyAssignmentList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []VolumeBackupPolicyAssignment `json:"items"`
}

// Repository type metadata.
var (
	VolumeBackupPolicyAssignment_Kind             = "VolumeBackupPolicyAssignment"
	VolumeBackupPolicyAssignment_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: VolumeBackupPolicyAssignment_Kind}.String()
	VolumeBackupPolicyAssignment_KindAPIVersion   = VolumeBackupPolicyAssignment_Kind + "." + CRDGroupVersion.String()
	VolumeBackupPolicyAssignment_GroupVersionKind = CRDGroupVersion.WithKind(VolumeBackupPolicyAssignment_Kind)
)

func init() {
	SchemeBuilder.Register(&VolumeBackupPolicyAssignment{}, &VolumeBackupPolicyAssignmentList{})
}
