/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type EgressSecurityRulesIcmpOptionsObservation struct {
}

type EgressSecurityRulesIcmpOptionsParameters struct {

	// +kubebuilder:validation:Optional
	Code *float64 `json:"code,omitempty" tf:"code,omitempty"`

	// +kubebuilder:validation:Required
	Type *float64 `json:"type" tf:"type,omitempty"`
}

type EgressSecurityRulesObservation struct {
}

type EgressSecurityRulesParameters struct {

	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// +kubebuilder:validation:Required
	Destination *string `json:"destination" tf:"destination,omitempty"`

	// +kubebuilder:validation:Optional
	DestinationType *string `json:"destinationType,omitempty" tf:"destination_type,omitempty"`

	// +kubebuilder:validation:Optional
	IcmpOptions []EgressSecurityRulesIcmpOptionsParameters `json:"icmpOptions,omitempty" tf:"icmp_options,omitempty"`

	// +kubebuilder:validation:Required
	Protocol *string `json:"protocol" tf:"protocol,omitempty"`

	// +kubebuilder:validation:Optional
	Stateless *bool `json:"stateless,omitempty" tf:"stateless,omitempty"`

	// +kubebuilder:validation:Optional
	TCPOptions []EgressSecurityRulesTCPOptionsParameters `json:"tcpOptions,omitempty" tf:"tcp_options,omitempty"`

	// +kubebuilder:validation:Optional
	UDPOptions []EgressSecurityRulesUDPOptionsParameters `json:"udpOptions,omitempty" tf:"udp_options,omitempty"`
}

type EgressSecurityRulesTCPOptionsObservation struct {
}

type EgressSecurityRulesTCPOptionsParameters struct {

	// +kubebuilder:validation:Optional
	Max *float64 `json:"max,omitempty" tf:"max,omitempty"`

	// +kubebuilder:validation:Optional
	Min *float64 `json:"min,omitempty" tf:"min,omitempty"`

	// +kubebuilder:validation:Optional
	SourcePortRange []EgressSecurityRulesTCPOptionsSourcePortRangeParameters `json:"sourcePortRange,omitempty" tf:"source_port_range,omitempty"`
}

type EgressSecurityRulesTCPOptionsSourcePortRangeObservation struct {
}

type EgressSecurityRulesTCPOptionsSourcePortRangeParameters struct {

	// +kubebuilder:validation:Required
	Max *float64 `json:"max" tf:"max,omitempty"`

	// +kubebuilder:validation:Required
	Min *float64 `json:"min" tf:"min,omitempty"`
}

type EgressSecurityRulesUDPOptionsObservation struct {
}

type EgressSecurityRulesUDPOptionsParameters struct {

	// +kubebuilder:validation:Optional
	Max *float64 `json:"max,omitempty" tf:"max,omitempty"`

	// +kubebuilder:validation:Optional
	Min *float64 `json:"min,omitempty" tf:"min,omitempty"`

	// +kubebuilder:validation:Optional
	SourcePortRange []EgressSecurityRulesUDPOptionsSourcePortRangeParameters `json:"sourcePortRange,omitempty" tf:"source_port_range,omitempty"`
}

type EgressSecurityRulesUDPOptionsSourcePortRangeObservation struct {
}

type EgressSecurityRulesUDPOptionsSourcePortRangeParameters struct {

	// +kubebuilder:validation:Required
	Max *float64 `json:"max" tf:"max,omitempty"`

	// +kubebuilder:validation:Required
	Min *float64 `json:"min" tf:"min,omitempty"`
}

type IngressSecurityRulesIcmpOptionsObservation struct {
}

type IngressSecurityRulesIcmpOptionsParameters struct {

	// +kubebuilder:validation:Optional
	Code *float64 `json:"code,omitempty" tf:"code,omitempty"`

	// +kubebuilder:validation:Required
	Type *float64 `json:"type" tf:"type,omitempty"`
}

type IngressSecurityRulesObservation struct {
}

type IngressSecurityRulesParameters struct {

	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// +kubebuilder:validation:Optional
	IcmpOptions []IngressSecurityRulesIcmpOptionsParameters `json:"icmpOptions,omitempty" tf:"icmp_options,omitempty"`

	// +kubebuilder:validation:Required
	Protocol *string `json:"protocol" tf:"protocol,omitempty"`

	// +kubebuilder:validation:Required
	Source *string `json:"source" tf:"source,omitempty"`

	// +kubebuilder:validation:Optional
	SourceType *string `json:"sourceType,omitempty" tf:"source_type,omitempty"`

	// +kubebuilder:validation:Optional
	Stateless *bool `json:"stateless,omitempty" tf:"stateless,omitempty"`

	// +kubebuilder:validation:Optional
	TCPOptions []IngressSecurityRulesTCPOptionsParameters `json:"tcpOptions,omitempty" tf:"tcp_options,omitempty"`

	// +kubebuilder:validation:Optional
	UDPOptions []IngressSecurityRulesUDPOptionsParameters `json:"udpOptions,omitempty" tf:"udp_options,omitempty"`
}

type IngressSecurityRulesTCPOptionsObservation struct {
}

type IngressSecurityRulesTCPOptionsParameters struct {

	// +kubebuilder:validation:Optional
	Max *float64 `json:"max,omitempty" tf:"max,omitempty"`

	// +kubebuilder:validation:Optional
	Min *float64 `json:"min,omitempty" tf:"min,omitempty"`

	// +kubebuilder:validation:Optional
	SourcePortRange []IngressSecurityRulesTCPOptionsSourcePortRangeParameters `json:"sourcePortRange,omitempty" tf:"source_port_range,omitempty"`
}

type IngressSecurityRulesTCPOptionsSourcePortRangeObservation struct {
}

type IngressSecurityRulesTCPOptionsSourcePortRangeParameters struct {

	// +kubebuilder:validation:Required
	Max *float64 `json:"max" tf:"max,omitempty"`

	// +kubebuilder:validation:Required
	Min *float64 `json:"min" tf:"min,omitempty"`
}

type IngressSecurityRulesUDPOptionsObservation struct {
}

type IngressSecurityRulesUDPOptionsParameters struct {

	// +kubebuilder:validation:Optional
	Max *float64 `json:"max,omitempty" tf:"max,omitempty"`

	// +kubebuilder:validation:Optional
	Min *float64 `json:"min,omitempty" tf:"min,omitempty"`

	// +kubebuilder:validation:Optional
	SourcePortRange []IngressSecurityRulesUDPOptionsSourcePortRangeParameters `json:"sourcePortRange,omitempty" tf:"source_port_range,omitempty"`
}

type IngressSecurityRulesUDPOptionsSourcePortRangeObservation struct {
}

type IngressSecurityRulesUDPOptionsSourcePortRangeParameters struct {

	// +kubebuilder:validation:Required
	Max *float64 `json:"max" tf:"max,omitempty"`

	// +kubebuilder:validation:Required
	Min *float64 `json:"min" tf:"min,omitempty"`
}

type SecurityListObservation struct {
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	State *string `json:"state,omitempty" tf:"state,omitempty"`

	TimeCreated *string `json:"timeCreated,omitempty" tf:"time_created,omitempty"`
}

type SecurityListParameters struct {

	// +crossplane:generate:reference:type=github.com/crossplane-contrib/provider-jet-oci/apis/identity/v1alpha1.Compartment
	// +kubebuilder:validation:Optional
	CompartmentID *string `json:"compartmentId,omitempty" tf:"compartment_id,omitempty"`

	// +kubebuilder:validation:Optional
	CompartmentIDRef *v1.Reference `json:"compartmentIdRef,omitempty" tf:"-"`

	// +kubebuilder:validation:Optional
	CompartmentIDSelector *v1.Selector `json:"compartmentIdSelector,omitempty" tf:"-"`

	// +kubebuilder:validation:Optional
	DefinedTags map[string]*string `json:"definedTags,omitempty" tf:"defined_tags,omitempty"`

	// +kubebuilder:validation:Optional
	DisplayName *string `json:"displayName,omitempty" tf:"display_name,omitempty"`

	// +kubebuilder:validation:Optional
	EgressSecurityRules []EgressSecurityRulesParameters `json:"egressSecurityRules,omitempty" tf:"egress_security_rules,omitempty"`

	// +kubebuilder:validation:Optional
	FreeformTags map[string]*string `json:"freeformTags,omitempty" tf:"freeform_tags,omitempty"`

	// +kubebuilder:validation:Optional
	IngressSecurityRules []IngressSecurityRulesParameters `json:"ingressSecurityRules,omitempty" tf:"ingress_security_rules,omitempty"`

	// +crossplane:generate:reference:type=Vcn
	// +kubebuilder:validation:Optional
	VcnID *string `json:"vcnId,omitempty" tf:"vcn_id,omitempty"`

	// +kubebuilder:validation:Optional
	VcnIDRef *v1.Reference `json:"vcnIdRef,omitempty" tf:"-"`

	// +kubebuilder:validation:Optional
	VcnIDSelector *v1.Selector `json:"vcnIdSelector,omitempty" tf:"-"`
}

// SecurityListSpec defines the desired state of SecurityList
type SecurityListSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     SecurityListParameters `json:"forProvider"`
}

// SecurityListStatus defines the observed state of SecurityList.
type SecurityListStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        SecurityListObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// SecurityList is the Schema for the SecurityLists API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,ocijet}
type SecurityList struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              SecurityListSpec   `json:"spec"`
	Status            SecurityListStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// SecurityListList contains a list of SecurityLists
type SecurityListList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []SecurityList `json:"items"`
}

// Repository type metadata.
var (
	SecurityList_Kind             = "SecurityList"
	SecurityList_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: SecurityList_Kind}.String()
	SecurityList_KindAPIVersion   = SecurityList_Kind + "." + CRDGroupVersion.String()
	SecurityList_GroupVersionKind = CRDGroupVersion.WithKind(SecurityList_Kind)
)

func init() {
	SchemeBuilder.Register(&SecurityList{}, &SecurityListList{})
}
