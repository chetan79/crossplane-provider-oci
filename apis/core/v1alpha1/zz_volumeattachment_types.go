/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type MultipathDevicesObservation struct {
	IPv4 *string `json:"ipv4,omitempty" tf:"ipv4,omitempty"`

	Iqn *string `json:"iqn,omitempty" tf:"iqn,omitempty"`

	Port *float64 `json:"port,omitempty" tf:"port,omitempty"`
}

type MultipathDevicesParameters struct {
}

type VolumeAttachmentObservation struct {
	AvailabilityDomain *string `json:"availabilityDomain,omitempty" tf:"availability_domain,omitempty"`

	ChapSecret *string `json:"chapSecret,omitempty" tf:"chap_secret,omitempty"`

	ChapUsername *string `json:"chapUsername,omitempty" tf:"chap_username,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	IPv4 *string `json:"ipv4,omitempty" tf:"ipv4,omitempty"`

	ISCSILoginState *string `json:"iscsiLoginState,omitempty" tf:"iscsi_login_state,omitempty"`

	Iqn *string `json:"iqn,omitempty" tf:"iqn,omitempty"`

	IsMultipath *bool `json:"isMultipath,omitempty" tf:"is_multipath,omitempty"`

	MultipathDevices []MultipathDevicesObservation `json:"multipathDevices,omitempty" tf:"multipath_devices,omitempty"`

	Port *float64 `json:"port,omitempty" tf:"port,omitempty"`

	State *string `json:"state,omitempty" tf:"state,omitempty"`

	TimeCreated *string `json:"timeCreated,omitempty" tf:"time_created,omitempty"`
}

type VolumeAttachmentParameters struct {

	// +kubebuilder:validation:Required
	AttachmentType *string `json:"attachmentType" tf:"attachment_type,omitempty"`

	// +kubebuilder:validation:Optional
	CompartmentID *string `json:"compartmentId,omitempty" tf:"compartment_id,omitempty"`

	// +kubebuilder:validation:Optional
	Device *string `json:"device,omitempty" tf:"device,omitempty"`

	// +kubebuilder:validation:Optional
	DisplayName *string `json:"displayName,omitempty" tf:"display_name,omitempty"`

	// +kubebuilder:validation:Optional
	EncryptionInTransitType *string `json:"encryptionInTransitType,omitempty" tf:"encryption_in_transit_type,omitempty"`

	// +crossplane:generate:reference:type=Instance
	// +kubebuilder:validation:Optional
	InstanceID *string `json:"instanceId,omitempty" tf:"instance_id,omitempty"`

	// +kubebuilder:validation:Optional
	InstanceIDRef *v1.Reference `json:"instanceIdRef,omitempty" tf:"-"`

	// +kubebuilder:validation:Optional
	InstanceIDSelector *v1.Selector `json:"instanceIdSelector,omitempty" tf:"-"`

	// +kubebuilder:validation:Optional
	IsAgentAutoISCSILoginEnabled *bool `json:"isAgentAutoIscsiLoginEnabled,omitempty" tf:"is_agent_auto_iscsi_login_enabled,omitempty"`

	// +kubebuilder:validation:Optional
	IsPvEncryptionInTransitEnabled *bool `json:"isPvEncryptionInTransitEnabled,omitempty" tf:"is_pv_encryption_in_transit_enabled,omitempty"`

	// +kubebuilder:validation:Optional
	IsReadOnly *bool `json:"isReadOnly,omitempty" tf:"is_read_only,omitempty"`

	// +kubebuilder:validation:Optional
	IsShareable *bool `json:"isShareable,omitempty" tf:"is_shareable,omitempty"`

	// +kubebuilder:validation:Optional
	UseChap *bool `json:"useChap,omitempty" tf:"use_chap,omitempty"`

	// +crossplane:generate:reference:type=Volume
	// +kubebuilder:validation:Optional
	VolumeID *string `json:"volumeId,omitempty" tf:"volume_id,omitempty"`

	// +kubebuilder:validation:Optional
	VolumeIDRef *v1.Reference `json:"volumeIdRef,omitempty" tf:"-"`

	// +kubebuilder:validation:Optional
	VolumeIDSelector *v1.Selector `json:"volumeIdSelector,omitempty" tf:"-"`
}

// VolumeAttachmentSpec defines the desired state of VolumeAttachment
type VolumeAttachmentSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     VolumeAttachmentParameters `json:"forProvider"`
}

// VolumeAttachmentStatus defines the observed state of VolumeAttachment.
type VolumeAttachmentStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        VolumeAttachmentObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// VolumeAttachment is the Schema for the VolumeAttachments API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,ocijet}
type VolumeAttachment struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              VolumeAttachmentSpec   `json:"spec"`
	Status            VolumeAttachmentStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// VolumeAttachmentList contains a list of VolumeAttachments
type VolumeAttachmentList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []VolumeAttachment `json:"items"`
}

// Repository type metadata.
var (
	VolumeAttachment_Kind             = "VolumeAttachment"
	VolumeAttachment_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: VolumeAttachment_Kind}.String()
	VolumeAttachment_KindAPIVersion   = VolumeAttachment_Kind + "." + CRDGroupVersion.String()
	VolumeAttachment_GroupVersionKind = CRDGroupVersion.WithKind(VolumeAttachment_Kind)
)

func init() {
	SchemeBuilder.Register(&VolumeAttachment{}, &VolumeAttachmentList{})
}
