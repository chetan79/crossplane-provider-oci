/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type VolumeGroupObservation struct {
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	IsHydrated *bool `json:"isHydrated,omitempty" tf:"is_hydrated,omitempty"`

	SizeInGbs *string `json:"sizeInGbs,omitempty" tf:"size_in_gbs,omitempty"`

	SizeInMbs *string `json:"sizeInMbs,omitempty" tf:"size_in_mbs,omitempty"`

	State *string `json:"state,omitempty" tf:"state,omitempty"`

	TimeCreated *string `json:"timeCreated,omitempty" tf:"time_created,omitempty"`

	VolumeIds []*string `json:"volumeIds,omitempty" tf:"volume_ids,omitempty"`
}

type VolumeGroupParameters struct {

	// +kubebuilder:validation:Required
	AvailabilityDomain *string `json:"availabilityDomain" tf:"availability_domain,omitempty"`

	// +kubebuilder:validation:Optional
	BackupPolicyID *string `json:"backupPolicyId,omitempty" tf:"backup_policy_id,omitempty"`

	// +crossplane:generate:reference:type=github.com/crossplane-contrib/provider-jet-oci/apis/identity/v1alpha1.Compartment
	// +kubebuilder:validation:Optional
	CompartmentID *string `json:"compartmentId,omitempty" tf:"compartment_id,omitempty"`

	// +kubebuilder:validation:Optional
	CompartmentIDRef *v1.Reference `json:"compartmentIdRef,omitempty" tf:"-"`

	// +kubebuilder:validation:Optional
	CompartmentIDSelector *v1.Selector `json:"compartmentIdSelector,omitempty" tf:"-"`

	// +kubebuilder:validation:Optional
	DefinedTags map[string]*string `json:"definedTags,omitempty" tf:"defined_tags,omitempty"`

	// +kubebuilder:validation:Optional
	DisplayName *string `json:"displayName,omitempty" tf:"display_name,omitempty"`

	// +kubebuilder:validation:Optional
	FreeformTags map[string]*string `json:"freeformTags,omitempty" tf:"freeform_tags,omitempty"`

	// +kubebuilder:validation:Optional
	PreserveVolumeReplica *bool `json:"preserveVolumeReplica,omitempty" tf:"preserve_volume_replica,omitempty"`

	// +kubebuilder:validation:Required
	SourceDetails []VolumeGroupSourceDetailsParameters `json:"sourceDetails" tf:"source_details,omitempty"`

	// +kubebuilder:validation:Optional
	VolumeGroupReplicas []VolumeGroupReplicasParameters `json:"volumeGroupReplicas,omitempty" tf:"volume_group_replicas,omitempty"`

	// +kubebuilder:validation:Optional
	VolumeGroupReplicasDeletion *bool `json:"volumeGroupReplicasDeletion,omitempty" tf:"volume_group_replicas_deletion,omitempty"`
}

type VolumeGroupReplicasObservation struct {
	VolumeGroupReplicaID *string `json:"volumeGroupReplicaId,omitempty" tf:"volume_group_replica_id,omitempty"`
}

type VolumeGroupReplicasParameters struct {

	// +kubebuilder:validation:Required
	AvailabilityDomain *string `json:"availabilityDomain" tf:"availability_domain,omitempty"`

	// +kubebuilder:validation:Optional
	DisplayName *string `json:"displayName,omitempty" tf:"display_name,omitempty"`
}

type VolumeGroupSourceDetailsObservation struct {
}

type VolumeGroupSourceDetailsParameters struct {

	// +kubebuilder:validation:Required
	Type *string `json:"type" tf:"type,omitempty"`

	// +kubebuilder:validation:Optional
	VolumeGroupBackupID *string `json:"volumeGroupBackupId,omitempty" tf:"volume_group_backup_id,omitempty"`

	// +kubebuilder:validation:Optional
	VolumeGroupID *string `json:"volumeGroupId,omitempty" tf:"volume_group_id,omitempty"`

	// +kubebuilder:validation:Optional
	VolumeGroupReplicaID *string `json:"volumeGroupReplicaId,omitempty" tf:"volume_group_replica_id,omitempty"`

	// +crossplane:generate:reference:type=Volume
	// +kubebuilder:validation:Optional
	VolumeIds []*string `json:"volumeIds,omitempty" tf:"volume_ids,omitempty"`

	// +kubebuilder:validation:Optional
	VolumeIdsRefs []v1.Reference `json:"volumeIdsRefs,omitempty" tf:"-"`

	// +kubebuilder:validation:Optional
	VolumeIdsSelector *v1.Selector `json:"volumeIdsSelector,omitempty" tf:"-"`
}

// VolumeGroupSpec defines the desired state of VolumeGroup
type VolumeGroupSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     VolumeGroupParameters `json:"forProvider"`
}

// VolumeGroupStatus defines the observed state of VolumeGroup.
type VolumeGroupStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        VolumeGroupObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// VolumeGroup is the Schema for the VolumeGroups API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,ocijet}
type VolumeGroup struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              VolumeGroupSpec   `json:"spec"`
	Status            VolumeGroupStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// VolumeGroupList contains a list of VolumeGroups
type VolumeGroupList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []VolumeGroup `json:"items"`
}

// Repository type metadata.
var (
	VolumeGroup_Kind             = "VolumeGroup"
	VolumeGroup_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: VolumeGroup_Kind}.String()
	VolumeGroup_KindAPIVersion   = VolumeGroup_Kind + "." + CRDGroupVersion.String()
	VolumeGroup_GroupVersionKind = CRDGroupVersion.WithKind(VolumeGroup_Kind)
)

func init() {
	SchemeBuilder.Register(&VolumeGroup{}, &VolumeGroupList{})
}
