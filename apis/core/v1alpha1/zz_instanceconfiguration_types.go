/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type AgentConfigPluginsConfigObservation struct {
}

type AgentConfigPluginsConfigParameters struct {

	// +kubebuilder:validation:Required
	DesiredState *string `json:"desiredState" tf:"desired_state,omitempty"`

	// +kubebuilder:validation:Required
	Name *string `json:"name" tf:"name,omitempty"`
}

type AttachDetailsObservation struct {
}

type AttachDetailsParameters struct {

	// +kubebuilder:validation:Optional
	Device *string `json:"device,omitempty" tf:"device,omitempty"`

	// +kubebuilder:validation:Optional
	DisplayName *string `json:"displayName,omitempty" tf:"display_name,omitempty"`

	// +kubebuilder:validation:Optional
	IsPvEncryptionInTransitEnabled *bool `json:"isPvEncryptionInTransitEnabled,omitempty" tf:"is_pv_encryption_in_transit_enabled,omitempty"`

	// +kubebuilder:validation:Optional
	IsReadOnly *bool `json:"isReadOnly,omitempty" tf:"is_read_only,omitempty"`

	// +kubebuilder:validation:Optional
	IsShareable *bool `json:"isShareable,omitempty" tf:"is_shareable,omitempty"`

	// +kubebuilder:validation:Required
	Type *string `json:"type" tf:"type,omitempty"`

	// +kubebuilder:validation:Optional
	UseChap *bool `json:"useChap,omitempty" tf:"use_chap,omitempty"`
}

type AutotunePoliciesObservation struct {
}

type AutotunePoliciesParameters struct {

	// +kubebuilder:validation:Required
	AutotuneType *string `json:"autotuneType" tf:"autotune_type,omitempty"`

	// +kubebuilder:validation:Optional
	MaxVpusPerGb *string `json:"maxVpusPerGb,omitempty" tf:"max_vpus_per_gb,omitempty"`
}

type BlockVolumesObservation struct {
}

type BlockVolumesParameters struct {

	// +kubebuilder:validation:Optional
	AttachDetails []AttachDetailsParameters `json:"attachDetails,omitempty" tf:"attach_details,omitempty"`

	// +kubebuilder:validation:Optional
	CreateDetails []CreateDetailsParameters `json:"createDetails,omitempty" tf:"create_details,omitempty"`

	// +kubebuilder:validation:Optional
	VolumeID *string `json:"volumeId,omitempty" tf:"volume_id,omitempty"`
}

type CreateDetailsObservation struct {
}

type CreateDetailsParameters struct {

	// +kubebuilder:validation:Optional
	AutotunePolicies []AutotunePoliciesParameters `json:"autotunePolicies,omitempty" tf:"autotune_policies,omitempty"`

	// +kubebuilder:validation:Optional
	AvailabilityDomain *string `json:"availabilityDomain,omitempty" tf:"availability_domain,omitempty"`

	// +kubebuilder:validation:Optional
	BackupPolicyID *string `json:"backupPolicyId,omitempty" tf:"backup_policy_id,omitempty"`

	// +kubebuilder:validation:Optional
	CompartmentID *string `json:"compartmentId,omitempty" tf:"compartment_id,omitempty"`

	// +kubebuilder:validation:Optional
	DefinedTags map[string]*string `json:"definedTags,omitempty" tf:"defined_tags,omitempty"`

	// +kubebuilder:validation:Optional
	DisplayName *string `json:"displayName,omitempty" tf:"display_name,omitempty"`

	// +kubebuilder:validation:Optional
	FreeformTags map[string]*string `json:"freeformTags,omitempty" tf:"freeform_tags,omitempty"`

	// +kubebuilder:validation:Optional
	KMSKeyID *string `json:"kmsKeyId,omitempty" tf:"kms_key_id,omitempty"`

	// +kubebuilder:validation:Optional
	SizeInGbs *string `json:"sizeInGbs,omitempty" tf:"size_in_gbs,omitempty"`

	// +kubebuilder:validation:Optional
	SourceDetails []CreateDetailsSourceDetailsParameters `json:"sourceDetails,omitempty" tf:"source_details,omitempty"`

	// +kubebuilder:validation:Optional
	VpusPerGb *string `json:"vpusPerGb,omitempty" tf:"vpus_per_gb,omitempty"`
}

type CreateDetailsSourceDetailsObservation struct {
}

type CreateDetailsSourceDetailsParameters struct {

	// +kubebuilder:validation:Optional
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// +kubebuilder:validation:Required
	Type *string `json:"type" tf:"type,omitempty"`
}

type InstanceConfigurationObservation struct {
	DeferredFields []*string `json:"deferredFields,omitempty" tf:"deferred_fields,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	TimeCreated *string `json:"timeCreated,omitempty" tf:"time_created,omitempty"`
}

type InstanceConfigurationParameters struct {

	// +crossplane:generate:reference:type=github.com/crossplane-contrib/provider-jet-oci/apis/identity/v1alpha1.Compartment
	// +kubebuilder:validation:Optional
	CompartmentID *string `json:"compartmentId,omitempty" tf:"compartment_id,omitempty"`

	// +kubebuilder:validation:Optional
	CompartmentIDRef *v1.Reference `json:"compartmentIdRef,omitempty" tf:"-"`

	// +kubebuilder:validation:Optional
	CompartmentIDSelector *v1.Selector `json:"compartmentIdSelector,omitempty" tf:"-"`

	// +kubebuilder:validation:Optional
	DefinedTags map[string]*string `json:"definedTags,omitempty" tf:"defined_tags,omitempty"`

	// +kubebuilder:validation:Optional
	DisplayName *string `json:"displayName,omitempty" tf:"display_name,omitempty"`

	// +kubebuilder:validation:Optional
	FreeformTags map[string]*string `json:"freeformTags,omitempty" tf:"freeform_tags,omitempty"`

	// +kubebuilder:validation:Optional
	InstanceDetails []InstanceDetailsParameters `json:"instanceDetails,omitempty" tf:"instance_details,omitempty"`

	// +kubebuilder:validation:Optional
	InstanceID *string `json:"instanceId,omitempty" tf:"instance_id,omitempty"`

	// +kubebuilder:validation:Optional
	Source *string `json:"source,omitempty" tf:"source,omitempty"`
}

type InstanceDetailsObservation struct {
}

type InstanceDetailsParameters struct {

	// +kubebuilder:validation:Optional
	BlockVolumes []BlockVolumesParameters `json:"blockVolumes,omitempty" tf:"block_volumes,omitempty"`

	// +kubebuilder:validation:Required
	InstanceType *string `json:"instanceType" tf:"instance_type,omitempty"`

	// +kubebuilder:validation:Optional
	LaunchDetails []LaunchDetailsParameters `json:"launchDetails,omitempty" tf:"launch_details,omitempty"`

	// +kubebuilder:validation:Optional
	SecondaryVnics []SecondaryVnicsParameters `json:"secondaryVnics,omitempty" tf:"secondary_vnics,omitempty"`
}

type LaunchDetailsAgentConfigObservation struct {
}

type LaunchDetailsAgentConfigParameters struct {

	// +kubebuilder:validation:Optional
	AreAllPluginsDisabled *bool `json:"areAllPluginsDisabled,omitempty" tf:"are_all_plugins_disabled,omitempty"`

	// +kubebuilder:validation:Optional
	IsManagementDisabled *bool `json:"isManagementDisabled,omitempty" tf:"is_management_disabled,omitempty"`

	// +kubebuilder:validation:Optional
	IsMonitoringDisabled *bool `json:"isMonitoringDisabled,omitempty" tf:"is_monitoring_disabled,omitempty"`

	// +kubebuilder:validation:Optional
	PluginsConfig []AgentConfigPluginsConfigParameters `json:"pluginsConfig,omitempty" tf:"plugins_config,omitempty"`
}

type LaunchDetailsAvailabilityConfigObservation struct {
}

type LaunchDetailsAvailabilityConfigParameters struct {

	// +kubebuilder:validation:Optional
	RecoveryAction *string `json:"recoveryAction,omitempty" tf:"recovery_action,omitempty"`
}

type LaunchDetailsCreateVnicDetailsObservation struct {
}

type LaunchDetailsCreateVnicDetailsParameters struct {

	// +kubebuilder:validation:Optional
	AssignPrivateDNSRecord *bool `json:"assignPrivateDnsRecord,omitempty" tf:"assign_private_dns_record,omitempty"`

	// +kubebuilder:validation:Optional
	AssignPublicIP *bool `json:"assignPublicIp,omitempty" tf:"assign_public_ip,omitempty"`

	// +kubebuilder:validation:Optional
	DefinedTags map[string]*string `json:"definedTags,omitempty" tf:"defined_tags,omitempty"`

	// +kubebuilder:validation:Optional
	DisplayName *string `json:"displayName,omitempty" tf:"display_name,omitempty"`

	// +kubebuilder:validation:Optional
	FreeformTags map[string]*string `json:"freeformTags,omitempty" tf:"freeform_tags,omitempty"`

	// +kubebuilder:validation:Optional
	HostnameLabel *string `json:"hostnameLabel,omitempty" tf:"hostname_label,omitempty"`

	// +kubebuilder:validation:Optional
	NsgIds []*string `json:"nsgIds,omitempty" tf:"nsg_ids,omitempty"`

	// +kubebuilder:validation:Optional
	PrivateIP *string `json:"privateIp,omitempty" tf:"private_ip,omitempty"`

	// +kubebuilder:validation:Optional
	SkipSourceDestCheck *bool `json:"skipSourceDestCheck,omitempty" tf:"skip_source_dest_check,omitempty"`

	// +kubebuilder:validation:Optional
	SubnetID *string `json:"subnetId,omitempty" tf:"subnet_id,omitempty"`
}

type LaunchDetailsInstanceOptionsObservation struct {
}

type LaunchDetailsInstanceOptionsParameters struct {

	// +kubebuilder:validation:Optional
	AreLegacyImdsEndpointsDisabled *bool `json:"areLegacyImdsEndpointsDisabled,omitempty" tf:"are_legacy_imds_endpoints_disabled,omitempty"`
}

type LaunchDetailsLaunchOptionsObservation struct {
}

type LaunchDetailsLaunchOptionsParameters struct {

	// +kubebuilder:validation:Optional
	BootVolumeType *string `json:"bootVolumeType,omitempty" tf:"boot_volume_type,omitempty"`

	// +kubebuilder:validation:Optional
	Firmware *string `json:"firmware,omitempty" tf:"firmware,omitempty"`

	// +kubebuilder:validation:Optional
	IsConsistentVolumeNamingEnabled *bool `json:"isConsistentVolumeNamingEnabled,omitempty" tf:"is_consistent_volume_naming_enabled,omitempty"`

	// +kubebuilder:validation:Optional
	IsPvEncryptionInTransitEnabled *bool `json:"isPvEncryptionInTransitEnabled,omitempty" tf:"is_pv_encryption_in_transit_enabled,omitempty"`

	// +kubebuilder:validation:Optional
	NetworkType *string `json:"networkType,omitempty" tf:"network_type,omitempty"`

	// +kubebuilder:validation:Optional
	RemoteDataVolumeType *string `json:"remoteDataVolumeType,omitempty" tf:"remote_data_volume_type,omitempty"`
}

type LaunchDetailsObservation struct {
}

type LaunchDetailsParameters struct {

	// +kubebuilder:validation:Optional
	AgentConfig []LaunchDetailsAgentConfigParameters `json:"agentConfig,omitempty" tf:"agent_config,omitempty"`

	// +kubebuilder:validation:Optional
	AvailabilityConfig []LaunchDetailsAvailabilityConfigParameters `json:"availabilityConfig,omitempty" tf:"availability_config,omitempty"`

	// +kubebuilder:validation:Optional
	AvailabilityDomain *string `json:"availabilityDomain,omitempty" tf:"availability_domain,omitempty"`

	// +kubebuilder:validation:Optional
	CapacityReservationID *string `json:"capacityReservationId,omitempty" tf:"capacity_reservation_id,omitempty"`

	// +kubebuilder:validation:Optional
	CompartmentID *string `json:"compartmentId,omitempty" tf:"compartment_id,omitempty"`

	// +kubebuilder:validation:Optional
	CreateVnicDetails []LaunchDetailsCreateVnicDetailsParameters `json:"createVnicDetails,omitempty" tf:"create_vnic_details,omitempty"`

	// +kubebuilder:validation:Optional
	DedicatedVMHostID *string `json:"dedicatedVmHostId,omitempty" tf:"dedicated_vm_host_id,omitempty"`

	// +kubebuilder:validation:Optional
	DefinedTags map[string]*string `json:"definedTags,omitempty" tf:"defined_tags,omitempty"`

	// +kubebuilder:validation:Optional
	DisplayName *string `json:"displayName,omitempty" tf:"display_name,omitempty"`

	// +kubebuilder:validation:Optional
	ExtendedMetadata map[string]*string `json:"extendedMetadata,omitempty" tf:"extended_metadata,omitempty"`

	// +kubebuilder:validation:Optional
	FaultDomain *string `json:"faultDomain,omitempty" tf:"fault_domain,omitempty"`

	// +kubebuilder:validation:Optional
	FreeformTags map[string]*string `json:"freeformTags,omitempty" tf:"freeform_tags,omitempty"`

	// +kubebuilder:validation:Optional
	InstanceOptions []LaunchDetailsInstanceOptionsParameters `json:"instanceOptions,omitempty" tf:"instance_options,omitempty"`

	// +kubebuilder:validation:Optional
	IpxeScript *string `json:"ipxeScript,omitempty" tf:"ipxe_script,omitempty"`

	// +kubebuilder:validation:Optional
	IsPvEncryptionInTransitEnabled *bool `json:"isPvEncryptionInTransitEnabled,omitempty" tf:"is_pv_encryption_in_transit_enabled,omitempty"`

	// +kubebuilder:validation:Optional
	LaunchMode *string `json:"launchMode,omitempty" tf:"launch_mode,omitempty"`

	// +kubebuilder:validation:Optional
	LaunchOptions []LaunchDetailsLaunchOptionsParameters `json:"launchOptions,omitempty" tf:"launch_options,omitempty"`

	// +kubebuilder:validation:Optional
	Metadata map[string]*string `json:"metadata,omitempty" tf:"metadata,omitempty"`

	// +kubebuilder:validation:Optional
	PlatformConfig []LaunchDetailsPlatformConfigParameters `json:"platformConfig,omitempty" tf:"platform_config,omitempty"`

	// +kubebuilder:validation:Optional
	PreemptibleInstanceConfig []LaunchDetailsPreemptibleInstanceConfigParameters `json:"preemptibleInstanceConfig,omitempty" tf:"preemptible_instance_config,omitempty"`

	// +kubebuilder:validation:Optional
	PreferredMaintenanceAction *string `json:"preferredMaintenanceAction,omitempty" tf:"preferred_maintenance_action,omitempty"`

	// +kubebuilder:validation:Optional
	Shape *string `json:"shape,omitempty" tf:"shape,omitempty"`

	// +kubebuilder:validation:Optional
	ShapeConfig []LaunchDetailsShapeConfigParameters `json:"shapeConfig,omitempty" tf:"shape_config,omitempty"`

	// +kubebuilder:validation:Optional
	SourceDetails []LaunchDetailsSourceDetailsParameters `json:"sourceDetails,omitempty" tf:"source_details,omitempty"`
}

type LaunchDetailsPlatformConfigObservation struct {
}

type LaunchDetailsPlatformConfigParameters struct {

	// +kubebuilder:validation:Optional
	AreVirtualInstructionsEnabled *bool `json:"areVirtualInstructionsEnabled,omitempty" tf:"are_virtual_instructions_enabled,omitempty"`

	// +kubebuilder:validation:Optional
	IsAccessControlServiceEnabled *bool `json:"isAccessControlServiceEnabled,omitempty" tf:"is_access_control_service_enabled,omitempty"`

	// +kubebuilder:validation:Optional
	IsInputOutputMemoryManagementUnitEnabled *bool `json:"isInputOutputMemoryManagementUnitEnabled,omitempty" tf:"is_input_output_memory_management_unit_enabled,omitempty"`

	// +kubebuilder:validation:Optional
	IsMeasuredBootEnabled *bool `json:"isMeasuredBootEnabled,omitempty" tf:"is_measured_boot_enabled,omitempty"`

	// +kubebuilder:validation:Optional
	IsSecureBootEnabled *bool `json:"isSecureBootEnabled,omitempty" tf:"is_secure_boot_enabled,omitempty"`

	// +kubebuilder:validation:Optional
	IsSymmetricMultiThreadingEnabled *bool `json:"isSymmetricMultiThreadingEnabled,omitempty" tf:"is_symmetric_multi_threading_enabled,omitempty"`

	// +kubebuilder:validation:Optional
	IsTrustedPlatformModuleEnabled *bool `json:"isTrustedPlatformModuleEnabled,omitempty" tf:"is_trusted_platform_module_enabled,omitempty"`

	// +kubebuilder:validation:Optional
	NumaNodesPerSocket *string `json:"numaNodesPerSocket,omitempty" tf:"numa_nodes_per_socket,omitempty"`

	// +kubebuilder:validation:Optional
	PercentageOfCoresEnabled *float64 `json:"percentageOfCoresEnabled,omitempty" tf:"percentage_of_cores_enabled,omitempty"`

	// +kubebuilder:validation:Required
	Type *string `json:"type" tf:"type,omitempty"`
}

type LaunchDetailsPreemptibleInstanceConfigObservation struct {
}

type LaunchDetailsPreemptibleInstanceConfigParameters struct {

	// +kubebuilder:validation:Required
	PreemptionAction []PreemptibleInstanceConfigPreemptionActionParameters `json:"preemptionAction" tf:"preemption_action,omitempty"`
}

type LaunchDetailsShapeConfigObservation struct {
}

type LaunchDetailsShapeConfigParameters struct {

	// +kubebuilder:validation:Optional
	BaselineOcpuUtilization *string `json:"baselineOcpuUtilization,omitempty" tf:"baseline_ocpu_utilization,omitempty"`

	// +kubebuilder:validation:Optional
	MemoryInGbs *float64 `json:"memoryInGbs,omitempty" tf:"memory_in_gbs,omitempty"`

	// +kubebuilder:validation:Optional
	Nvmes *float64 `json:"nvmes,omitempty" tf:"nvmes,omitempty"`

	// +kubebuilder:validation:Optional
	Ocpus *float64 `json:"ocpus,omitempty" tf:"ocpus,omitempty"`
}

type LaunchDetailsSourceDetailsObservation struct {
}

type LaunchDetailsSourceDetailsParameters struct {

	// +kubebuilder:validation:Optional
	BootVolumeID *string `json:"bootVolumeId,omitempty" tf:"boot_volume_id,omitempty"`

	// +kubebuilder:validation:Optional
	BootVolumeSizeInGbs *string `json:"bootVolumeSizeInGbs,omitempty" tf:"boot_volume_size_in_gbs,omitempty"`

	// +kubebuilder:validation:Optional
	BootVolumeVpusPerGb *string `json:"bootVolumeVpusPerGb,omitempty" tf:"boot_volume_vpus_per_gb,omitempty"`

	// +kubebuilder:validation:Optional
	ImageID *string `json:"imageId,omitempty" tf:"image_id,omitempty"`

	// +kubebuilder:validation:Required
	SourceType *string `json:"sourceType" tf:"source_type,omitempty"`
}

type PreemptibleInstanceConfigPreemptionActionObservation struct {
}

type PreemptibleInstanceConfigPreemptionActionParameters struct {

	// +kubebuilder:validation:Optional
	PreserveBootVolume *bool `json:"preserveBootVolume,omitempty" tf:"preserve_boot_volume,omitempty"`

	// +kubebuilder:validation:Required
	Type *string `json:"type" tf:"type,omitempty"`
}

type SecondaryVnicsCreateVnicDetailsObservation struct {
}

type SecondaryVnicsCreateVnicDetailsParameters struct {

	// +kubebuilder:validation:Optional
	AssignPrivateDNSRecord *bool `json:"assignPrivateDnsRecord,omitempty" tf:"assign_private_dns_record,omitempty"`

	// +kubebuilder:validation:Optional
	AssignPublicIP *bool `json:"assignPublicIp,omitempty" tf:"assign_public_ip,omitempty"`

	// +kubebuilder:validation:Optional
	DefinedTags map[string]*string `json:"definedTags,omitempty" tf:"defined_tags,omitempty"`

	// +kubebuilder:validation:Optional
	DisplayName *string `json:"displayName,omitempty" tf:"display_name,omitempty"`

	// +kubebuilder:validation:Optional
	FreeformTags map[string]*string `json:"freeformTags,omitempty" tf:"freeform_tags,omitempty"`

	// +kubebuilder:validation:Optional
	HostnameLabel *string `json:"hostnameLabel,omitempty" tf:"hostname_label,omitempty"`

	// +kubebuilder:validation:Optional
	NsgIds []*string `json:"nsgIds,omitempty" tf:"nsg_ids,omitempty"`

	// +kubebuilder:validation:Optional
	PrivateIP *string `json:"privateIp,omitempty" tf:"private_ip,omitempty"`

	// +kubebuilder:validation:Optional
	SkipSourceDestCheck *bool `json:"skipSourceDestCheck,omitempty" tf:"skip_source_dest_check,omitempty"`

	// +kubebuilder:validation:Optional
	SubnetID *string `json:"subnetId,omitempty" tf:"subnet_id,omitempty"`
}

type SecondaryVnicsObservation struct {
}

type SecondaryVnicsParameters struct {

	// +kubebuilder:validation:Optional
	CreateVnicDetails []SecondaryVnicsCreateVnicDetailsParameters `json:"createVnicDetails,omitempty" tf:"create_vnic_details,omitempty"`

	// +kubebuilder:validation:Optional
	DisplayName *string `json:"displayName,omitempty" tf:"display_name,omitempty"`

	// +kubebuilder:validation:Optional
	NicIndex *float64 `json:"nicIndex,omitempty" tf:"nic_index,omitempty"`
}

// InstanceConfigurationSpec defines the desired state of InstanceConfiguration
type InstanceConfigurationSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     InstanceConfigurationParameters `json:"forProvider"`
}

// InstanceConfigurationStatus defines the observed state of InstanceConfiguration.
type InstanceConfigurationStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        InstanceConfigurationObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// InstanceConfiguration is the Schema for the InstanceConfigurations API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,ocijet}
type InstanceConfiguration struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              InstanceConfigurationSpec   `json:"spec"`
	Status            InstanceConfigurationStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// InstanceConfigurationList contains a list of InstanceConfigurations
type InstanceConfigurationList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []InstanceConfiguration `json:"items"`
}

// Repository type metadata.
var (
	InstanceConfiguration_Kind             = "InstanceConfiguration"
	InstanceConfiguration_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: InstanceConfiguration_Kind}.String()
	InstanceConfiguration_KindAPIVersion   = InstanceConfiguration_Kind + "." + CRDGroupVersion.String()
	InstanceConfiguration_GroupVersionKind = CRDGroupVersion.WithKind(InstanceConfiguration_Kind)
)

func init() {
	SchemeBuilder.Register(&InstanceConfiguration{}, &InstanceConfigurationList{})
}
