/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type DrgRouteTableObservation struct {
	CompartmentID *string `json:"compartmentId,omitempty" tf:"compartment_id,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	State *string `json:"state,omitempty" tf:"state,omitempty"`

	TimeCreated *string `json:"timeCreated,omitempty" tf:"time_created,omitempty"`
}

type DrgRouteTableParameters struct {

	// +kubebuilder:validation:Optional
	DefinedTags map[string]*string `json:"definedTags,omitempty" tf:"defined_tags,omitempty"`

	// +kubebuilder:validation:Optional
	DisplayName *string `json:"displayName,omitempty" tf:"display_name,omitempty"`

	// +crossplane:generate:reference:type=Drg
	// +kubebuilder:validation:Optional
	DrgID *string `json:"drgId,omitempty" tf:"drg_id,omitempty"`

	// +kubebuilder:validation:Optional
	DrgIDRef *v1.Reference `json:"drgIdRef,omitempty" tf:"-"`

	// +kubebuilder:validation:Optional
	DrgIDSelector *v1.Selector `json:"drgIdSelector,omitempty" tf:"-"`

	// +kubebuilder:validation:Optional
	FreeformTags map[string]*string `json:"freeformTags,omitempty" tf:"freeform_tags,omitempty"`

	// +crossplane:generate:reference:type=DrgRouteDistribution
	// +kubebuilder:validation:Optional
	ImportDrgRouteDistributionID *string `json:"importDrgRouteDistributionId,omitempty" tf:"import_drg_route_distribution_id,omitempty"`

	// +kubebuilder:validation:Optional
	ImportDrgRouteDistributionIDRef *v1.Reference `json:"importDrgRouteDistributionIdRef,omitempty" tf:"-"`

	// +kubebuilder:validation:Optional
	ImportDrgRouteDistributionIDSelector *v1.Selector `json:"importDrgRouteDistributionIdSelector,omitempty" tf:"-"`

	// +kubebuilder:validation:Optional
	IsEcmpEnabled *bool `json:"isEcmpEnabled,omitempty" tf:"is_ecmp_enabled,omitempty"`

	// +kubebuilder:validation:Optional
	RemoveImportTrigger *bool `json:"removeImportTrigger,omitempty" tf:"remove_import_trigger,omitempty"`
}

// DrgRouteTableSpec defines the desired state of DrgRouteTable
type DrgRouteTableSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     DrgRouteTableParameters `json:"forProvider"`
}

// DrgRouteTableStatus defines the observed state of DrgRouteTable.
type DrgRouteTableStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        DrgRouteTableObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// DrgRouteTable is the Schema for the DrgRouteTables API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,ocijet}
type DrgRouteTable struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              DrgRouteTableSpec   `json:"spec"`
	Status            DrgRouteTableStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// DrgRouteTableList contains a list of DrgRouteTables
type DrgRouteTableList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []DrgRouteTable `json:"items"`
}

// Repository type metadata.
var (
	DrgRouteTable_Kind             = "DrgRouteTable"
	DrgRouteTable_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: DrgRouteTable_Kind}.String()
	DrgRouteTable_KindAPIVersion   = DrgRouteTable_Kind + "." + CRDGroupVersion.String()
	DrgRouteTable_GroupVersionKind = CRDGroupVersion.WithKind(DrgRouteTable_Kind)
)

func init() {
	SchemeBuilder.Register(&DrgRouteTable{}, &DrgRouteTableList{})
}
