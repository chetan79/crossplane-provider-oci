/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type DefaultDrgRouteTablesObservation struct {
	IpsecTunnel *string `json:"ipsecTunnel,omitempty" tf:"ipsec_tunnel,omitempty"`

	RemotePeeringConnection *string `json:"remotePeeringConnection,omitempty" tf:"remote_peering_connection,omitempty"`

	Vcn *string `json:"vcn,omitempty" tf:"vcn,omitempty"`

	VirtualCircuit *string `json:"virtualCircuit,omitempty" tf:"virtual_circuit,omitempty"`
}

type DefaultDrgRouteTablesParameters struct {
}

type DrgObservation struct {
	DefaultDrgRouteTables []DefaultDrgRouteTablesObservation `json:"defaultDrgRouteTables,omitempty" tf:"default_drg_route_tables,omitempty"`

	DefaultExportDrgRouteDistributionID *string `json:"defaultExportDrgRouteDistributionId,omitempty" tf:"default_export_drg_route_distribution_id,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	RedundancyStatus *string `json:"redundancyStatus,omitempty" tf:"redundancy_status,omitempty"`

	State *string `json:"state,omitempty" tf:"state,omitempty"`

	TimeCreated *string `json:"timeCreated,omitempty" tf:"time_created,omitempty"`
}

type DrgParameters struct {

	// +crossplane:generate:reference:type=github.com/crossplane-contrib/provider-jet-oci/apis/identity/v1alpha1.Compartment
	// +kubebuilder:validation:Optional
	CompartmentID *string `json:"compartmentId,omitempty" tf:"compartment_id,omitempty"`

	// +kubebuilder:validation:Optional
	CompartmentIDRef *v1.Reference `json:"compartmentIdRef,omitempty" tf:"-"`

	// +kubebuilder:validation:Optional
	CompartmentIDSelector *v1.Selector `json:"compartmentIdSelector,omitempty" tf:"-"`

	// +kubebuilder:validation:Optional
	DefinedTags map[string]*string `json:"definedTags,omitempty" tf:"defined_tags,omitempty"`

	// +kubebuilder:validation:Optional
	DisplayName *string `json:"displayName,omitempty" tf:"display_name,omitempty"`

	// +kubebuilder:validation:Optional
	FreeformTags map[string]*string `json:"freeformTags,omitempty" tf:"freeform_tags,omitempty"`
}

// DrgSpec defines the desired state of Drg
type DrgSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     DrgParameters `json:"forProvider"`
}

// DrgStatus defines the observed state of Drg.
type DrgStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        DrgObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// Drg is the Schema for the Drgs API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,ocijet}
type Drg struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              DrgSpec   `json:"spec"`
	Status            DrgStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// DrgList contains a list of Drgs
type DrgList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []Drg `json:"items"`
}

// Repository type metadata.
var (
	Drg_Kind             = "Drg"
	Drg_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: Drg_Kind}.String()
	Drg_KindAPIVersion   = Drg_Kind + "." + CRDGroupVersion.String()
	Drg_GroupVersionKind = CRDGroupVersion.WithKind(Drg_Kind)
)

func init() {
	SchemeBuilder.Register(&Drg{}, &DrgList{})
}
