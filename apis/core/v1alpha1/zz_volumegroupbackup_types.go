/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type VolumeGroupBackupObservation struct {
	ExpirationTime *string `json:"expirationTime,omitempty" tf:"expiration_time,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	SizeInGbs *string `json:"sizeInGbs,omitempty" tf:"size_in_gbs,omitempty"`

	SizeInMbs *string `json:"sizeInMbs,omitempty" tf:"size_in_mbs,omitempty"`

	SourceType *string `json:"sourceType,omitempty" tf:"source_type,omitempty"`

	SourceVolumeGroupBackupID *string `json:"sourceVolumeGroupBackupId,omitempty" tf:"source_volume_group_backup_id,omitempty"`

	State *string `json:"state,omitempty" tf:"state,omitempty"`

	TimeCreated *string `json:"timeCreated,omitempty" tf:"time_created,omitempty"`

	TimeRequestReceived *string `json:"timeRequestReceived,omitempty" tf:"time_request_received,omitempty"`

	UniqueSizeInGbs *string `json:"uniqueSizeInGbs,omitempty" tf:"unique_size_in_gbs,omitempty"`

	UniqueSizeInMbs *string `json:"uniqueSizeInMbs,omitempty" tf:"unique_size_in_mbs,omitempty"`

	VolumeBackupIds []*string `json:"volumeBackupIds,omitempty" tf:"volume_backup_ids,omitempty"`
}

type VolumeGroupBackupParameters struct {

	// +crossplane:generate:reference:type=github.com/crossplane-contrib/provider-jet-oci/apis/identity/v1alpha1.Compartment
	// +kubebuilder:validation:Optional
	CompartmentID *string `json:"compartmentId,omitempty" tf:"compartment_id,omitempty"`

	// +kubebuilder:validation:Optional
	CompartmentIDRef *v1.Reference `json:"compartmentIdRef,omitempty" tf:"-"`

	// +kubebuilder:validation:Optional
	CompartmentIDSelector *v1.Selector `json:"compartmentIdSelector,omitempty" tf:"-"`

	// +kubebuilder:validation:Optional
	DefinedTags map[string]*string `json:"definedTags,omitempty" tf:"defined_tags,omitempty"`

	// +kubebuilder:validation:Optional
	DisplayName *string `json:"displayName,omitempty" tf:"display_name,omitempty"`

	// +kubebuilder:validation:Optional
	FreeformTags map[string]*string `json:"freeformTags,omitempty" tf:"freeform_tags,omitempty"`

	// +kubebuilder:validation:Optional
	SourceDetails []VolumeGroupBackupSourceDetailsParameters `json:"sourceDetails,omitempty" tf:"source_details,omitempty"`

	// +kubebuilder:validation:Optional
	Type *string `json:"type,omitempty" tf:"type,omitempty"`

	// +crossplane:generate:reference:type=VolumeGroup
	// +kubebuilder:validation:Optional
	VolumeGroupID *string `json:"volumeGroupId,omitempty" tf:"volume_group_id,omitempty"`

	// +kubebuilder:validation:Optional
	VolumeGroupIDRef *v1.Reference `json:"volumeGroupIdRef,omitempty" tf:"-"`

	// +kubebuilder:validation:Optional
	VolumeGroupIDSelector *v1.Selector `json:"volumeGroupIdSelector,omitempty" tf:"-"`
}

type VolumeGroupBackupSourceDetailsObservation struct {
}

type VolumeGroupBackupSourceDetailsParameters struct {

	// +kubebuilder:validation:Optional
	KMSKeyID *string `json:"kmsKeyId,omitempty" tf:"kms_key_id,omitempty"`

	// +kubebuilder:validation:Required
	Region *string `json:"region" tf:"region,omitempty"`

	// +kubebuilder:validation:Required
	VolumeGroupBackupID *string `json:"volumeGroupBackupId" tf:"volume_group_backup_id,omitempty"`
}

// VolumeGroupBackupSpec defines the desired state of VolumeGroupBackup
type VolumeGroupBackupSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     VolumeGroupBackupParameters `json:"forProvider"`
}

// VolumeGroupBackupStatus defines the observed state of VolumeGroupBackup.
type VolumeGroupBackupStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        VolumeGroupBackupObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// VolumeGroupBackup is the Schema for the VolumeGroupBackups API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,ocijet}
type VolumeGroupBackup struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              VolumeGroupBackupSpec   `json:"spec"`
	Status            VolumeGroupBackupStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// VolumeGroupBackupList contains a list of VolumeGroupBackups
type VolumeGroupBackupList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []VolumeGroupBackup `json:"items"`
}

// Repository type metadata.
var (
	VolumeGroupBackup_Kind             = "VolumeGroupBackup"
	VolumeGroupBackup_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: VolumeGroupBackup_Kind}.String()
	VolumeGroupBackup_KindAPIVersion   = VolumeGroupBackup_Kind + "." + CRDGroupVersion.String()
	VolumeGroupBackup_GroupVersionKind = CRDGroupVersion.WithKind(VolumeGroupBackup_Kind)
)

func init() {
	SchemeBuilder.Register(&VolumeGroupBackup{}, &VolumeGroupBackupList{})
}
