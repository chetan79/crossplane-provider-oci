/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type IpsecObservation struct {
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	State *string `json:"state,omitempty" tf:"state,omitempty"`

	TimeCreated *string `json:"timeCreated,omitempty" tf:"time_created,omitempty"`
}

type IpsecParameters struct {

	// +crossplane:generate:reference:type=github.com/crossplane-contrib/provider-jet-oci/apis/identity/v1alpha1.Compartment
	// +kubebuilder:validation:Optional
	CompartmentID *string `json:"compartmentId,omitempty" tf:"compartment_id,omitempty"`

	// +kubebuilder:validation:Optional
	CompartmentIDRef *v1.Reference `json:"compartmentIdRef,omitempty" tf:"-"`

	// +kubebuilder:validation:Optional
	CompartmentIDSelector *v1.Selector `json:"compartmentIdSelector,omitempty" tf:"-"`

	// +crossplane:generate:reference:type=Cpe
	// +kubebuilder:validation:Optional
	CpeID *string `json:"cpeId,omitempty" tf:"cpe_id,omitempty"`

	// +kubebuilder:validation:Optional
	CpeIDRef *v1.Reference `json:"cpeIdRef,omitempty" tf:"-"`

	// +kubebuilder:validation:Optional
	CpeIDSelector *v1.Selector `json:"cpeIdSelector,omitempty" tf:"-"`

	// +kubebuilder:validation:Optional
	CpeLocalIdentifier *string `json:"cpeLocalIdentifier,omitempty" tf:"cpe_local_identifier,omitempty"`

	// +kubebuilder:validation:Optional
	CpeLocalIdentifierType *string `json:"cpeLocalIdentifierType,omitempty" tf:"cpe_local_identifier_type,omitempty"`

	// +kubebuilder:validation:Optional
	DefinedTags map[string]*string `json:"definedTags,omitempty" tf:"defined_tags,omitempty"`

	// +kubebuilder:validation:Optional
	DisplayName *string `json:"displayName,omitempty" tf:"display_name,omitempty"`

	// +crossplane:generate:reference:type=Drg
	// +kubebuilder:validation:Optional
	DrgID *string `json:"drgId,omitempty" tf:"drg_id,omitempty"`

	// +kubebuilder:validation:Optional
	DrgIDRef *v1.Reference `json:"drgIdRef,omitempty" tf:"-"`

	// +kubebuilder:validation:Optional
	DrgIDSelector *v1.Selector `json:"drgIdSelector,omitempty" tf:"-"`

	// +kubebuilder:validation:Optional
	FreeformTags map[string]*string `json:"freeformTags,omitempty" tf:"freeform_tags,omitempty"`

	// +kubebuilder:validation:Required
	StaticRoutes []*string `json:"staticRoutes" tf:"static_routes,omitempty"`
}

// IpsecSpec defines the desired state of Ipsec
type IpsecSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     IpsecParameters `json:"forProvider"`
}

// IpsecStatus defines the observed state of Ipsec.
type IpsecStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        IpsecObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// Ipsec is the Schema for the Ipsecs API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,ocijet}
type Ipsec struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              IpsecSpec   `json:"spec"`
	Status            IpsecStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// IpsecList contains a list of Ipsecs
type IpsecList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []Ipsec `json:"items"`
}

// Repository type metadata.
var (
	Ipsec_Kind             = "Ipsec"
	Ipsec_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: Ipsec_Kind}.String()
	Ipsec_KindAPIVersion   = Ipsec_Kind + "." + CRDGroupVersion.String()
	Ipsec_GroupVersionKind = CRDGroupVersion.WithKind(Ipsec_Kind)
)

func init() {
	SchemeBuilder.Register(&Ipsec{}, &IpsecList{})
}
