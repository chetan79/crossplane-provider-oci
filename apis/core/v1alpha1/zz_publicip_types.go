/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type PublicIPObservation struct {
	AssignedEntityID *string `json:"assignedEntityId,omitempty" tf:"assigned_entity_id,omitempty"`

	AssignedEntityType *string `json:"assignedEntityType,omitempty" tf:"assigned_entity_type,omitempty"`

	AvailabilityDomain *string `json:"availabilityDomain,omitempty" tf:"availability_domain,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	IPAddress *string `json:"ipAddress,omitempty" tf:"ip_address,omitempty"`

	Scope *string `json:"scope,omitempty" tf:"scope,omitempty"`

	State *string `json:"state,omitempty" tf:"state,omitempty"`

	TimeCreated *string `json:"timeCreated,omitempty" tf:"time_created,omitempty"`
}

type PublicIPParameters struct {

	// +crossplane:generate:reference:type=github.com/crossplane-contrib/provider-jet-oci/apis/identity/v1alpha1.Compartment
	// +kubebuilder:validation:Optional
	CompartmentID *string `json:"compartmentId,omitempty" tf:"compartment_id,omitempty"`

	// +kubebuilder:validation:Optional
	CompartmentIDRef *v1.Reference `json:"compartmentIdRef,omitempty" tf:"-"`

	// +kubebuilder:validation:Optional
	CompartmentIDSelector *v1.Selector `json:"compartmentIdSelector,omitempty" tf:"-"`

	// +kubebuilder:validation:Optional
	DefinedTags map[string]*string `json:"definedTags,omitempty" tf:"defined_tags,omitempty"`

	// +kubebuilder:validation:Optional
	DisplayName *string `json:"displayName,omitempty" tf:"display_name,omitempty"`

	// +kubebuilder:validation:Optional
	FreeformTags map[string]*string `json:"freeformTags,omitempty" tf:"freeform_tags,omitempty"`

	// +kubebuilder:validation:Required
	Lifetime *string `json:"lifetime" tf:"lifetime,omitempty"`

	// +crossplane:generate:reference:type=PrivateIP
	// +kubebuilder:validation:Optional
	PrivateIPID *string `json:"privateIpId,omitempty" tf:"private_ip_id,omitempty"`

	// +kubebuilder:validation:Optional
	PrivateIPIDRef *v1.Reference `json:"privateIpidRef,omitempty" tf:"-"`

	// +kubebuilder:validation:Optional
	PrivateIPIDSelector *v1.Selector `json:"privateIpidSelector,omitempty" tf:"-"`

	// +crossplane:generate:reference:type=PublicIPPool
	// +kubebuilder:validation:Optional
	PublicIPPoolID *string `json:"publicIpPoolId,omitempty" tf:"public_ip_pool_id,omitempty"`

	// +kubebuilder:validation:Optional
	PublicIPPoolIDRef *v1.Reference `json:"publicIpPoolIdRef,omitempty" tf:"-"`

	// +kubebuilder:validation:Optional
	PublicIPPoolIDSelector *v1.Selector `json:"publicIpPoolIdSelector,omitempty" tf:"-"`
}

// PublicIPSpec defines the desired state of PublicIP
type PublicIPSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     PublicIPParameters `json:"forProvider"`
}

// PublicIPStatus defines the observed state of PublicIP.
type PublicIPStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        PublicIPObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// PublicIP is the Schema for the PublicIPs API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,ocijet}
type PublicIP struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              PublicIPSpec   `json:"spec"`
	Status            PublicIPStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// PublicIPList contains a list of PublicIPs
type PublicIPList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []PublicIP `json:"items"`
}

// Repository type metadata.
var (
	PublicIP_Kind             = "PublicIP"
	PublicIP_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: PublicIP_Kind}.String()
	PublicIP_KindAPIVersion   = PublicIP_Kind + "." + CRDGroupVersion.String()
	PublicIP_GroupVersionKind = CRDGroupVersion.WithKind(PublicIP_Kind)
)

func init() {
	SchemeBuilder.Register(&PublicIP{}, &PublicIPList{})
}
