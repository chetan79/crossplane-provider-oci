/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type DrgRouteDistributionStatementObservation struct {
	ID *string `json:"id,omitempty" tf:"id,omitempty"`
}

type DrgRouteDistributionStatementParameters struct {

	// +kubebuilder:validation:Required
	Action *string `json:"action" tf:"action,omitempty"`

	// +crossplane:generate:reference:type=DrgRouteDistribution
	// +kubebuilder:validation:Optional
	DrgRouteDistributionID *string `json:"drgRouteDistributionId,omitempty" tf:"drg_route_distribution_id,omitempty"`

	// +kubebuilder:validation:Optional
	DrgRouteDistributionIDRef *v1.Reference `json:"drgRouteDistributionIdRef,omitempty" tf:"-"`

	// +kubebuilder:validation:Optional
	DrgRouteDistributionIDSelector *v1.Selector `json:"drgRouteDistributionIdSelector,omitempty" tf:"-"`

	// +kubebuilder:validation:Required
	MatchCriteria []MatchCriteriaParameters `json:"matchCriteria" tf:"match_criteria,omitempty"`

	// +kubebuilder:validation:Required
	Priority *float64 `json:"priority" tf:"priority,omitempty"`
}

type MatchCriteriaObservation struct {
}

type MatchCriteriaParameters struct {

	// +kubebuilder:validation:Optional
	AttachmentType *string `json:"attachmentType,omitempty" tf:"attachment_type,omitempty"`

	// +kubebuilder:validation:Optional
	DrgAttachmentID *string `json:"drgAttachmentId,omitempty" tf:"drg_attachment_id,omitempty"`

	// +kubebuilder:validation:Optional
	MatchType *string `json:"matchType,omitempty" tf:"match_type,omitempty"`
}

// DrgRouteDistributionStatementSpec defines the desired state of DrgRouteDistributionStatement
type DrgRouteDistributionStatementSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     DrgRouteDistributionStatementParameters `json:"forProvider"`
}

// DrgRouteDistributionStatementStatus defines the observed state of DrgRouteDistributionStatement.
type DrgRouteDistributionStatementStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        DrgRouteDistributionStatementObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// DrgRouteDistributionStatement is the Schema for the DrgRouteDistributionStatements API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,ocijet}
type DrgRouteDistributionStatement struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              DrgRouteDistributionStatementSpec   `json:"spec"`
	Status            DrgRouteDistributionStatementStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// DrgRouteDistributionStatementList contains a list of DrgRouteDistributionStatements
type DrgRouteDistributionStatementList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []DrgRouteDistributionStatement `json:"items"`
}

// Repository type metadata.
var (
	DrgRouteDistributionStatement_Kind             = "DrgRouteDistributionStatement"
	DrgRouteDistributionStatement_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: DrgRouteDistributionStatement_Kind}.String()
	DrgRouteDistributionStatement_KindAPIVersion   = DrgRouteDistributionStatement_Kind + "." + CRDGroupVersion.String()
	DrgRouteDistributionStatement_GroupVersionKind = CRDGroupVersion.WithKind(DrgRouteDistributionStatement_Kind)
)

func init() {
	SchemeBuilder.Register(&DrgRouteDistributionStatement{}, &DrgRouteDistributionStatementList{})
}
